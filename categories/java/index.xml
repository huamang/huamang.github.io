<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Java on Huamang</title>
        <link>https://blog.huamang.xyz/categories/java/</link>
        <description>Recent content in Java on Huamang</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Fri, 04 Nov 2022 12:04:30 +0800</lastBuildDate><atom:link href="https://blog.huamang.xyz/categories/java/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>[Java安全] Fastjson的反序列化</title>
        <link>https://blog.huamang.xyz/post/fastjson/</link>
        <pubDate>Fri, 04 Nov 2022 12:04:30 +0800</pubDate>
        
        <guid>https://blog.huamang.xyz/post/fastjson/</guid>
        <description>前言 在学习反序列化的时候，我不禁会想，链子就算满天飞，但是可能现实中就是没有一个允许用户控制的反序列化的点来触发。 之前学习到的Shiro55</description>
        </item>
        <item>
        <title>[Java安全] ROME链分析</title>
        <link>https://blog.huamang.xyz/post/rome/</link>
        <pubDate>Wed, 26 Oct 2022 10:49:50 +0800</pubDate>
        
        <guid>https://blog.huamang.xyz/post/rome/</guid>
        <description>Gadget ysoserial利用的是ObjectBean 1 2 3 4 5 6 7 8 9 10 11 12 * TemplatesImpl.getOutputProperties() * NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) * NativeMethodAccessorImpl.invoke(Object, Object[]) * DelegatingMethodAccessorImpl.invoke(Object, Object[]) * Method.invoke(Object, Object...) * ToStringBean.toString(String) * ToStringBean.toString() * ObjectBean.toString() * EqualsBean.beanHashCode() * ObjectBean.hashCode() * HashMap&amp;lt;K,V&amp;gt;.hash(Object) * HashMap&amp;lt;K,V&amp;gt;.readObject(ObjectInputStream) 依赖 1 2 3</description>
        </item>
        <item>
        <title>[Java安全] Jdk7u21链分析</title>
        <link>https://blog.huamang.xyz/post/jdk7u21/</link>
        <pubDate>Mon, 24 Oct 2022 17:46:10 +0800</pubDate>
        
        <guid>https://blog.huamang.xyz/post/jdk7u21/</guid>
        <description>Gadget 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 LinkedHashSet.readObject() LinkedHashSet.add() ... TemplatesImpl.hashCode() (X) LinkedHashSet.add() ... Proxy(Templates).hashCode() (X) AnnotationInvocationHandler.invoke() (X) AnnotationInvocationHandler.hashCodeImpl() (X) String.hashCode() (0) AnnotationInvocationHandler.memberValueHashCode() (X) TemplatesImpl.hashCode() (X) Proxy(Templates).equals() AnnotationInvocationHandler.invoke() AnnotationInvocationHandler.equalsImpl() Method.invoke() ... TemplatesImpl.getOutputProperties() TemplatesImpl.newTransformer() TemplatesImpl.getTransletInstance() TemplatesImpl.defineTransletClasses() ClassLoader.defineClass() Class.newInstance() ... MaliciousClass.&amp;lt;clinit&amp;gt;() ... Runtime.exec() 利用链分析 这个利</description>
        </item>
        <item>
        <title>[Java安全] CommonsCollections7链分析</title>
        <link>https://blog.huamang.xyz/post/cc7/</link>
        <pubDate>Mon, 24 Oct 2022 13:08:26 +0800</pubDate>
        
        <guid>https://blog.huamang.xyz/post/cc7/</guid>
        <description>gadget 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Gadget chain: Hashtable.readObject Hashtable.reconstitutionPut AbstractMapDecorator.equals AbstractMap.equals LazyMap.get() ChainedTransformer.transform() ConstantTransformer.transform() InvokerTransformer.transform() Method.invoke() Class.getMethod() InvokerTransformer.transform() Method.invoke() Runtime.getRuntime() InvokerTransformer.transform() Method.invoke() Runtime.exec() 利用链分析 CC7的关键点是利用到AbstractMap的equals</description>
        </item>
        <item>
        <title>[Java安全] CommonsBeanutils1在Shiro中的利用</title>
        <link>https://blog.huamang.xyz/post/shiro2/</link>
        <pubDate>Thu, 06 Oct 2022 17:57:59 +0800</pubDate>
        
        <guid>https://blog.huamang.xyz/post/shiro2/</guid>
        <description>前言 为什么CB1会和Shiro扯上关系，前面我们研究Shiro反序列化的时候，使用的是P牛的demo，我们可以看到maven项目里是装了一个</description>
        </item>
        <item>
        <title>[Java安全] CommonsBeanutils1利用链分析</title>
        <link>https://blog.huamang.xyz/post/cb1/</link>
        <pubDate>Thu, 06 Oct 2022 15:20:08 +0800</pubDate>
        
        <guid>https://blog.huamang.xyz/post/cb1/</guid>
        <description>前言 Apache Commons Beanutils 是 Apache Commons 工具集下的另一个项目，它提供了对普通Java类对象（也称为JavaBean）的一些操作方法 JavaBean就不多说了，搞过一</description>
        </item>
        <item>
        <title>[Java安全] CommonsCollections4链分析</title>
        <link>https://blog.huamang.xyz/post/cc4/</link>
        <pubDate>Wed, 05 Oct 2022 22:03:34 +0800</pubDate>
        
        <guid>https://blog.huamang.xyz/post/cc4/</guid>
        <description>前言 Apache Commons Collections有以下两 个分⽀版本： commons-collections:commons-collections org.apache.commons:commons-collections4 前者是Commons Collections⽼的版本包，当时版本号是3.2.1；后者是官</description>
        </item>
        <item>
        <title>[Java安全] Shiro反序列化CC链漏洞</title>
        <link>https://blog.huamang.xyz/post/shiro1/</link>
        <pubDate>Mon, 03 Oct 2022 22:30:52 +0800</pubDate>
        
        <guid>https://blog.huamang.xyz/post/shiro1/</guid>
        <description>测试环境搭建 我这里用的是P牛的JavaThings，这里有一个Maven构建的非常简易的Shiro的应用 这里用idea打开，然后构建Mave</description>
        </item>
        <item>
        <title>[Java安全] CommonsCollections3链分析</title>
        <link>https://blog.huamang.xyz/post/cc3/</link>
        <pubDate>Mon, 03 Oct 2022 20:47:28 +0800</pubDate>
        
        <guid>https://blog.huamang.xyz/post/cc3/</guid>
        <description>前言 因为一些反序列化的过滤工具的原因，把CC1的InvokeTransformer等给过滤了，所以设计出CC3来绕过⼀些规则对Invoker</description>
        </item>
        <item>
        <title>[Java安全] Templatesimpl与字节码</title>
        <link>https://blog.huamang.xyz/post/templatesimpl/</link>
        <pubDate>Mon, 03 Oct 2022 14:39:19 +0800</pubDate>
        
        <guid>https://blog.huamang.xyz/post/templatesimpl/</guid>
        <description>Java字节码 URLClassLoader远程加载 在前面学习classloader的时候就学习到了URLClassLoader，进行远程加载</description>
        </item>
        <item>
        <title>[Java安全] CommonsCollections6链分析</title>
        <link>https://blog.huamang.xyz/post/cc6/</link>
        <pubDate>Sun, 02 Oct 2022 15:51:14 +0800</pubDate>
        
        <guid>https://blog.huamang.xyz/post/cc6/</guid>
        <description>前言 之前我们分析了CC1，从简化版开始学习，再到完整分析CC1，再学习了动态代理和LazyMap的利用链构造，但是都有一个缺陷就是版本限制，</description>
        </item>
        <item>
        <title>[Java安全] CommonsCollections1链分析</title>
        <link>https://blog.huamang.xyz/post/cc1/</link>
        <pubDate>Thu, 29 Sep 2022 14:05:47 +0800</pubDate>
        
        <guid>https://blog.huamang.xyz/post/cc1/</guid>
        <description>前面写了很多，现在终于到大名鼎鼎的CC链了，这里我还是跟P牛的《Java安全漫谈》来对CC链进行分析学习 CommonCollection1 前菜 首先P牛帮我们简化CC链成如下</description>
        </item>
        <item>
        <title>[Java安全] URLDNS</title>
        <link>https://blog.huamang.xyz/post/urldns/</link>
        <pubDate>Thu, 29 Sep 2022 00:34:07 +0800</pubDate>
        
        <guid>https://blog.huamang.xyz/post/urldns/</guid>
        <description>前言 Java反序列化的基础知识前面已经大概了解了，现在终于到上手的时候了，这里按p牛说的来，先从DNSURL下手，进行反序列利用链的入门 ysoserial 这</description>
        </item>
        <item>
        <title>[Java安全] Java反序列化</title>
        <link>https://blog.huamang.xyz/post/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</link>
        <pubDate>Wed, 28 Sep 2022 16:12:56 +0800</pubDate>
        
        <guid>https://blog.huamang.xyz/post/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
        <description>前言 在Java安全中，Java反序列化占据很重要的地位。 在前面RMI的探索中，我们可以在数据包中看到，他传递的数据是序列化的 Java的反序列</description>
        </item>
        <item>
        <title>[Java安全] RMI</title>
        <link>https://blog.huamang.xyz/post/java%E5%AE%89%E5%85%A8_rmi/</link>
        <pubDate>Tue, 27 Sep 2022 14:43:46 +0800</pubDate>
        
        <guid>https://blog.huamang.xyz/post/java%E5%AE%89%E5%85%A8_rmi/</guid>
        <description>前言 RMI全程Remote Method Invocation，远程⽅法调⽤ 他的功能是让一个Java虚拟机上的对象调用另一个Java虚拟机中对象上的方法，</description>
        </item>
        <item>
        <title>[Java安全]类加载器ClassLoader</title>
        <link>https://blog.huamang.xyz/post/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</link>
        <pubDate>Wed, 30 Mar 2022 19:17:18 +0800</pubDate>
        
        <guid>https://blog.huamang.xyz/post/java%E5%AE%89%E5%85%A8_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</guid>
        <description>前言 借用了先知社区的文章的一张图来解释这个原理 负责动态加载Java类到Java虚拟机的内存空间中，用于加载系统、网络或者其他来源的类文件。J</description>
        </item>
        <item>
        <title>[Java安全]反射</title>
        <link>https://blog.huamang.xyz/post/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/</link>
        <pubDate>Mon, 07 Mar 2022 19:14:57 +0800</pubDate>
        
        <guid>https://blog.huamang.xyz/post/java%E5%AE%89%E5%85%A8_%E5%8F%8D%E5%B0%84/</guid>
        <description>前言 准备入手学习java的安全了，感觉这也是一个大的趋势，想着尽早进入到java安全的探索中，在反序列化链的学习之前，需要先学习反射，不多说</description>
        </item>
        <item>
        <title>[Java安全] 远程调试初探</title>
        <link>https://blog.huamang.xyz/post/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1_%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%88%9D%E6%8E%A2/</link>
        <pubDate>Sat, 18 Sep 2021 18:56:41 +0800</pubDate>
        
        <guid>https://blog.huamang.xyz/post/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1_%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%88%9D%E6%8E%A2/</guid>
        <description>Jar包的调试 这里以冰蝎做示例 把冰蝎的jar包和他必须的db数据库文件放到项目的lib目录下 把jar包添加到库 如下配置调试配置 新建远程JVM</description>
        </item>
        
    </channel>
</rss>
