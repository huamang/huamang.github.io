{"meta":{"title":"Huamang's Blog","subtitle":"向美好的日子进发","description":"回避现实的人，未来将更不理想","author":"huamang","url":"http://example.com","root":"/"},"pages":[{"title":"tags","date":"2020-12-24T06:45:13.000Z","updated":"2020-12-24T07:22:42.156Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"about","date":"2020-12-24T06:42:35.000Z","updated":"2020-12-24T07:35:50.066Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"向美好的日子出发 我的CSDN：https://blog.csdn.net/m0_51078229"}],"posts":[{"title":"butterfly主题配置记录","slug":"butterfly配置记录","date":"2020-12-26T12:33:59.091Z","updated":"2020-12-26T12:36:57.323Z","comments":true,"path":"2020/12/26/butterfly配置记录/","link":"","permalink":"http://example.com/2020/12/26/butterfly%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/","excerpt":"","text":"安装依赖一开始要输入这个代码，不然打不开 1npm install hexo-renderer-pug hexo-renderer-stylus --save 添加关于和标签这两个不能直接去掉标注就生效，要生成一个page还要在md文件里加上 1234---title: tagsdate: 2020年12月24日15:14:16type: &quot;tags&quot; 1234---title: aboutdate: 2020年12月24日15:14:16type: &quot;about&quot; 添加鼠标和文字样式参考小康大佬参考木槿大佬把代码添加到：\\Butterfly\\source\\css\\_third-partynormalize.min.css末尾 背景的自定义参考大佬的博客：小康大佬自建一个css文件，在主题配置文件inject处引入 图片懒加载详情请看作者github：https://github.com/Troy-Yang/hexo-lazyload-image大佬的插件推荐：justlovesmile大佬 添加Valine大佬的博客X北辰北大佬博客讲的很详细了，主要提示一下butterfly主题有个小坑这里要把注释去掉，不是在冒号后面加Valine","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"用类和对象写一个计时器","slug":"用类和对象写一个计时器","date":"2020-12-24T05:36:32.842Z","updated":"2020-12-24T05:50:30.665Z","comments":true,"path":"2020/12/24/用类和对象写一个计时器/","link":"","permalink":"http://example.com/2020/12/24/%E7%94%A8%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E5%86%99%E4%B8%80%E4%B8%AA%E8%AE%A1%E6%97%B6%E5%99%A8/","excerpt":"用类和对象写一个计时器","text":"用类和对象写一个计时器 在学了一些类和对象之后，在书上看到一个例子，用类和对象打造一个计时器，我一开始没有思路，大概看了一下书上的例题后有了思路，下面是我自己写的代码（借鉴例子） 1234567891011121314151617import timeimport mathclass Count: def start(self): self.start=time.localtime() print(&quot;开始计时&quot;) def stop(self): self.stop=time.localtime() self.do() print(&quot;计时结束&quot;) def do(self): self.sec=math.fabs(self.stop[5]-self.start[5]) self.min=self.stop[4]-self.start[4] print(&quot;运行了%d秒&quot; % (self.sec+self.min*60))t=Count()t.start()t.stop() 首先我去查了一下time模块的内容，找到了这个用法说明 12345#作用：用于单独获取时间的某一部分t = time.localtime()print(t)#输出结果time.struct_time(tm_year=2020, tm_mon=12, tm_mday=18, tm_hour=20, tm_min=57, tm_sec=2, tm_wday=4, tm_yday=353, tm_isdst=0) 他会返回一个元组，下标是4，5对应分钟和秒钟，只需要让他们相减就可以 看了书上的写法，比我的高明很多，先留坑，以后把改善后的代码补回来","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"}]},{"title":"Python中__new__函数的理解","slug":"Python魔法方法中__new__()函数的理解，配合小甲鱼的例子的理解","date":"2020-12-23T16:37:55.295Z","updated":"2020-12-23T16:50:22.505Z","comments":true,"path":"2020/12/24/Python魔法方法中__new__()函数的理解，配合小甲鱼的例子的理解/","link":"","permalink":"http://example.com/2020/12/24/Python%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%E4%B8%AD__new__()%E5%87%BD%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%8C%E9%85%8D%E5%90%88%E5%B0%8F%E7%94%B2%E9%B1%BC%E7%9A%84%E4%BE%8B%E5%AD%90%E7%9A%84%E7%90%86%E8%A7%A3/","excerpt":"Python中__new__函数的理解","text":"Python中__new__函数的理解 在小甲鱼的课程里，学到了__new__函数的时候，我刚看完他的例子，我是一脸懵逼啊，一点都没有头绪，为啥这样做？在看了几篇博客以后我稍有理解，在这里记录一下 new 是在一个对象实例化的时候所调用的第一个方法。它跟其他魔法方法不同，它的第一个参数不是 self 而是这个类（cls），而其他的参数会直接传递给 init 方法的。 个人理解：new方法是会在init方法前调用的，除了第一个参数，其他参数会返回给init 123456class Do (str): #继承str的方法 def __new__(cls,itstr): #调用__new__函数，传入字符串itstr itstr = itstr.upper() # 把每个字母大写 return str.__new__(cls,itstr) #返回实例对象给__init__函数d = Do(&#x27;AbcDeFg&#x27;) #创建实例对象print(d) 创建实例对象d的时候，本来是调用init函数的但是由于我们重写了new函数，所以在调用init函数之前会先调用new函数我们重写的new函数第二个参数是itstr，但是我们还要加工后再返回给init所以在加工完后return里写str.__new__(cls,itstr)重新调用new函数后把加工后的itstr返回给init函数所以在调用完了new后开始调用init时，init收到的参数是加工后的itstr，所以d的值就是“ABCDEFG”了 利用这个特点，我们可以在实例化初始化之前对传入的参数进行修改计算，修改以后再传给init，通熟的说就是“掉包”，例如 1234class Do(float): # 继承浮点数的方法 def __new__(cls, num): # 传入参数num return float.__new__(cls, num*1.5) # 对num加工后返回给initprint(Do(12))","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"},{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"vscode使用笔记","slug":"vscode使用笔记","date":"2020-12-12T16:00:00.000Z","updated":"2020-12-16T15:17:37.889Z","comments":true,"path":"2020/12/13/vscode使用笔记/","link":"","permalink":"http://example.com/2020/12/13/vscode%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/","excerpt":"vscode使用笔记","text":"vscode使用笔记 推荐安装的插件这里主要推荐三款核心插件，其余的可以按需选择。 1.Markdown All in One：目前 Vscode 最流行的 Markdown 语法解析器。 2.Markdown PDF：使用的 Markdown 文件渲染导出插件。 3.Markdown TOC：一款针对 Github 等平台自动生成文章目录的插件（目前主流的博客平台如 CSDN 已经不需要自己在文中生成目录了）。 使用vscode预览Markdown文件 VScode已经默认集成markdown文档编辑插件,所以编辑md文件时已经有代码高亮。要实时预览的话按Ctrl+shift+p 后搜索Markdown找到这个 或使用快捷键Ctrl+k 放掉以后再按v 导入图片导入图片语法： 只记录一种图片插入方式 1![](xxx.png) 可以是本地的路径也可以是网络上的图片地址 导入代码块1使用&#96;&#96;&#96;代码内容&#96;&#96;&#96; 大佬的博客有更全面的介绍https://www.cnblogs.com/jpfss/p/10941921.html vscode配置c/c++编译调试环境下载好MinGW，配置系统环境 安装插件打开vscode把这两个插件安装好，按这个小三角就可以直接运行了 配置调试环境但是代码出现了问题不能调试，所以我们还得配置一下调试环境都选第一个会发现弹出一个文件，别管他直接关掉就好，现在的vscode会直接帮你配置好，不需要像其他博主那样自己创建自己输入现在就可以调试了，大功告成","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"vscode","slug":"vscode","permalink":"http://example.com/tags/vscode/"}]},{"title":"前端学习笔记","slug":"前端学习笔记HTML5，CSS3（更新中）","date":"2020-12-12T16:00:00.000Z","updated":"2020-12-26T08:52:46.667Z","comments":true,"path":"2020/12/13/前端学习笔记HTML5，CSS3（更新中）/","link":"","permalink":"http://example.com/2020/12/13/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0HTML5%EF%BC%8CCSS3%EF%BC%88%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89/","excerpt":"前端学习笔记","text":"前端学习笔记 网页分成三个部分： 结构(HTML) 表现(CSS) 行为(JavaScript)css简介与使用1.内部样式 将样式编写到head中的style标签里然后通过CSS的选择器来选中元素并为其设置各种样式可以同时为多个标签设置样式，并且修改时只需要修改一处即可全部应用 内部样式表更加方便对样式进行复用 缺点：我们的内部样式表只能对一个网页起作用，它里边的样式不能跨页面进行复用 2.外部样式表以将CSS样式编写到一个外部的CSS文件中,然后通过link标签来引入外部的CSS文件 外部样式表需要通过link标签进行引入，意味着只要想使用这些样式的网页都可以对其进行引用使样式可以在不同页面之间进行复用 将样式编写到外部的CSS文件中，可以使用到浏览器的缓存机制，从而加快网页的加载速度，提高用户的体验。css的语法1.注释：/**/ 2.基本语法：选择器 声明块 选择器，通过选择器可以选中页面中的指定元素比如 p 的作用就是选中页面中所有的p元素 声明块，通过声明块来指定要为元素设置的样式声明块由一个一个的声明组成 声明是一个名值对结构一个样式名对应一个样式值，名和值之间：以:连接 ，以;结尾 选择器1.常用选择器 元素选择器作用：根据标签名来选中指定的元素语法：标签名{}例子：p{} h1{} div{} id选择器作用：给元素设定id属性，根据元素的id属性值选中一个元素 语法：#id属性值{} 例子：#box{} #red{} 类选择器作用：给元素设定，根据元素的class属性值选中一组元素 语法：.class属性值 好处：既可以给单一标签设定样式，也可以给一组标签设定样式 通配选择器 作用：选中页面中的所有元素 语法: * 2.复合选择器 交集选择器作用：选中同时复合多个条件的元素 语法：选择器1选择器2选择器3选择器n{} 注意点：交集选择器中如果有元素选择器，必须使用元素选择器开头 并集选择器作用：同时选择多个选择器对应的元素，其中可以是交集选择器语法：选择器1,选择器2,选择器3,选择器n{}例子： #b1,.p1,h1,span,div.red{} 关系选择器介绍标签关系： 123456789父元素：直接包含子元素的元素叫做父元素子元素：直接被父元素包含的元素是子元素祖先元素：1.直接或间接包含后代元素的元素叫做祖先元素2.一个元素的父元素也是它的祖先元素后代元素：1.直接或间接被祖先元素包含的元素叫做后代元素2.子元素也是后代元素兄弟元素：拥有相同父元素的元素是兄弟元素 子元素选择器作用：选中指定父元素的指定子元素 语法：父元素 &gt; 子元素 后代元素选择器作用：选中指定元素内的指定后代元素 语法：祖先 后代 兄弟选择器1.选择下一个兄弟 语法：前一个 + 下一个 选择紧贴着p的span的兄弟元素 2.选择下边所有的~符号后面标签名的兄弟 语法：兄 ~ 弟选择p后面的所有的span兄弟元素 属性选择器语法：[属性名] 选择含有指定属性的元素[属性名=属性值] 选择含有指定属性和属性值的元素[属性名^=属性值] 选择属性值以指定值开头的元素[属性名$=属性值] 选择属性值以指定值结尾的元素[属性名*=属性值] 选择属性值中含有某值的元素的元素 伪类选择器伪类（不存在的类，特殊的类）伪类用来描述一个元素的特殊状态比如：第一个子元素、被点击的元素、鼠标移入的元素…伪类一般情况下都是使用:开头 :empty 匹配冒号前面元素的类型中没有子元素的元素 :only-child 匹配他的父元素中只有唯一子元素的子元素(匹配的是冒号前的元素，也就是那个子元素) :first-child 第一个子元素:last-child 最后一个子元素:nth-child() 选中第n个子元素 :nth-last-child(n) 指定每个冒号前元素，匹配该元素的同级兄弟元素里倒数第n个元素 特殊值：n 第n个 n的范围0到正无穷2n 或 even 表示选中偶数位的元素2n+1 或 odd 表示选中奇数位的元素以上这些伪类都是根据所有的子元素进行排序 :first-of-type:last-of-type:nth-of-type():nth-last-of-child(n)这几个伪类的功能和上述的类似，不同点是他们是在冒号前元素的父元素里面的同类型元素中进行排序:not() 否定伪类将符合条件的元素从选择器中去除 a元素的伪类语法：:link 用来表示没访问过的链接（正常的链接）:visited 用来表示访问过的链接，由于隐私的原因，所以visited这个伪类只能修改链接的颜色。:hover 用来表示鼠标移入的状态:active 用来表示鼠标点击下去的瞬间（如果鼠标一直按住不放就不是瞬间哈哈哈） 直接在a元素里设置color属性，不管上面的点没点过，hover不hover都是那个颜色要想设置这些属性就再a:hover{colorxxx}就可以 伪元素选择器伪元素，表示页面中一些特殊的并不真实的存在的元素（特殊的位置）伪元素使用 :: 开头语法：::first-letter 表示第一个字母::first-line 表示第一行::selection 表示鼠标拖动选中的内容::before 元素的开始::after 元素的最后before 和 after 必须结合content属性来使用 选择器权重 样式 权重 内联样式 1000 id选择器 0100 类和伪类选择器 0010 元素选择器 0001 通配选择器 0000 继承 没有优先级 1.比较优先级时，需要将所有的选择器的优先级进行相加计算，最后优先级越高，则越优先显示（分组选择器是单独计算的）, 一般来说选择器越详细优先级越高。 2.选择器的累加不会超过其最大的数量级，类选择器在高也不会超过id选择器如果优先级计算后相同，此时则优先使用靠下的样式 3.可以在某一个样式的后边添加 !important ，则此时该样式会获取到最高的优先级，甚至超过内联样式。注意：在开发中这个玩意一定要慎用！ 单位长度单位 像素屏幕（显示器）实际上是由一个一个的小点点构成的不同屏幕的像素大小是不同的，像素越小的屏幕显示的效果越清晰所以同样的200px在不同的设备下显示效果不一样 百分比也可以将属性值设置为相对于其父元素属性的百分比设置百分比可以使子元素跟随父元素的改变而改变 emem是相对于元素的字体大小来计算的1em = 1font-size系统默认的font-size是16pxem会根据字体大小的改变而改变当加上font-size时会根据font-size来布置 remrem是相对于根元素的字体大小来计算与em同理，只不过他认定的font-size是根元素html里的font-size 123html&#123; font-size=10px&#125; 颜色颜色单位 颜色名在CSS中可以直接使用颜色名来设置各种颜色比如：red、orange、yellow、blue、green … …但是在css中直接使用颜色名是非常的不方便 RGB值：RGB通过三种颜色的不同浓度来调配出不同的颜色R：red，G：green ，B：blue每一种颜色的范围在 0 - 255 (0% - 100%) 之间语法：RGB(红色,绿色,蓝色) RGBA:就是在rgb的基础上增加了一个a表示不透明度需要四个值，前三个和rgb一样，第四个表示不透明度1表示完全不透明 0表示完全透明 .5半透明 十六进制的RGB值：语法：#红色绿色蓝色颜色浓度通过 00-ff如果颜色两位两位重复可以进行简写#aabbcc –&gt; #abc，而#aabbcd就不能简写一定要RGB每一项都两两重复 HSL值 HSLA值H 色相(0 - 360)S 饱和度，颜色的浓度 0% - 100%（100%最正）L 亮度，颜色的亮度 0% - 100%（50%最正）A 不透明度，和之前的一样 layout关系着整个网页的布局 文档流文档流（normal flow） 网页是一个多层的结构，一层摞着一层 通过CSS可以分别为每一层来设置样式 作为用户来讲只能看到最顶上一层 这些层中，最底下的一层称为文档流，文档流是网页的基础 我们所创建的元素默认都是在文档流中进行排列 对于我们来元素主要有两个状态 在文档流中 不在文档流中（脱离文档流） 元素在文档流中有什么特点：块元素： 块元素会在页面中独占一行(自上向下垂直排列) 默认宽度是父元素的全部（会把父元素撑满） 默认高度是被内容撑开（子元素） 行内元素： 行内元素不会独占页面的一行，只占自身的大小 行内元素在页面中左向右水平排列，如果一行之中不能容纳下所有的行内元素则元素会换到第二行继续自左向右排列（书写习惯一致） 行内元素的默认宽度和高度都是被内容撑开 盒子模型盒模型、盒子模型、框模型（box model） CSS将页面中的所有元素都设置为了一个矩形的盒子 将元素设置为矩形的盒子后，对页面的布局就变成将不同的盒子摆放到不同的位置 每一个盒子都由一下几个部分组成：内容区（content）内边距（padding）边框（border）外边距（margin） 内容区（content），元素中的所有的子元素和文本内容都在内容区中排列内容区的大小由width 和 height两个属性来设置 width 设置内容区的宽度 height 设置内容区的高度 123width: 200px;height: 200px;background-color: #bfa; 边框（border），边框属于盒子边缘，边框里边属于盒子内部，出了边框都是盒子的外部边框的大小会影响到整个盒子的大小要设置边框，需要至少设置三个样式： 边框的宽度 border-width 边框的颜色 border-color 边框的样式 border-style 123border-width: 10px;border-color: red;border-style: solid 边框不会影响内容区的大小，但会影响整个盒子模型的大小 边框边框 (border) 边框的宽度 border-width 边框的颜色 border-color 边框的样式 border-style 宽度border-width: 10px; 默认值，一般都是 3个像素border-width可以用来指定四个方向的边框的宽度值的情况 四个值：上 右 下 左 三个值：上 左右 下 两个值：上下 左右 一个值：上下左右 除了border-width还有一组 border-xxx-widthxxx可以是 top right bottom left用来单独指定某一个边的宽度 颜色border-color用来指定边框的颜色，同样可以分别指定四个边的边框规则和border-width一样border-color也可以省略不写，如果省略了则自动使用color的颜色值 1color: red; 样式border-style 指定边框的样式，默认值是none 表示没有边框 solid 表示实线 dotted 点状虚线 dashed 虚线 double 双线 简写属性 border简写属性，通过该属性可以同时设置边框所有的相关样式，并且没有顺序要求 除了border以外还有四个 border-xxx border-top border-right border-bottom border-left 这个方式比较方便所以用的比较多 1border: 10px red solid; 内边距（padding） 内容区和边框之间的距离是内边距 一共有四个方向的内边距： padding-top padding-right padding-bottom padding-left 简写属性和border一样遵循上左下右规则padding: 10px 20px 30px 40px; 内边距的设置会影响到盒子的大小，背景颜色会延伸到内边距上 一共盒子的可见框的大小，由内容区 内边距 和 边框共同决定， 所以在计算盒子大小时，需要将这三个区域加到一起计算 外边距（margin）外边距不会影响盒子可见框的大小但是外边距会影响盒子的位置 一共有四个方向的外边距：margin-top：上外边距，设置一个正值，元素会向下移动margin-right：默认情况下设置margin-right不会产生任何效果margin-bottom：下外边距，设置一个正值，其下边的元素会向下移动margin-left：左外边距，设置一个正值，元素会向右移动 margin也可以设置负值，如果是负值则元素会向相反的方向移动 元素在页面中是按照自左向右的顺序排列的，都往左上角挤，所以默认情况下如果我们设置的左和上外边距则会移动元素自身，而设置下和右外边距会挤开其他元素 margin的简写属性：margin 可以同时设置四个方向的外边距 ，用法和padding一样 margin会影响到盒子的实际占用空间 盒子的水平布局元素的水平方向的布局：元素在其父元素中水平方向的位置由以下几个属性共同决定 margin-left border-left padding-left width padding-right border-right margin-right 一个元素在其父元素中，水平布局必须要满足以下的等式margin-left+border-left+padding-left+width+padding-right+border-right+margin-right = 其父元素内容区的宽度 （必须满足）以上等式必须满足，如果相加结果使等式不成立，则称为过度约束，则等式会自动调整调整的情况：1，如果这七个值中没有为 auto 的情况，则浏览器会自动调整margin-right值以使等式满足，所以之前说调margin-right不会有任何效果，一般来说margin-right是由浏览器自己来调节的。2，如果要设置auto，七个值有三个可以设置auto： width margin-left maring-right 1，如果将一个宽度和一个外边距设置为auto，则宽度会调整到最大，设置为auto的外边距会自动为0 2，如果将三个值都设置为auto，则外边距都是0，宽度最大 3，如果将两个外边距设置为auto，宽度固定值，则会将外边距设置为相同的值可以利用这个原理让元素在父元素中居中 12width:200px;margin:0 auto; 这个0是上下外边距，auto是左右外边距 总的来说1，七个属性要满足等式。2，如果不满足就会自动调整： 如果没设置auto则自动调整margin-right填满父元素 如果设置了auto分情况 垂直方向的布局默认情况下父元素的高度被内容撑开垂直方向上内容（包括子元素的边框边距等等）多高父元素就被撑的多高 如果父元素高度被设定，那该是多少就是多少。 子元素是在父元素的内容区中排列的，如果子元素的大小超过了父元素，则子元素会从父元素中溢出，使用 overflow 属性来设置父元素如何处理溢出的子元素可选值： visible，默认值 子元素会从父元素中溢出，在父元素外部的位置显示 hidden 溢出内容将会被裁剪不会显示 scroll 生成两个滚动条，通过滚动条来查看完整的内容 auto 根据需要生成滚动条（有的时候不需要两个滚动条，就用auto就好） 垂直外边距的折叠我们给这两个元素分别设置上下外边距的时候，有一个不生效 相邻的垂直方向外边距会发生重叠现象兄弟元素： 兄弟元素间的相邻垂直外边距会取两者之间的较大值（两者都是正值） 特殊情况：如果相邻的外边距一正一负，则取两者的和如果相邻的外边距都是负值，则取两者中绝对值较大的 兄弟元素之间的外边距的重叠，对于开发是有利的，所以我们不需要进行处理 父子元素： 父子元素间相邻外边距，子元素的会传递给父元素（上外边距） 父子外边距的折叠会影响到页面的布局，必须要进行处理方法1：设置父元素的padding再改height方法2：以后再说更好的 行内元素的盒模型行内元素的盒模型 行内元素不支持设置宽度和高度 行内元素可以设置padding，但是垂直方向padding不会影响页面的布局 行内元素可以设置border，垂直方向的border不会影响页面的布局 行内元素可以设置margin，垂直方向的margin不会影响布局display 用来设置元素显示的类型可选值： inline 将元素设置为行内元素 block 将元素设置为块元素 inline-block 将元素设置为行内块元素行内块，既可以设置宽度和高度又不会独占一行 table 将元素设置为一个表格 none 元素不在页面中显示a是行内元素，通过display把他设置成块元素，宽高就能实现了 visibility 用来设置元素的显示状态可选值： visible 默认值，元素在页面中正常显示 hidden 元素在页面中隐藏 不显示，但是依然占据页面的位置与none的区别，none直接是消失，不会给他留位置","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"hexo主题yilia个性化","slug":"hexo主题yilia个性化","date":"2020-12-11T16:00:00.000Z","updated":"2020-12-12T03:58:03.494Z","comments":true,"path":"2020/12/12/hexo主题yilia个性化/","link":"","permalink":"http://example.com/2020/12/12/hexo%E4%B8%BB%E9%A2%98yilia%E4%B8%AA%E6%80%A7%E5%8C%96/","excerpt":"展开全文的美化","text":"展开全文的美化 在md文件中加这个标签会有两个跑出来，我觉得很不美观所以找了另一个办法在yilia的_config.yml中把这个more改成空格就行了 为博客网站更换logo1.将图片放在yilia的img文件夹里 2.在yilia的config文件里把路径加上 展开全文的使用1、node.js版本必须6.2以上2、在hexo根目录下执行命令：npm i hexo-generator-json-content --save3.在根目录下的config里加入 123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: false raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 但是我的出现了问题没有标题在上面，那就没什么用了后来查资料我发现要在md文件头部加上这个东西title是标题，所有文章的索引就是依靠这个东西来标注的，tags是标签，要注意tags的格式不要搞错了。 左侧栏的美化不知道是不是我自己的原因，在根目录改的作者名和个性签名不能显示出来，所以一言也无法使用，后来百度了一下，说是现在的yilia会优先选择主题的author和subtitle，所以要在yilia的config文件里加上author和subtitle。 添加一言后来检查了一些别的大佬的主题设置，发现这样写是可以加上一言的在layout\\partial\\left-col文件里找到&lt;p class=&quot;header-subtitle&quot;&gt;&lt;%=theme.subtitle%&gt;&lt;/p&gt;，把他换成下面这几段 1234&lt;a id=&quot;hitokoto&quot; href=&quot;#&quot; onmouseover=&quot;this.style.color=&#x27;#7fffd4&#x27;;&quot; onmouseout=&quot;this.style.color=&#x27;aliceblue&#x27;;&quot;&gt;_(:з」∠)_ 加载中...&lt;/a&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/bluebird@3/js/browser/bluebird.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/whatwg-fetch@2.0.3/fetch.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://v1.hitokoto.cn/?encode=js&amp;select=%23hitokoto&quot; defer&gt;&lt;/script&gt; 这样就可以了 为左边栏子自定义图片背景1.打开\\themes\\yilia\\source\\main.xxxx.css文件 2.用你的编辑器在里面找到.left-col{ 3.在这个标签里删除background属性并加上background-image:url(“”);属性","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"yilia","slug":"yilia","permalink":"http://example.com/tags/yilia/"}]},{"title":"github上搭建好个人博客上传文件没有小绿格记录","slug":"github上搭建好个人博客上传文件没有小绿格记录","date":"2020-12-08T16:00:00.000Z","updated":"2020-12-13T06:41:10.263Z","comments":true,"path":"2020/12/09/github上搭建好个人博客上传文件没有小绿格记录/","link":"","permalink":"http://example.com/2020/12/09/github%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%A5%BD%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%B2%A1%E6%9C%89%E5%B0%8F%E7%BB%BF%E6%A0%BC%E8%AE%B0%E5%BD%95/","excerpt":"github上搭建好个人博客上传文件没有小绿格记录","text":"github上搭建好个人博客上传文件没有小绿格记录 本来想搭建博客后在上面更新博客在github上打卡小绿格记录但是发现小绿格没有出来我搭建完博客后上传到github的内容是这么些，但是我上传博客却不是在这里上传我是把md文件放到这个文件夹里使用下面三个命令来实现博客推送而不是git push的方式 123hexo cleanhexo ghexo d 但是我看到第一个文件夹里其实有更新的博客但是就是没有小绿格我看了一下我有两个branch，main和master，我的博客文件放在master里，而一个无关紧要的branch main被我创建库的时候设成了default,于是我就想改一下分支，但是没搞懂git的使用方法原理，把博客搞崩溃了。我干脆就删掉那个库重新搭建了一个博客，这次我就只设置了一个分支master搭够好了博客后我就发现使用hexo的三部上传博客也可以出现小绿格了。","categories":[],"tags":[{"name":"github","slug":"github","permalink":"http://example.com/tags/github/"}]},{"title":"在github创建库并向上上传文件","slug":"在github创建库并向上上传文件","date":"2020-12-07T16:00:00.000Z","updated":"2020-12-20T15:02:16.451Z","comments":true,"path":"2020/12/08/在github创建库并向上上传文件/","link":"","permalink":"http://example.com/2020/12/08/%E5%9C%A8github%E5%88%9B%E5%BB%BA%E5%BA%93%E5%B9%B6%E5%90%91%E4%B8%8A%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/","excerpt":"在github创建库并向上上传文件","text":"在github创建库并向上上传文件 我之前已经创建过库，绑定了密钥，所以省了很多步骤我就记录了一下过程怕自己忘记 1，先在github创建一个库复制这个链接到时要用 2.在本地创建一个文件夹在文件夹中使用git clone http....(这个是刚刚复制的地址)出现了你在github中创建的库的文件 上传文件1.打开后git bash here，将你要上传的文件放到里面再使用git add . 这个git add .的意思是：将项目上所有的文件添加到仓库中的意思，如果想添加某个特定的文件，只需把.换成这个特定的文件名。 2.使用git commit -m “xxx” xxx是该文件的提交的注释说明 3.使用git push -u origin main这个’main’是分支名，每个人可能不一样这一步做完就算完成了详细教学可以参考其一其二这个我觉得是写的最好的 以后要更新你的库就输入这几个命令：123git add .git commit -m &quot;&quot;git push origin main（那个-u是第一次上传的时候要用的） 每次push要输入密码push了几天以后，我发现每次push都要密码，贼麻烦，所以我就找了一下原因，原来我们直接clone下来的库默认是https的形式，所以每次都要输入密码但是如果改成ssh的形式就不用输入密码了具体的操作就看这个大佬的博客吧","categories":[],"tags":[{"name":"github","slug":"github","permalink":"http://example.com/tags/github/"}]},{"title":"指针练习","slug":"指针练习题","date":"2020-11-18T16:00:00.000Z","updated":"2020-12-13T06:41:12.611Z","comments":true,"path":"2020/11/19/指针练习题/","link":"","permalink":"http://example.com/2020/11/19/%E6%8C%87%E9%92%88%E7%BB%83%E4%B9%A0%E9%A2%98/","excerpt":"使用指针方法实现字符串逆序存放后再输出","text":"使用指针方法实现字符串逆序存放后再输出 编写程序：从键盘任意输入一个字符串，输出该字符串。然后，将该字符串逆序存放后再输出，要求用字符指针完成。（提示：逆序存放的函数接口：void invstr(char *s)） 123456789101112131415161718192021#include&lt;stdio.h&gt;#include&lt;string.h&gt;void invstr(char *s)&#123; char b; int len; len=strlen(s); /*获取该字符串的长度*/ for(int i=0;i&lt;len/2;i++)&#123; /*该循环的目的是每次将字符串的头和尾换一下位置*/ b=*(s+i); /*字符串的第i个元素的地址暂时放到b里*/ *(s+i)=*(s+len-1-i); /*将字符串的倒数第i个元素换到第i个元素*/ *(s+len-1-i)=b; /*再将b存放的地址放回倒数第i个元素*/ &#125; &#125;int main()&#123; char a[1000]; gets(a); /*输入字符串*/ printf(&quot;%s\\n&quot;,a); /*正序输出一次*/ invstr(a); /*运行函数*/ printf(&quot;%s&quot;,a); /*逆序输出*/ &#125; 利用指针编程，用指针方法编写一函数，实现两个字符串的比较。编程点拨：即自己编写一个strcmp函数：strcmp(s1,s2)，如果s1= s2，返回值为0，如果s1≠s2, 返回它们二者第一个不同字符的ASCII码差值(如”BOY”与”BAD”, 第二个字母不同，”O”与”A”之差为79-65=14)。如果要s1&gt;s2，则输出正值，如果s1&lt;s2，则输出负值。 123456789101112131415161718192021222324252627#include&lt;stdio.h&gt;#include&lt;string.h&gt;void strcmp(char *s1,char *s2)&#123; int len,i=0,sum=0,lenmax; lenmax = strlen(s1); len = strlen(s2); if(lenmax &lt; len)&#123; lenmax = len; &#125; for(i=0;i&lt;lenmax and sum==0;i++)&#123; if(*(s1+i) &gt; *(s1+i))&#123; sum = *(s1+i) - *(s2+i); &#125; if(*(s1+i) &lt; *(s2+i))&#123; sum = ( - (*(s1+i) - *(s2+i))); &#125; &#125; printf(&quot;%d&quot;,sum);&#125;int main()&#123; char s1[1000],s2[1000]; gets(s1); gets(s2); strcmp(s1,s2); &#125;","categories":[],"tags":[{"name":"c语言","slug":"c语言","permalink":"http://example.com/tags/c%E8%AF%AD%E8%A8%80/"},{"name":"指针","slug":"指针","permalink":"http://example.com/tags/%E6%8C%87%E9%92%88/"}]},{"title":"使用Hexo在Github上创建博客","slug":"使用Hexo在Github上创建博客","date":"2020-10-18T16:00:00.000Z","updated":"2020-12-17T02:59:56.360Z","comments":true,"path":"2020/10/19/使用Hexo在Github上创建博客/","link":"","permalink":"http://example.com/2020/10/19/%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8Github%E4%B8%8A%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2/","excerpt":"使用Hexo在Github上创建博客","text":"使用Hexo在Github上创建博客 前言先说明一下，我在此时只是一位刚上大一的新生，还啥都不懂，文中如果有什么错误或不规范的地方请各位大佬斧正，我定会虚心接受。在10月18日晚上，学长给我布置了个作业，让我在github上构建属于自己的博客网站，我了解了一下，觉得有个属于自己的网站简直太帅了，于是就兴冲冲的开始了搭建，在10月19号下午，废物的我终于搭建好了。于是在此记录一下我搭建的过程。 一、安装必备插件Git，Node.js。#安装Git和Node.js我就不在此多加赘述，哪里都能找到，而且讲的也详细。 二、安装Hexo。#1、在电脑中创建文件夹比如我是这样创建的 2、进入这个文件夹按右键选择Git bash here打开小黑框 3、依次输入1npm install -g hexo 安装Hexo的基础框架。 1hexo init 初始化hexo。 1npm install 安装相关组件。 1hexo s 生成静态页面 这个时候你可以在本地访问自己的网站了。 但是也只仅限于你，接下来我们要把这玩意上传到Github里面，让所有人都能访问。 三、将本地内容上传到Github里。1、注册一个Github账号2、创建一个仓库 3、配置Github的个人数据123git config --global user.name &quot;xxxname&quot; git config --global user.email &quot;xxxemail&quot; xxx是你自己的用户名，配置完成后可以输入下面的代码来验证 1git config --list 如果出现了问题，用下面两个代码重新设置 123$ git config --global --replace-all user.email &quot;输入你的邮箱&quot; $ git config --global --replace-all user.name &quot;输入你的名字&quot; 4、设置你的ssh密钥1ssh-keygen -t rsa -C &quot;xxxemail&quot; 注意上面代码的C要大写喔代码输入了以后一直按回车就好，直到出现这个页面就OK了然后我们可以直接在小黑框中调出密钥 1cat ~/.ssh/id_rsa.pub 从ssh-rsa开始一直到.com全部复制下来上传ssh就可以了像这样就成功了然后我们可以在小黑框上输入ssh -T git@github.com进行验证看到他和你打招呼了就意味着OK了 5、上传到Github用记事本打开这个文件，直接拉到最下面，按照这个格式打好，注意红点标注了的地方是有一个空格的 然后再到小黑框里输入npm install hexo-deployer-git --save 123hexo cleanhexo ghexo d 这个时候你的网站就算搭建完成了！可以让别人访问了http://你自己的用户名.github.io 上传博客将博客文件放到文件夹里后执行三个命令 123hexo cleanhexo ghexo d","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://example.com/tags/github/"}]}],"categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"},{"name":"vscode","slug":"vscode","permalink":"http://example.com/tags/vscode/"},{"name":"前端","slug":"前端","permalink":"http://example.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"yilia","slug":"yilia","permalink":"http://example.com/tags/yilia/"},{"name":"github","slug":"github","permalink":"http://example.com/tags/github/"},{"name":"c语言","slug":"c语言","permalink":"http://example.com/tags/c%E8%AF%AD%E8%A8%80/"},{"name":"指针","slug":"指针","permalink":"http://example.com/tags/%E6%8C%87%E9%92%88/"}]}